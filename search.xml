<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>算法学习笔记（一）：时间复杂度</title>
      <link href="/2018/04/02/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
      <url>/2018/04/02/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
      <content type="html"><![CDATA[<h3 id="算法基本概念"><a href="#算法基本概念" class="headerlink" title="算法基本概念"></a>算法基本概念</h3><p>一个算法的效率主要从两方面来衡量，即<strong>执行所需的时间长短</strong>和<strong>所需的存储空间大小</strong>。也就是算法中的两个复杂度：</p><ul><li><strong>时间复杂度</strong>：评估执行程序所需的时间，可以估算出程序对<strong>处理器</strong>的使用程度。</li><li><strong>空间复杂度</strong>：评估执行程序所需的存储空间，可以估算出程序对<strong>计算机内存</strong>的使用程度。</li></ul><p>在算法的效率研究中，因为时间复杂度比空间复杂度更容易产生问题。因此主要研究的是时间复杂度，在不特别说明的情况下，算法的复杂度通常是指算法的时间复杂度。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h4><p>一个算法花费的时间与算法中语句的执行次数成正比。可将<strong>算法中的语句执行次数</strong>称为<strong>时间频度</strong>或<strong>语句频度</strong>。记为<code>T(n)</code>。其中<code>n</code> 为问题的规模，类似需要排序的数组的长度，需要查询的元素的多少等。</p><p>当<code>n</code>不断变化时，时间频度<code>T(n)</code>也不断变化。也就是说时间频度<code>T(n)</code>是关于问题规模<code>n</code>的一个函数。</p><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>为了呈现时间频度<code>T(n)</code>随问题规模<code>n</code>的变化而变化时呈现出的规律，引入了<strong>时间复杂度</strong>的概念。</p><p>若存在某个辅助函数<code>f(n)</code>，使得当<code>n</code>趋近于无穷大时，<code>T(n)/f(n)</code>的极限值为不为0的常数，则称<code>f(n)</code>为<code>T(n)</code>的同数量级函数（最高阶数相同）。而此时有<code>T(n)=O(f(n))</code>,将<code>O(f(n))</code>称为算法的<strong>渐进时间复杂度</strong>，简称<strong>时间复杂度。</strong>表示随着问题规模<code>n</code>的增大，算法执行所需要的时间的增长可以用<code>O(f(n))</code>表示。</p><blockquote><p>在判断<code>f(n)</code>函数随<code>n</code>的变化而变化的规律时，最好和最准确的方法当然是求出函数的一阶导数。但在算法上，因为只需要大体了解算法的优劣即可，因此可以直接考虑<code>f(n)</code>函数中对增长速度影响最大的一项，即函数的<strong>最高阶数</strong>来评估算法的优劣。大O符号<code>O()</code>就是这样一种运算符号，作用为去除其他低阶项和与最高阶项相乘的常数，只保留最高阶项。 </p></blockquote><h4 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h4><p>计算时间复杂度时，根据<code>O(f(n))</code>的定义，可得，<code>f(n)</code>去掉低阶项和最高阶项的常数后，即可得出时间复杂度。一般最高阶项可能值如下：</p><ul><li>常数阶<code>O(1)</code></li><li>线性阶<code>O(n)</code></li><li>平方阶 <code>O(n²)</code></li><li>平方根阶 <code>O(√n)</code></li><li>立方阶 <code>O(n³)</code></li><li>对数阶 <code>O(logn)</code></li><li>指数阶 <code>O(2ⁿ)</code></li><li>线性对数阶 <code>O(nlogn)</code></li><li>阶乘阶 <code>O(n!)</code></li></ul><p>各阶数下时间频度和问题规模的曲线如下：</p><p><img src="https://img.catqu.com/images/2018/04/13/19f1e1491f5294a2.jpg" alt="图1"></p><p>常用时间复杂度按照所需时间从小到大排序为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2ⁿ) &lt; O(n!)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的VIM配置</title>
      <link href="/2018/03/19/%E6%88%91%E7%9A%84VIM%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/03/19/%E6%88%91%E7%9A%84VIM%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="我的vim配置"><a href="#我的vim配置" class="headerlink" title="我的vim配置"></a>我的<code>vim</code>配置</h4><p>在使用了数个编辑器和<em>IDE</em> 后，我最终还是选择了重回<em>VIM</em>怀抱。可能是因为前面配置<code>vim</code>时那种焦头烂额的感觉已经淡去，也可能是因为我终于决定遇见问题时沉下心来去一一解决，而不再是逃避。我打算将<code>vim</code>配置为我的终极代码编辑器，从此无论写什么，都可以以不变应万变了。</p><p>早先把<code>vim</code>当做尝鲜的编辑器去使用，所以很多重度使用时会遇到的问题都并没有亲身感觉。经过一个多月的重度使用后，各种问题解决了一大箩筐之后，也终于归纳整理出了适合我的一套<code>vim</code>配置。</p><p>在使用过程中，对于插件的添加我保持了尽量克制的态度，并没有使用太多插件。经过磨合和调试，这一套配置也已经能完全满足我的工作流要求，包括涉及到<code>js</code> ,<code>php</code>,<code>python</code>,<code>ts</code> 及<code>HTML</code>的<code>coding</code>各项需求。</p><p>经过这一个多月的大修大补的折腾，我也终于可以开心的卸载掉了包括 <em>sublime</em>，<em>vscode</em>，<em>pycharm</em>，<em>webstorm</em>等电脑上的一众 <em>IDE</em>，瞬间感觉神清气爽，四肢通畅（^-^)。</p><p>以下是我的<code>vim</code>配置，基本所有配置项都做了中文注释和相应的分类划分。需要注意的有以下几点：</p><ol><li>字体设置，也就是<code>set guifont</code>这一配置项在 <em>win &amp; mac</em> 上直接空格分割字体，字号就行，但在 <em>linux</em>上，需要使用<code>\</code> 对空格进行转义。</li><li><em>YouCompleteMe</em> 补全插件需要自行编译，编译的步骤百度或<em>google</em>即可。对于各种语言的补全，此插件有相应的方案和配置，在需要时可以搜索相关教程进行修改和拓展。此插件属于<code>vim</code>的灵魂插件之一。</li><li><code>ALE</code>语法检查插件类似于早先的<em>synatic</em>，但比其在性能上更有优势且使用较为简单。需要安装语法检查相应的组件环境，例如检查<code>js</code>需要安装<code>eslint</code>，检查<code>python</code>需要安装<code>flake8</code>，这个插件是<code>vim</code>以不变应万变的依靠之一。</li></ol><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">"</span> Vim插件管理工具Bundle的管理和设置</span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">set nocompatible                "</span> be iMproved</span><br><span class="line">filetype off                    <span class="string">" required!</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/vundle/</span></span><br><span class="line"><span class="string">call vundle#rc()</span></span><br><span class="line"><span class="string">"</span> ----------------------------------------------------------------------------</span><br><span class="line"><span class="string">" 安装的通用插件</span></span><br><span class="line"><span class="string">"</span> <span class="string">" 有官方仓库</span></span><br><span class="line"><span class="string">"</span> ----------------------------------------------------------------------------</span><br><span class="line">Bundle <span class="comment">'gmarik/vundle'</span></span><br><span class="line"> </span><br><span class="line">Bundle <span class="comment">'scrooloose/nerdtree'</span></span><br><span class="line">Bundle <span class="comment">'vim-scripts/taglist.vim'</span></span><br><span class="line">Bundle <span class="comment">'pangloss/vim-javascript'</span></span><br><span class="line">Bundle <span class="comment">'mattn/emmet-vim'</span></span><br><span class="line">Bundle <span class="comment">'Valloric/YouCompleteMe'</span></span><br><span class="line">Bundle <span class="comment">'marijnh/tern_for_vim'</span></span><br><span class="line">Bundle <span class="comment">'ctrlpvim/ctrlp.vim'</span></span><br><span class="line">Bundle <span class="comment">'w0rp/ale'</span></span><br><span class="line">Bundle <span class="comment">'kien/rainbow_parentheses.vim'</span></span><br><span class="line">Bundle <span class="string">"Lokaltog/vim-powerline"</span></span><br><span class="line">Bundle <span class="comment">'scrooloose/nerdcommenter'</span></span><br><span class="line">Bundle <span class="comment">'terryma/vim-smooth-scroll'</span></span><br><span class="line">Bundle <span class="comment">'tpope/vim-surround'</span></span><br><span class="line">Bundle <span class="comment">'tpope/vim-repeat'</span></span><br><span class="line">Bundle <span class="comment">'leafgarland/typescript-vim'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 安装的自定义插件</span><br><span class="line"><span class="string">" "</span> 无官方仓库</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> Bundle <span class="comment">'git://git.wincent.com/command-t.git'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 通用项设置</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">"软件设置"</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">set nocompatible            "</span> 去除与vi的一致性设置</span><br><span class="line"><span class="keyword">set</span> guioptions-=T           <span class="string">" 隐藏工具栏</span></span><br><span class="line"><span class="string">set guioptions-=m           "</span> 隐藏菜单栏</span><br><span class="line"><span class="keyword">set</span> guioptions-=l           <span class="string">" 禁止显示滚动条</span></span><br><span class="line"><span class="string">set guioptions-=L           "</span> 禁止显示滚动条</span><br><span class="line"><span class="keyword">set</span> guioptions-=r           <span class="string">" 禁止显示滚动条</span></span><br><span class="line"><span class="string">set guioptions-=R           "</span> 禁止显示滚动条</span><br><span class="line"><span class="keyword">set</span> guifont=Nimbus\ Mono\ L\ <span class="number">14</span> <span class="string">" 字體顏色</span></span><br><span class="line"><span class="string">colorscheme molokai         "</span> 颜色主题</span><br><span class="line"><span class="keyword">set</span> showmatch               <span class="string">" 显示匹配括号</span></span><br><span class="line"><span class="string">syntax on                   "</span> 开启语法高亮功能 允许用指定语法高亮配色方案替换默认方案</span><br><span class="line">filetype plugin indent <span class="keyword">on</span>   <span class="string">" 打开文件类型检测功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set autochdir               "</span> 自动切换当前目录为当前文件所在的目录  </span><br><span class="line"><span class="keyword">set</span> autowrite               <span class="string">" 自动保存</span></span><br><span class="line"><span class="string">set confirm                 "</span> 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line"><span class="keyword">set</span> autoread                <span class="string">" 设置当文件被改动时自动载入</span></span><br><span class="line"><span class="string">set nobackup                "</span> 从不备份  </span><br><span class="line"><span class="keyword">set</span> noswapfile              <span class="string">" 禁止生成临时文件</span></span><br><span class="line"><span class="string">set history=1000            "</span> 历史记录数</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> shortmess=atI           <span class="string">" 不显示进入提示 </span></span><br><span class="line"><span class="string">set helplang=CN             "</span> 中文帮助语言</span><br><span class="line"><span class="keyword">set</span> encoding=utf<span class="number">-8</span>          <span class="string">" 文件编码</span></span><br><span class="line"><span class="string">set noerrorbells            "</span> 无警告音</span><br><span class="line"><span class="keyword">set</span> novisualbell            <span class="string">" 无选中提示音</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set t_vb=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>行<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">set nu                      "</span> 显示行号</span><br><span class="line"><span class="keyword">set</span> nowrap                  <span class="string">" 不折行</span></span><br><span class="line"><span class="string">set cursorline              "</span> 高亮当前行</span><br><span class="line"><span class="string">" 选中行的表现</span></span><br><span class="line"><span class="string">hi Visual term=reverse ctermbg=gray guibg=#403D3D</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set showcmd                 "</span> 输入的命令显示出来，看的清楚些  </span><br><span class="line"><span class="keyword">set</span> cmdheight=<span class="number">1</span>             <span class="string">" 命令行（在状态行下）的高度，设置为1  </span></span><br><span class="line"><span class="string">set scrolloff=3             "</span> 光标移动到buffer的顶部和底部时保持<span class="number">3</span>行距离  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"搜索"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"><span class="keyword">set</span> wrapscan                <span class="string">" 搜索到文件两端时不重新搜索  </span></span><br><span class="line"><span class="string">set ignorecase              "</span> 搜索忽略大小写</span><br><span class="line"><span class="keyword">set</span> hlsearch                <span class="string">" 搜索逐字符高亮</span></span><br><span class="line"><span class="string">set incsearch               "</span> 搜索逐字符高亮</span><br><span class="line"><span class="keyword">set</span> iskeyword+=_,$,@,%,#,-  <span class="string">" 带有如下符号的单词不要被换行分割</span></span><br><span class="line"><span class="string">set matchtime=1             "</span> 光标高亮时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"空格缩进及折叠"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"><span class="keyword">set</span> foldenable              <span class="string">" 允许折叠  </span></span><br><span class="line"><span class="string">set foldmethod=manual       "</span> 手动折叠 </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> expandtab               <span class="string">" 空格代替tab</span></span><br><span class="line"><span class="string">set softtabstop=4           "</span> 设定tab长度为<span class="number">4</span>  </span><br><span class="line"><span class="keyword">set</span> shiftwidth=<span class="number">4</span>            <span class="string">" 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4  </span></span><br><span class="line"><span class="string">set smarttab                "</span> 在行和段开始处使用制表符</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> smartindent             <span class="string">" 智能对齐</span></span><br><span class="line"><span class="string">set autoindent              "</span> 自动对齐</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> backspace=indent,eol,start  <span class="string">" 删除按钮的正常表现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>鼠标和光标<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">set mouse=a                 "</span> 鼠标可定位</span><br><span class="line"><span class="keyword">set</span> selection=exclusive</span><br><span class="line"><span class="keyword">set</span> selectmode=mouse,key</span><br><span class="line"><span class="keyword">set</span> gcr=a:block-blinkon0    <span class="string">" 禁止光标闪烁</span></span><br><span class="line">"//光标的样式变换</span><br><span class="line"><span class="keyword">set</span> guicursor=n-v-c:block-Cursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"窗口"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"><span class="string">"//窗口切换</span></span><br><span class="line"><span class="string">nnoremap &lt;c-h&gt; &lt;c-w&gt;h  </span></span><br><span class="line"><span class="string">nnoremap &lt;c-l&gt; &lt;c-w&gt;l  </span></span><br><span class="line"><span class="string">nnoremap &lt;c-j&gt; &lt;c-w&gt;j  </span></span><br><span class="line"><span class="string">nnoremap &lt;c-k&gt; &lt;c-w&gt;k </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>leader键和系统剪切板的复制粘贴<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">let mapleader = "</span>;<span class="string">"</span></span><br><span class="line"><span class="string">nnoremap &lt;Leader&gt;w :w&lt;CR&gt;</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;q :q&lt;CR&gt;</span></span><br><span class="line"><span class="string">vmap &lt;Leader&gt;y "</span>+y</span><br><span class="line">vmap &lt;Leader&gt;d <span class="string">"+d</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;p "</span>+p</span><br><span class="line">nmap &lt;Leader&gt;P <span class="string">"+P</span></span><br><span class="line"><span class="string">vmap &lt;Leader&gt;p "</span>+p</span><br><span class="line">vmap &lt;Leader&gt;P <span class="string">"+P</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>括号的自动补全和跳出<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">inoremap ' ''&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">inoremap "</span> <span class="string">""</span>&lt;ESC&gt;i</span><br><span class="line">inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">inoremap [ []&lt;ESC&gt;i</span><br><span class="line">inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class="line"></span><br><span class="line">func SkipPair()</span><br><span class="line">    <span class="keyword">if</span> getline(<span class="comment">'.')[col('.') - 1] == ')' || getline('.')[col('.') - 1] == ']' || getline('.')[col('.') - 1] == '"' || getline('.')[col('.') - 1] == "'" || getline('.')[col('.') - 1] == '&#125;'</span></span><br><span class="line">        return <span class="string">"\&lt;ESC&gt;la"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        return <span class="string">"\t"</span></span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="string">"// 将tab键绑定为跳出括号</span></span><br><span class="line"><span class="string">inoremap &lt;TAB&gt; &lt;c-r&gt;=SkipPair()&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>快速运行<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">map &lt;F4&gt; :call CompileRunGcc()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! CompileRunGcc()</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    if &amp;filetype == 'c'</span></span><br><span class="line"><span class="string">        exec "</span>!g++ % -o %&lt;<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>!<span class="built_in">time</span> ./%&lt;<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'sh'</span></span><br><span class="line"><span class="string">        :!time bash %</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'python'</span></span><br><span class="line"><span class="string">        exec "</span>!<span class="built_in">time</span> python2<span class="number">.7</span> %<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'php'</span></span><br><span class="line"><span class="string">        exec "</span>!php %<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'html'</span></span><br><span class="line"><span class="string">        exec "</span>!firefox % &amp;<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'mkd'</span></span><br><span class="line"><span class="string">        exec "</span>!~/.vim/markdown.pl % &gt; %.html &amp;<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>!firefox %.html &amp;<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 插件设置</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"></span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 目录树插件 NerdTree 设置</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">autocmd StdinReadPre * let s:std_in=1</span></span><br><span class="line"><span class="string">autocmd VimEnter * if argc() == 0 &amp;&amp; !exists("</span>s:std_in<span class="string">") | NERDTree | endif</span></span><br><span class="line"><span class="string">autocmd bufenter * if (winnr("</span>$<span class="string">") == 1 &amp;&amp; exists("</span>b:NERDTree<span class="string">") &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""</span><span class="string">""</span><span class="string">"目录树文件颜色区分"</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)</span></span><br><span class="line"><span class="string"> exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg</span></span><br><span class="line"><span class="string"> exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('py', 'green', 'none', 'green', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('style', 'cyan', 'none', 'cyan', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('ts', 'Red', 'none', 'red', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')</span></span><br><span class="line"><span class="string">call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="string">" 标签插件TagList 配置</span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line">map &lt;silent&gt; &lt;F3&gt; :TlistToggle&lt;cr&gt;</span><br><span class="line"><span class="keyword">let</span> Tlist_Show_One_File = <span class="number">1</span>            <span class="string">"不同时显示多个文件的tag，只显示当前文件的</span></span><br><span class="line"><span class="string">let Tlist_Exit_OnlyWindow = 1          "</span>如果taglist窗口是最后一个窗口，则退出vim</span><br><span class="line"><span class="keyword">let</span> Tlist_Use_Right_Window = <span class="number">1</span>         <span class="string">"在右侧窗口中显示taglist窗口</span></span><br><span class="line"><span class="string">let g:javascript_plugin_jsdoc = 1</span></span><br><span class="line"><span class="string">let g:cssColorVimDoNotMessMyUpdatetime = 1</span></span><br><span class="line"><span class="string">let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="string">" 自动补全插件YCM 配置</span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="keyword">set</span> completeopt=longest,menu      <span class="string">" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)</span></span><br><span class="line"><span class="string">let g:ycm_confirm_extra_conf=0        "</span> 关闭加载.ycm_extra_conf.py提示</span><br><span class="line"><span class="string">" 回车即选中当前项</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? "</span>\&lt;C-y&gt;<span class="string">" : "</span>\&lt;CR&gt;<span class="string">"</span></span><br><span class="line"><span class="string">"</span>上下左右键的行为 会显示其他信息</span><br><span class="line">inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? <span class="string">"\&lt;C-n&gt;"</span> : <span class="string">"\&lt;Down&gt;"</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? <span class="string">"\&lt;C-p&gt;"</span> : <span class="string">"\&lt;Up&gt;"</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? <span class="string">"\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span> : <span class="string">"\&lt;PageDown&gt;"</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? <span class="string">"\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span> : <span class="string">"\&lt;PageUp&gt;"</span></span><br><span class="line">autocmd InsertLeave * <span class="keyword">if</span> pumvisible() == <span class="number">0</span>|pclose|endif <span class="string">" 离开插入模式后自动关闭预览窗口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>youcompleteme  默认tab  s-tab 和自动补全冲突</span><br><span class="line"><span class="keyword">let</span> g:ycm_key_list_select_completion=[<span class="comment">'&lt;c-n&gt;']</span></span><br><span class="line"><span class="keyword">let</span> g:ycm_key_list_select_completion = [<span class="comment">'&lt;Down&gt;']</span></span><br><span class="line"><span class="keyword">let</span> g:ycm_key_list_previous_completion=[<span class="comment">'&lt;c-p&gt;']</span></span><br><span class="line"><span class="keyword">let</span> g:ycm_key_list_previous_completion = [<span class="comment">'&lt;Up&gt;']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g:ycm_cache_omnifunc=<span class="number">1</span>                <span class="string">" 禁止缓存匹配项,每次都重新生成匹配项</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_strings = 1               "</span> 在字符串输入中也能补全</span><br><span class="line"><span class="keyword">let</span> g:ycm_complete_in_comments = <span class="number">1</span>              <span class="string">" 在注释输入中也能补全</span></span><br><span class="line"><span class="string">let g:ycm_seed_identifiers_with_syntax=1"</span> 语法关键字补全</span><br><span class="line"><span class="keyword">let</span> g:ycm_min_num_of_chars_for_completion=<span class="number">2</span><span class="string">" 从第2个键入字符就开始罗列匹配项</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_tags_files=0"</span> 开启 YCM 基于标签引擎</span><br><span class="line"><span class="keyword">let</span> g:ycm_collect_identifiers_from_comments_and_strings = <span class="number">0</span> <span class="string">"注释和字符串中的文字也会被收入补全</span></span><br><span class="line"><span class="string">let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></span><br><span class="line"><span class="string">"</span> force recomile <span class="keyword">with</span> syntastic</span><br><span class="line">nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">"</span> javascript 自动补全插件 tern_vim 配置</span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">let tern_show_signature_in_pum = 1</span></span><br><span class="line"><span class="string">let tern_show_argument_hints = 'on_hold'</span></span><br><span class="line"><span class="string">autocmd FileType javascript nnoremap &lt;leader&gt;d :TernDef&lt;CR&gt;</span></span><br><span class="line"><span class="string">autocmd FileType javascript setlocal omnifunc=tern#Complete</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> ----------------------------------------------------------------------------</span><br><span class="line"><span class="string">" Zen-coding 插件emmet 配置</span></span><br><span class="line"><span class="string">"</span> ----------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">let</span> g:user_emmet_mode=<span class="comment">'iv'             " 在i 和 v 模式下启用</span></span><br><span class="line"><span class="keyword">let</span> g:user_emmet_leader_key=<span class="comment">'&lt;TAB&gt;'    " 设置快捷键为 tab,</span></span><br><span class="line"><span class="keyword">let</span> g:user_emmet_install_global = <span class="number">0</span></span><br><span class="line">autocmd FileType html,css EmmetInstall</span><br><span class="line"></span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">"</span> 文件查找插件CtrlP 配置</span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">let g:ctrlp_working_path_mode = 'ra'</span></span><br><span class="line"><span class="string">let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'</span></span><br><span class="line"><span class="string">set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*     "</span> MacOSX/Linux</span><br><span class="line"></span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">"</span> 语法检查插件Ale 配置</span><br><span class="line"><span class="string">" ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">let g:ale_set_highlights = 0</span></span><br><span class="line"><span class="string">let g:ale_lint_on_enter = 0         "</span> 进入时检查</span><br><span class="line"><span class="keyword">let</span> g:ale_sign_column_always = <span class="number">1</span>    <span class="string">" 始终开启标志列</span></span><br><span class="line"><span class="string">let g:ale_completion_enabled = 1</span></span><br><span class="line"><span class="string">let g:ale_lint_on_text_changed = 'never'</span></span><br><span class="line"><span class="string">let g:ale_pattern_options = &#123;'\.min\.js$': &#123;'ale_linters': [], 'ale_fixers': []&#125;,'\.min\.css$': &#123;'ale_linters': [], 'ale_fixers': []&#125;,&#125;</span></span><br><span class="line"><span class="string">let g:ale_linters = &#123;'javascript': ['eslint'],&#125;</span></span><br><span class="line"><span class="string">let g:ale_linters = &#123;'typescript': 'tslint',&#125;</span></span><br><span class="line"><span class="string">let g:ale_linters = &#123;'python': ['flake8'],&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let g:ale_sign_error = '✗'          "</span> 自定义<span class="keyword">error</span>图标</span><br><span class="line"><span class="keyword">let</span> g:ale_sign_warning = <span class="comment">'❗'    " 自定义warning图标</span></span><br><span class="line"><span class="keyword">let</span> g:ale_statusline_format = [<span class="comment">'✘ %d', '❗ %d', '✔ ok']</span></span><br><span class="line"><span class="string">"显示Linter名称,出错或警告等相关信息</span></span><br><span class="line"><span class="string">let g:ale_echo_msg_error_str = '✷ Error'</span></span><br><span class="line"><span class="string">let g:ale_echo_msg_warning_str = '⚠ Warning'</span></span><br><span class="line"><span class="string">let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>普通模式下，zp前往上一个错误或警告，zn前往下一个错误或警告</span><br><span class="line">nmap zp &lt;Plug&gt;(ale_previous_wrap)</span><br><span class="line">nmap zn &lt;Plug&gt;(ale_next_wrap)</span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;Leader&gt;w触发/关闭语法检查</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;lw :ALEToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span>&lt;Leader&gt;d查看错误或警告的详细信息</span><br><span class="line">nmap &lt;Leader&gt;ld :ALEDetail&lt;CR&gt;</span><br><span class="line"><span class="string">"&lt;leader&gt;j跳转到定义</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;lj :ALEGoToDefinition&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="string">" 彩虹括号插件设置</span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="keyword">let</span> g:rbpt_colorpairs = [</span><br><span class="line">    \ [<span class="comment">'brown',       'RoyalBlue3'],</span></span><br><span class="line">    \ [<span class="comment">'Darkblue',    'SeaGreen3'],</span></span><br><span class="line">    \ [<span class="comment">'darkgray',    'DarkOrchid3'],</span></span><br><span class="line">    \ [<span class="comment">'darkgreen',   'firebrick3'],</span></span><br><span class="line">    \ [<span class="comment">'darkcyan',    'RoyalBlue3'],</span></span><br><span class="line">    \ [<span class="comment">'darkred',     'SeaGreen3'],</span></span><br><span class="line">    \ [<span class="comment">'darkmagenta', 'DarkOrchid3'],</span></span><br><span class="line">    \ [<span class="comment">'brown',       'firebrick3'],</span></span><br><span class="line">    \ [<span class="comment">'gray',        'RoyalBlue3'],</span></span><br><span class="line">    \ [<span class="comment">'darkmagenta', 'DarkOrchid3'],</span></span><br><span class="line">    \ [<span class="comment">'Darkblue',    'firebrick3'],</span></span><br><span class="line">    \ [<span class="comment">'darkgreen',   'RoyalBlue3'],</span></span><br><span class="line">    \ [<span class="comment">'darkcyan',    'SeaGreen3'],</span></span><br><span class="line">    \ [<span class="comment">'darkred',     'DarkOrchid3'],</span></span><br><span class="line">    \ [<span class="comment">'red',         'firebrick3'],</span></span><br><span class="line">    \ ]</span><br><span class="line"></span><br><span class="line"><span class="string">" 不加入这行, 防止黑色括号出现, 很难识别</span></span><br><span class="line"><span class="string">"</span> \ [<span class="comment">'black',       'SeaGreen3'],</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g:rbpt_max = <span class="number">16</span></span><br><span class="line"><span class="keyword">let</span> g:rbpt_loadcmd_toggle = <span class="number">0</span></span><br><span class="line">au VimEnter * RainbowParenthesesToggle</span><br><span class="line">au Syntax * RainbowParenthesesLoadRound</span><br><span class="line">au Syntax * RainbowParenthesesLoadSquare</span><br><span class="line">au Syntax * RainbowParenthesesLoadBraces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 酷炫状态栏插件 powerline配置</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string">let g:Powerline_symbols='unicode'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="string">" 注释插件NerdSpace 设置</span></span><br><span class="line"><span class="string">"</span>..................................</span><br><span class="line"><span class="keyword">let</span> g:NERDSpaceDelims=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">"</span> 平滑滚动插件 smooth_scroll 配置</span><br><span class="line"><span class="string">"..................................</span></span><br><span class="line"><span class="string">noremap &lt;silent&gt; &lt;c-u&gt; :call smooth_scroll#up(&amp;scroll, 0, 2)&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap &lt;silent&gt; &lt;c-d&gt; :call smooth_scroll#down(&amp;scroll, 0, 2)&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap &lt;silent&gt; &lt;c-b&gt; :call smooth_scroll#up(&amp;scroll*2, 0, 4)&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap &lt;silent&gt; &lt;c-f&gt; :call smooth_scroll#down(&amp;scroll*2, 0, 4)&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SCSS学习笔记</title>
      <link href="/2018/02/14/SCSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/02/14/SCSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h3><h4 id="SCSS-与-Sass-的关系"><a href="#SCSS-与-Sass-的关系" class="headerlink" title="SCSS 与 Sass 的关系"></a>SCSS 与 Sass 的关系</h4><p>SCSS 完全兼容 CSS3 ，是 Sass 3 引入的新语法。</p><p>即 Sass 有两种语法。</p><blockquote><p>一种是 SCSS，支持 CSS3。</p></blockquote><blockquote><p>另一种是 缩排语法，也称作 Sass。这种语法不使用花括号，通过缩排来表达层级，通过换行符来分隔属性。</p></blockquote><p><strong>下文提到的 Sass 均指使用 Scss 语法书写的，后缀名为 scss 的 Sass 文件</strong></p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>sass 的导入使用 <code>@import “css_file_name&quot;；</code>。</p><blockquote><p>导入 sass 文件会在编译时将导入的 sass 文件和被导入的 sass 文件合并为一个文件。</p><p>这种导入还可以省略后缀名 <code>.scss</code> ,且可以省略文件前的 下划线 <code>_</code></p></blockquote><blockquote><p>导入 CSS 文件编译后依然是以 <code>@import</code> 形式存在，不会被合并为一个文件</p></blockquote><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>标准注释 <code>/* */</code> ，在编译后的 CSS 文件中仍然存在</p><p>单行注释 <code>//</code> ，在编译后 不会被编译进 CSS 文件</p><h3 id="SCSS变量"><a href="#SCSS变量" class="headerlink" title="SCSS变量"></a>SCSS变量</h3><h4 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h4><p>sass 变量必须以 <code>$</code> 开头,后面紧跟变量名。</p><p>变量名和变量值之间使用冒号<code>:</code>分隔，类似 CSS 属性设置。</p><p>变量值后面加上 <code>!default</code> 表示默认值。可以在默认变量之前为其重新赋值从而覆盖默认值，在组件开发时会很有用。</p>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSize</span>: <span class="number">14px</span>;      <span class="comment">//定义之后可以在全局使用</span></span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">2</span>;   <span class="comment">//覆盖默认值</span></span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span>!default;  <span class="comment">//默认值</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="variable">$fontSize</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="variable">$baseLineHeight</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><p>如果变量不是作为属性值使用 而是 <strong>作为属性名</strong> 使用，或某些特殊情况下的变量，需要以 <code>#{$variables}</code> 形式使用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$borderDirection</span> : top!default</span><br><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">12px</span> !default</span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span>!default</span><br><span class="line">     </span><br><span class="line">.border-#&#123;<span class="variable">$borderDirection</span>&#125;&#123;   //变量应用于类 </span><br><span class="line">    border-#&#123;<span class="variable">$borderDirection</span>&#125;: <span class="number">1px</span> solid <span class="number">#ccc</span>;  <span class="comment">//应用于属性名</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font</span>:#&#123;<span class="variable">$baseFontSize</span>&#125;/#&#123;<span class="variable">$baseLineHeight</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多值变量"><a href="#多值变量" class="headerlink" title="多值变量"></a>多值变量</h4><p>分为 <code>list</code> 类型(类似数组) 和 <code>map</code>类型(类似变量)。</p><h5 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h5>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colorArr</span>: <span class="number">#ccc</span> <span class="number">#fff</span> <span class="number">#ddd</span>; <span class="comment">//可使用空格，小括号，逗号三种方式来分隔各项</span></span><br><span class="line"><span class="comment">//使用nth($var,$index)取值</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:nth(<span class="variable">$colorArr</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="map类型"><a href="#map类型" class="headerlink" title="map类型"></a>map类型</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$head</span>:&#123; h1:<span class="number">2em</span>, h2:<span class="number">1.5em</span>, h3:<span class="number">1.2em</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 map-get($map,$key)来取值</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:map-get(<span class="variable">$head</span>,h1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在变量值后加上 <code>！global</code>即声明为全局变量。(目前版本暂不支持)</p><p>目前的变量机制为：<strong>局部变量会覆盖全局变量</strong></p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><h4 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    </span><br><span class="line">    &amp;:hover&#123;     <span class="comment">//可以使用 &amp; 来表示父元素</span></span><br><span class="line">      <span class="attribute">color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @at-root .child&#123;   <span class="comment">//@at-root 可用于跳出父级元素嵌套</span></span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  @at-root&#123;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.grand</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:&#123;</span><br><span class="line">    style:solid;</span><br><span class="line">    <span class="attribute">left</span>:&#123;</span><br><span class="line">      width:<span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">color</span>:$<span class="number">888</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="attribute">right</span>:&#123;</span><br><span class="line">      width:<span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>sass 使用 <code>@mixin</code> 声明混合，可传递参数，参数名以 <code>$</code>符号开始，多个参数以逗号隔开，可以为参数设置默认值。</p><p>声明后的 <code>@mixin</code> 通过 <code>@include</code> 调用</p><h4 id="无参数-mixin"><a href="#无参数-mixin" class="headerlink" title="无参数 mixin"></a>无参数 mixin</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*无参数 @mixin */</span></span><br><span class="line">@<span class="keyword">mixin</span> center-block&#123;  <span class="comment">// @mixin 的声明</span></span><br><span class="line">  <span class="attribute">margin-left</span>:auto;</span><br><span class="line">  <span class="attribute">margin-right</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> center-block; <span class="comment">//@mixin 的调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参数-mixin"><a href="#有参数-mixin" class="headerlink" title="有参数 mixin"></a>有参数 mixin</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*有参数 @mixin */</span></span><br><span class="line">@<span class="keyword">mixin</span> opacity(<span class="variable">$opt</span>:<span class="number">100</span>)&#123;</span><br><span class="line">  opcaity:<span class="variable">$opt</span>/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> opacity;   <span class="comment">//使用默认值调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> opacity(<span class="number">40</span>);  <span class="comment">//传递参数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若 @mixin 定义了多个参数，当传入参数小于定义的参数个数时，后面未获得传入的参数使用默认值，无默认值时则报错。</span></span><br><span class="line"><span class="comment">//也可以通过 参数名和值 同时传入 来选择性的传入参数</span></span><br><span class="line">@<span class="keyword">include</span> hmixin(<span class="variable">$font-size</span>:<span class="number">20px</span>)</span><br></pre></td></tr></table></figure><h4 id="多组值参数-mixin"><a href="#多组值参数-mixin" class="headerlink" title="多组值参数 mixin"></a>多组值参数 mixin</h4><p>类似于 <code>box-shadow</code>,<code>transition</code>等多组值的参数类型，需要在定义 mixin 时 在变量后加 三个点 表示，形如 <code>$var...</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadow</span>...)&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="variable">$shadow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> box-shadow(<span class="number">0</span> 2px 2px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),<span class="number">0</span> 3px 3px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="content"><a href="#content" class="headerlink" title="@content"></a>@content</h4><p><code>@content</code> 可以使 @mixin 接受一整块样式，接受的样式 从 <code>@content</code> 开始。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> max-screen(<span class="variable">$res</span>)&#123;</span><br><span class="line">  @<span class="keyword">media</span> only screen and (max-width:<span class="variable">$res</span>)&#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> max-screen(<span class="number">480px</span>)&#123;      <span class="comment">//接收一整块样式</span></span><br><span class="line">  <span class="selector-tag">body</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h4><p>继承使用关键词 <code>@extend</code>, 后面需要紧跟需要继承的选择器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#c40000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.speaker</span>&#123;        <span class="comment">//继承即相当于联合声明，即成为 h1, .speaker&#123;...&#125;</span></span><br><span class="line">  @<span class="keyword">extend</span> h1;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="占位选择器"><a href="#占位选择器" class="headerlink" title="占位选择器 %"></a>占位选择器 %</h4><p>占位选择器，如果不调用的话不会有任何的多余 css。避免了在基础样式较多时继承很多无用 css。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%lr&#123;</span><br><span class="line">  <span class="attribute">color</span>:transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>:none;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  @<span class="keyword">extend</span> %lr;      <span class="comment">//只用在被调用时才会解析</span></span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ps: 在 @media 中展示不能继承 外部的 代码片段。</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数与 @mixin 不同之处 在于函数返回的是值，不能直接使用，必须配合样式。</p><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>:<span class="number">10px</span> !default;</span><br><span class="line"></span><br><span class="line">@function pxToRem(<span class="variable">$px</span>)&#123;</span><br><span class="line">  @return <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * 1rem;  <span class="comment">//返回的是值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:pxToRem(<span class="number">16px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ragb(blue,0.2) =&gt; rgba(0,0,255,0.2);</span><br><span class="line">darken(<span class="variable">$color</span>,<span class="variable">$amount</span>)  <span class="comment">//将$color 变暗 $amount 个百分比</span></span><br><span class="line">lighten(<span class="variable">$color</span>,<span class="variable">$amount</span>) <span class="comment">//将$color 变亮 $amount 个百分比</span></span><br></pre></td></tr></table></figure><h5 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">percentage(<span class="variable">$value</span>)   <span class="comment">//将一个没有单位的数字转为百分比形式</span></span><br><span class="line">unitless(<span class="variable">$number</span>)  <span class="comment">//返回这个数是否没有单位</span></span><br><span class="line">unit(<span class="variable">$number</span>)  <span class="comment">//得到数的单位</span></span><br></pre></td></tr></table></figure><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nth(<span class="variable">$list</span>,<span class="variable">$n</span>)  <span class="comment">//返回列表里面第 n 个位置的值</span></span><br></pre></td></tr></table></figure><h5 id="三目判断"><a href="#三目判断" class="headerlink" title="三目判断"></a>三目判断</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="variable">$condition</span>,<span class="variable">$if-true</span>,<span class="variable">$if-false</span>)</span><br></pre></td></tr></table></figure><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p><code>SCSS</code>可进行加减乘除运算，运算符前后都需要有空格，否则会报错。</p><h3 id="条件判断及循环"><a href="#条件判断及循环" class="headerlink" title="条件判断及循环"></a>条件判断及循环</h3><h4 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h4><p>可以一个单独使用，也可以和<code>@else</code> 和 <code>@else if</code> 结合 多条件使用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span>:mons;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$type</span> == ocean&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == mons&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == mate&#123;</span><br><span class="line">    <span class="attribute">color</span>:greem;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p><code>for 循环</code>分为两种形式。</p><p><code>@for $var from &lt;strat&gt; through &lt;end&gt;</code>（包含 end 值）</p><p><code>@for $var from &lt;start&gt; to &lt;end&gt;</code>（不包含 end 值）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 4&#123;</span><br><span class="line">  item-#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sass 的 @if 使用 not ，or , and 表示 非，或，与</span></span><br><span class="line"><span class="comment">//使用 == , != 表示 等于 与 不等于</span></span><br></pre></td></tr></table></figure><h4 id="each循环"><a href="#each循环" class="headerlink" title="each循环"></a>each循环</h4><p> 语法为 <code>@each $var in &lt;list or map&gt;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$animal-list</span>:puma,sea-sl,eg,sala;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$ani</span> in <span class="variable">$animal-list</span>&#123;</span><br><span class="line">  .#&#123;<span class="variable">$ani</span>&#125;-<span class="attribute">icon</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:url(<span class="string">'/images/#&#123;$ani&#125;.png'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//支持多字段循环</span><br><span class="line">//支持 map 的 key/value 循环</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby 学习笔记（一）:基本语法</title>
      <link href="/2018/02/14/RUBY%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/02/14/RUBY%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h4 id="启动命令行解释器命令"><a href="#启动命令行解释器命令" class="headerlink" title="启动命令行解释器命令"></a>启动命令行解释器命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irb</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-      //使用中文编码</span></span><br><span class="line">puts  /<span class="regexp">/带回车换行符</span></span><br><span class="line"><span class="regexp">print /</span><span class="regexp">/不带</span></span><br></pre></td></tr></table></figure><h4 id="运行ruby文件"><a href="#运行ruby文件" class="headerlink" title="运行ruby文件"></a>运行ruby文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby hello.rb</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><h4 id="字符串插值："><a href="#字符串插值：" class="headerlink" title="字符串插值："></a>字符串插值：</h4>   <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'this is a <span class="subst">#&#123;car&#125;</span>'</span>     /<span class="regexp">/只能在双引号标记的字符串中使用</span></span><br></pre></td></tr></table></figure><h4 id="格式化字符串："><a href="#格式化字符串：" class="headerlink" title="格式化字符串："></a>格式化字符串：</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'this is a %s'</span> % car </span><br><span class="line"><span class="string">'this is a %s and that is a %s'</span> % [car,pen]</span><br></pre></td></tr></table></figure><h4 id="转义符号："><a href="#转义符号：" class="headerlink" title="转义符号："></a>转义符号：</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\             /<span class="regexp">/单引号字符串只允许使用 \\ 和 \'</span></span><br></pre></td></tr></table></figure><h4 id="文件语法"><a href="#文件语法" class="headerlink" title="文件语法"></a>文件语法</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">&lt;&lt;SOMENAME</span></span><br><span class="line"><span class="string">this is a car;</span></span><br><span class="line"><span class="string">this is a pen</span></span><br><span class="line"><span class="string">SOMENAME</span></span><br></pre></td></tr></table></figure><h4 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prints <span class="string">"how old are you?"</span></span><br><span class="line">age = gets.chomp()  /<span class="regexp">/gets为获取输入，chomp()函数用于去掉字符串尾换行符</span></span><br><span class="line"><span class="regexp">puts "so,you're <span class="subst">#&#123;age&#125;</span> old"</span></span><br></pre></td></tr></table></figure><h4 id="BEGIN-和-END-语句"><a href="#BEGIN-和-END-语句" class="headerlink" title="BEGIN 和 END 语句"></a>BEGIN 和 END 语句</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>&#123;code&#125;     /<span class="regexp">/会在程序运行之前被调用</span></span><br><span class="line"><span class="regexp">END&#123;code&#125;/</span><span class="regexp">/会在程序结尾被调用</span></span><br></pre></td></tr></table></figure><h4 id="加载文件"><a href="#加载文件" class="headerlink" title="加载文件"></a>加载文件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> name   /<span class="regexp">/可省略后缀.rb,不会多次加载，用于加载外部库或源文件</span></span><br><span class="line"><span class="regexp">load name。    /</span><span class="regexp">/不可省略后缀，会多次加载，用于加载配置文件</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><strong>数字类型NUMBER</strong></p><ul><li>整型 Integer<ul><li>Fixnum         类 Fixnum 的对象<ul><li>Bignum          类 Bignum 的对象</li></ul></li></ul></li><li>浮点型 Float    类 Float 的 对象</li></ul><blockquote><p>前导符号：0开头为八进制，0x为十六进制，0b二进制</p><p>下划线在数字中被忽略</p><p>加减乘除 + -    * / </p><p>指数 **</p></blockquote><p><strong>字符串类型 String</strong>  ( 类 String 的对象)</p><p><strong>数组类型Array</strong></p><p><strong>哈希类型 Hash</strong></p><p><strong>范围类型 Range</strong></p><p>​</p><p>​</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rails 学习笔记（二）:目录结构</title>
      <link href="/2018/02/14/Rails%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2018/02/14/Rails%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="Rails项目下的文件夹"><a href="#Rails项目下的文件夹" class="headerlink" title="Rails项目下的文件夹"></a>Rails项目下的文件夹</h1><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p>​    <code>app</code>包含应用的控制器，模型，视图等重要部分，是 <code>rails</code>里最重要的组成部分。</p><ul><li><p><code>assets</code>           静态文件目录，主要用来存放<code>js</code>,<code>css</code>,<code>image</code></p></li><li><p><code>controllers</code>  控制器文件,包含控制器的类。所有的类都是继承自 <code>ActionController：:Base</code> 。所有的             这些文件中的每一个应该命名为它们的 <code>Model</code> 名后面加上 <code>_controller.rb</code> , 目的是 URL 能够自动匹配到它们。</p></li><li><p><code>models</code>          用来存放 model 层，数据库表结构。大多数 <code>Model</code> 类 继承自 <code>ActiveRecord::Base</code> 。</p></li><li><p><code>helpers</code>          一个<code>controllers</code> 对应一个 <code>helper</code> 文件，公共的可以放到 <code>application_helper.rb</code>。</p><p>文件中主要是一些可以使用的一些方法，主要是用来解决一些比较复杂的模板显示，不应该存        </p><p>放业务代码。</p></li><li><p><code>views</code>            视图层</p></li><li><p><code>jobs</code>              用来存放任务文件</p><blockquote><p>Active Job 是用来声明任务，并把任务放到多种多样的队列后台中执行的框架。从定期地安排清理，费用账单到发送邮件，任何事情都可以是任务。任何可以切分为小的单元和并行执行的任务都可以用 Active Job 来执行。</p><p>主要是确保所有的 Rails 程序有一致任务框架，即便是以 “立即执行”的形式存在。</p></blockquote></li><li><p><code>mailers</code>         用来存放发送邮件功能的文件</p></li><li><p><code>chaannerls</code>    结合 <code>websocket</code> 来实现浏览器端实时的消息通知。</p></li></ul><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>​    一些脚本文件，<code>bundle</code>,  <code>rails</code>, <code>rake</code>, <code>setup</code>(用于初始化并启动服务), <code>spring</code>(<code>rails</code> 的预加载器，可提高启动速度) , <code>update</code>(更新数据库)</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>​    配置应用的<strong>路由</strong>，<strong>数据库</strong>，<strong>环境变量</strong>，<strong>启动文件</strong>等一些配置文件</p><ul><li><code>environments/</code><ul><li><code>development.rb</code> 开发环境配置文件</li><li><code>production.rb</code> 生产环境配置文件</li><li><code>test.rb</code> 测试环境配置文件</li></ul></li><li><code>initializers/</code>     加载完框架及程序中使用的 gem 后，<code>rails</code> 会加载初始化脚本。初始化脚本是个 RUBY 文件，存储在此文件夹。初始化脚本可在框架和<code>gem</code> 加载完成后做设置。</li><li><code>application.rb</code>   根据不同的启动环境加载不同的 <code>rails gems</code>，配置应用程序。</li><li><code>routes.rb</code>   <code>rails</code> 程序的路由文件，添加路由时需要在此文件中添加。</li><li><code>database.yml</code>  用于配置 <code>rails</code> 程序连接数据库的文件，包括连接的数据库类型，数据库连接池限制数量等。</li></ul><h2 id="db"><a href="#db" class="headerlink" title="db"></a>db</h2><p>​    数据库迁移文件，及种子文件</p><ul><li><code>migrate／</code>    存放数据库的迁移文件，</li><li><code>schema.rb</code> 记录当前迁移的版本编号，同时匹配最新的数据库结构。</li><li><code>seeds.rb</code>   通过此文件可直接将初始化数据存入数据库。</li></ul><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>​    扩展模块</p><ul><li><code>assets/</code> 放置我们使用的插件中用到的 <code>assets</code></li><li><code>tasks</code>     Rake 的任务一般存放在此处。</li></ul><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>​    日志目录</p><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>​    可以从外部直接访问的文件夹</p><h2 id="spec"><a href="#spec" class="headerlink" title="spec"></a>spec</h2><pre><code>spec 测试文件目录</code></pre><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>​    test 文件测试文件目录</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="tmp"></a>tmp</h2><p>​    临时文件，如<code>server</code> 的 <code>pid</code></p><h2 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h2><pre><code>第三方代码，例如    **插件** 和 `gem`。</code></pre><hr><h1 id="Rails项目下的文件"><a href="#Rails项目下的文件" class="headerlink" title="Rails项目下的文件"></a>Rails项目下的文件</h1><h2 id="config-ru"><a href="#config-ru" class="headerlink" title="config.ru"></a>config.ru</h2><p>​    rack 配置，用于启动应用</p><h2 id="Gemfile"><a href="#Gemfile" class="headerlink" title="Gemfile"></a>Gemfile</h2><p>​    Gem 的列表</p><h2 id="Gemfile-lock"><a href="#Gemfile-lock" class="headerlink" title="Gemfile.lock"></a>Gemfile.lock</h2><p>​        主要是 <code>rails</code>  所依赖的 <code>gem</code> 包，主要是 <code>bundle</code> 命令用到，类似于 package.json 文件。</p><h2 id="Procfile"><a href="#Procfile" class="headerlink" title="Procfile"></a>Procfile</h2><p>​    在部署时，在云服务器上，类似于 heroku , 用来描述自己服务的文件。</p><h2 id="Rakefile"><a href="#Rakefile" class="headerlink" title="Rakefile"></a>Rakefile</h2><p>​    类似于<code>Makefile</code> 文件。</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rails 学习笔记（一）:基本概念</title>
      <link href="/2018/02/12/Rails%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/02/12/Rails%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="MVC-框架简介"><a href="#MVC-框架简介" class="headerlink" title="MVC 框架简介"></a>MVC 框架简介</h1><blockquote><p>MVC 全名 Model View Controller。即模型，视图，控制器。强制的将应用程序的输入，处理和输出分开。</p></blockquote><ul><li><code>Model(模型)</code>  : 处理数据及业务逻辑，通常负责对数据库进行存取操作。</li><li><code>View(视图)</code> ：显示用户界面，处理数据显示，通常依据模型数据来创建。</li><li><code>Controller(控制器)</code> ：处理用户请求及应用逻辑，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。控制器是连接视图和模型的桥梁。</li></ul><h1 id="Rails-中的-MVC-框架"><a href="#Rails-中的-MVC-框架" class="headerlink" title="Rails 中的 MVC 框架"></a>Rails 中的 MVC 框架</h1><blockquote><p>Rails 是一个全栈式的 MVC 框架。</p></blockquote><ul><li><code>ActiveRecord</code>  (Model 层) : 是 <code>Rails</code> 的 <code>ORM</code>组件。负责与数据库沟通，让我们可以用面向对象的语法操作数据库。</li><li><code>ActionView</code> (View 层) ：在 <code>rails</code> 中处理 <code>View</code> 的组件。负责显示用户界面以及 <code>controllers</code> 传来的数据。</li><li><code>ActionController</code> (Controller层) : 主要负责处理 WEB 请求，检索模型数据并按要求将数据传递给视图。</li></ul>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记（五）：列表渲染</title>
      <link href="/2018/02/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
      <url>/2018/02/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</url>
      <content type="html"><![CDATA[<p><code>v-for</code>可以用来迭代渲染数组，对象，整数，字符串。当迭代整数时，会从1开始重复整数次模板。当迭代字符串时，会迭代每个字符。</p><p>类似<code>v-if</code>，<code>v-for</code>也可以使用在<code>&lt;template&gt;</code>上，来达到渲染多个元素的目的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span> = <span class="string">"item in items"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用v-for迭代数组"><a href="#使用v-for迭代数组" class="headerlink" title="使用v-for迭代数组"></a>使用<code>v-for</code>迭代数组</h3><p><code>Vue</code>使用<code>v-for</code>来根据一个数组渲染一个列表。<code>v-for</code>指令需要使用特殊形式的语法<code>item in items</code>或者<code>item of items</code>。其中<code>items</code>是源数据数组，<code>item</code>是所迭代数组元素的别名。</p><p><code>v-for</code>还支持一个可选的第二个参数为当前项的索引。形如<code>v-for=“ (item, index) in items&quot;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'ex1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"cat,index in cats"</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125;-&#123;&#123;cat.color&#125;&#125;-&#123;&#123;cat.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        cats:[</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">color</span>:<span class="string">'red'</span>,<span class="attr">name</span>:<span class="string">'lili'</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">color</span>:<span class="string">'balck'</span>,<span class="attr">name</span>:<span class="string">'sisi'</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">color</span>:<span class="string">'blue'</span>,<span class="attr">name</span>:<span class="string">'daxi'</span>&#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用v-for迭代对象属性"><a href="#使用v-for迭代对象属性" class="headerlink" title="使用v-for迭代对象属性"></a>使用<code>v-for</code>迭代对象属性</h3><p><code>v-for</code>可以用来迭代对象属性,支持第二项键名参数和第三项索引参数(此指令通过<code>Object.keys()</code>遍历，在不同引擎下可能会有不同的表现顺序)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ex2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in sObj"</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ex3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in sObj"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">data:&#123;</span></span><br><span class="line"><span class="undefined">    sObj:&#123;</span></span><br><span class="line"><span class="javascript">        f1:<span class="string">'base'</span>,</span></span><br><span class="line"><span class="javascript">        f2:<span class="string">'socc'</span>,</span></span><br><span class="line"><span class="javascript">        f3:<span class="string">'tenn'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特殊属性key"><a href="#特殊属性key" class="headerlink" title="特殊属性key"></a>特殊属性<code>key</code></h4><p><code>key</code>属性主要用于提高渲染列表时的性能。因为<code>Vue</code>在渲染时会尽量复用相同元素，在不加<code>key</code>时，改变列表顺序时这种复用机制会增加渲染成本（可能因为改变一项的顺序导致所有项都互相复用重新渲染）。</p><p>而在使用<code>key</code>属性时，在列表某个节点改变时，会通过<code>key</code>识别节点，从而高效的更新渲染。</p><p><code>key</code>属性的工作方式类似一个属性，所以要使用<code>v-bind</code>来绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表渲染数组时的变动检测"><a href="#列表渲染数组时的变动检测" class="headerlink" title="列表渲染数组时的变动检测"></a>列表渲染数组时的变动检测</h3><h4 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h4><p>对被渲染数组使用以下方法时，会改变调用方法的原数组，进而触发视图更新，这些方法被称为数组的<strong>变异方法</strong>。</p><ul><li><code>push()</code></li><li><code>unshift</code></li><li><code>shift()</code></li><li><code>pop()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li><li><code>splice()</code></li></ul><h4 id="非变异方法"><a href="#非变异方法" class="headerlink" title="非变异方法"></a>非变异方法</h4><p>非变异方法<strong>不会改变原始数组</strong>，但会返回一个新数组。当使用非变异方法时，可以使用返回值的新数组赋值替换旧数组。</p><ul><li><code>filter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul><h4 id="关于数组变动检测需要注意的地方"><a href="#关于数组变动检测需要注意的地方" class="headerlink" title="关于数组变动检测需要注意的地方"></a>关于数组变动检测需要注意的地方</h4><p><code>vue</code>对于以下方式的变动是无法检测的：</p><ol><li>通过索引直接设置数组项时。形如<code>vm.items[index] = newval</code></li><li>修改数组的长度时，形如 <code>vm.items.length = newlen</code></li></ol><p>对于第一种问题，可以通过以下三种方式实现可以变动检测的目的：</p><ol><li>使用<code>Vue.set()</code>全局方法。形如<code>Vue.set( vm.items, index，newval)</code>。</li><li>使用<code>vm.$set()</code>实例方法，此方法是全局方法 <code>Vue.set()</code>的一个别名。</li><li>使用数组的<code>splice</code>方法。形如 <code>vm.items.splice(index,1,newval)</code>。</li></ol><p>对于第二种问题，也可以使用数组的<code>splice</code>方法，形如<code>vm.items.splice(newlen)</code></p><h4 id="数组的过滤和排序"><a href="#数组的过滤和排序" class="headerlink" title="数组的过滤和排序"></a>数组的过滤和排序</h4><p>在想要显示一个数组的过滤或排序副本，但不实际改变原始数据时，可以创建返回过滤或排序后数组的计算属性。(注意在计算属性中需使用非变异方法)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span> = <span class="string">"n in relist"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        oldlist:[1,2,3,4,5]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed:&#123;</span></span><br><span class="line"><span class="javascript">        relist:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">return</span> <span class="keyword">this</span>.oldlist.filter(<span class="function"><span class="params">x</span> =&gt;</span> x%<span class="number">2</span>==<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当无法使用计算属性时，例如在嵌套的<code>v-for</code>循环中，可以使用<code>method</code>方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span> = <span class="string">"item in oldlist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span> = <span class="string">"n in re(item)"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        oldlist:[1,[2,6,12,31],3,4,5]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    method:    </span></span><br><span class="line"><span class="javascript">        re:<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr)) <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">x</span> =&gt;</span> x%<span class="number">2</span>==<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表渲染对象时的变动检测"><a href="#列表渲染对象时的变动检测" class="headerlink" title="列表渲染对象时的变动检测"></a>列表渲染对象时的变动检测</h3><p>由于<code>JavaScript</code>的机制，<strong>Vue不能检测其对象属性的添加和删除</strong>。也就是说，<code>vue</code>无法动态的添加<strong>根级别</strong>的响应式属性。但可以为嵌套对象添加响应式属性。</p><h4 id="为嵌套对象添加响应式属性"><a href="#为嵌套对象添加响应式属性" class="headerlink" title="为嵌套对象添加响应式属性"></a>为嵌套对象添加响应式属性</h4><p>可以通过<code>Vue.set(object, key, value)</code> 方法向嵌套的对象添加响应式属性。形如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        user:&#123;</span></span><br><span class="line"><span class="javascript">            name:<span class="string">'andi'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过<code>Vue.set(app1.data, &#39;age&#39;, 33)</code>来添加响应属性到嵌套的<code>user</code>对象。</p><p>或者使用此全局方法的别名，即<code>实例方法</code>app1.$set(app1.data, ‘age’, 33)`。</p><p>####为嵌套对象添加多个响应式新属性 </p><p>在需要为已有对象赋予多个新属性时，比如使用<code>Object.assign()</code>或 <code>_.extend()</code>。</p><p>应该用新旧对象的属性创建一个新对象，而不是直接将新对象加入旧对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用此种方式无法添加</span></span><br><span class="line"><span class="built_in">Object</span>.assign(app1.user,&#123;<span class="attr">age</span>:<span class="number">27</span>,<span class="attr">weight</span>:<span class="number">100</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//而应该使用此种方式</span></span><br><span class="line">app1.user = <span class="built_in">Object</span>.assign(&#123;&#125;,app1.user,&#123;<span class="attr">age</span>:<span class="number">27</span>,<span class="attr">weight</span>:<span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for和v-if"><a href="#v-for和v-if" class="headerlink" title="v-for和v-if"></a><code>v-for</code>和<code>v-if</code></h3><p>当<code>v-for</code>和<code>v-if</code>处于同一节点时，<code>v-for</code>的优先级高于<code>v-if</code>。也就是说，<code>v-if</code>会分别重复作用于<code>v-for</code>的<strong>每次循环</strong>中。</p><p>如果想要有条件的跳过循环的执行，可以考虑将<code>v-if</code>置于<code>v-for</code>的外层的元素（或<code>template</code>）上。</p><h3 id="组件的v-for"><a href="#组件的v-for" class="headerlink" title="组件的v-for"></a>组件的<code>v-for</code></h3><p>在组件上使用<code>v-for</code>，需要注意的是，<strong>任何数据都不会自动的传递到组件中</strong>，因为组件有自己独立的作用域。</p><p>如果想将迭代数据传递到组件中，需要将数据绑定到组件的 <code>props</code>属性上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">v-bind:item</span>=<span class="string">"item"</span> <span class="attr">v-bind:index</span> = <span class="string">"index"</span> <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记（四）：条件渲染</title>
      <link href="/2018/02/05/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
      <url>/2018/02/05/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p>条件渲染，指的是根据相应条件来决定是否渲染相关模板。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h3><p>在<code>Vue</code>中，使用 <code>v-if</code>指令来实现条件渲染。形如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"flag == 'ok'"</span>&gt;</span>now ok<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用 v-else-if 添加条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"flag == 'nice'"</span>&gt;</span>now nice<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用 v-else 添加所有条件失败后的渲染模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>now bad<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>v-else</code>和 <code>v-else-if</code> 都必须紧跟在带 <code>v-if</code> 和 <code>v-else-if</code>的元素之后，才能发挥作用。</p><h4 id="lt-template-gt-元素的使用"><a href="#lt-template-gt-元素的使用" class="headerlink" title="&lt;template&gt;元素的使用"></a><code>&lt;template&gt;</code>元素的使用</h4><p>在使用<code>v-if</code>控制一组元素的渲染时，可以使用<code>&lt;template&gt;</code>元素来包裹需要控制渲染的元素，在最终的渲染结果中，<code>&lt;template&gt;</code>元素将不会被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ok title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>bad title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用key管理可复用的元素"><a href="#使用key管理可复用的元素" class="headerlink" title="使用key管理可复用的元素"></a>使用<code>key</code>管理可复用的元素</h4><p><code>vue</code>对于已有元素不会重新进行渲染，而是尽可能的复用。在切换渲染模板时，如果两个模板中有相同元素时，不会被删除重新渲染，而会被继续复用。</p><p>类似如下的两个模板中，在切换渲染的模板时，<code>input</code>元素并不会被重新渲染，只有<code>placeholder属性</code>会被替换掉，也就是说输入框中的文字仍会留存。<code>&lt;h1&gt;</code>元素也会被复用，只是内容被替换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ok title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">palceholder</span>=<span class="string">"ooook"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>bad title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"baaaad"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要使两个模板中元素互相独立，不在切换时进行复用，可以为元素添加一个具有唯一值的<code>key</code>属性来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ok title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">palceholder</span>=<span class="string">"ooook"</span> <span class="attr">key</span>=<span class="string">"ok_input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>bad title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"baaaad"</span> <span class="attr">key</span>=<span class="string">"bad_input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><p><code>v-show</code>指令用于根据条件控制元素的<strong>是否显示</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，使用<code>v-show</code>指令控制的元素始终会被渲染。只是会简单的<strong>通过切换元素的display属性</strong>来进行显示和隐藏。</p><h3 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a><code>v-if</code>和<code>v-show</code>的区别</h3><p><code>v-if</code>指令控制的元素，会根据条件动态的渲染和销毁，包括子组件和事件监听器都会被适当的销毁和重建。若<code>v-if</code>的初始条件为假，它什么也不会做，直到条件切换为真时才会进行渲染，即<code>v-if</code>是<strong>惰性的</strong>。</p><p>而 <code>v-show</code> 指令控制的元素不管初始条件是真或假，都始终会被渲染。</p><p><strong>一般来说，v-if 切换时有更高的渲染开销，而 v-show 在初始化时有更高的渲染开销</strong>。</p><p>因此，频繁切换时使用 <code>v-show</code>  更合适，运行时条件较少改变时使用<code>v-if</code>更合适。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记（三）：Class与Style</title>
      <link href="/2018/02/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
      <url>/2018/02/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
      <content type="html"><![CDATA[<p><code>class</code> 和　<code>style</code>　作为元素的属性，可以通过指令 <code>v-bind</code> 来数据绑定字符串值。但存在字符串拼接比较麻烦且容易出错的问题。因此<code>Vue</code>专门针对<code>class</code>和<code>style</code>做了相应的增强。</p><h3 id="绑定Class"><a href="#绑定Class" class="headerlink" title="绑定Class"></a>绑定<code>Class</code></h3><h4 id="绑定Class的对象语法"><a href="#绑定Class的对象语法" class="headerlink" title="#绑定Class的对象语法"></a>#绑定<code>Class</code>的对象语法</h4><p><code>v-bind:class</code>可以绑定一个类型为对象的值，用于动态的切换 <code>Class</code>。形如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive,'text-dange':hasError&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"computedClassObj"</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive: true,</span><br><span class="line">        hasError: false,</span><br><span class="line">        classObj:&#123;</span><br><span class="line">            active:true,</span><br><span class="line">            'text-danger':false</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        computedClassObj:function()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                active: this.isActive &amp;&amp; !this.hasError,</span><br><span class="line">                'text-danger': this.hasError &amp;&amp; !this.isActive,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定class的数组语法"><a href="#绑定class的数组语法" class="headerlink" title="# 绑定class的数组语法"></a># 绑定<code>class</code>的数组语法</h4><p><code>v-bind:class</code>可以绑定一个类型为数组的值，用于绑定多个 <code>class</code>。形如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[ a, b ]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以使用三元表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[ is?b:c, d]"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也可以使用对象语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[ &#123;active:isActive&#125;, d, c ]"</span></span></span><br></pre></td></tr></table></figure><h4 id="组件的class绑定"><a href="#组件的class绑定" class="headerlink" title="#组件的class绑定"></a>#组件的<code>class</code>绑定</h4><p>组件声明时绑定的<code>class</code>属性和使用时绑定的<code>class</code>属性均会被渲染使用，不会互相覆盖。</p><h3 id="绑定Style"><a href="#绑定Style" class="headerlink" title="绑定Style"></a>绑定<code>Style</code></h3><h4 id="绑定style的对象语法"><a href="#绑定style的对象语法" class="headerlink" title="# 绑定style的对象语法"></a># 绑定<code>style</code>的对象语法</h4><p>可使用 <code>v-bind:style</code>将样式绑定到一个<code>JS</code>对象值，对象的<code>key</code>为<code>css</code>属性名（驼峰形式或单引号包括的单横线形式），<code>value</code>为属性值。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color:activeColor,fontSize:fontSize+'px'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;styleObj&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;styleObj2&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">....</span></span><br><span class="line"><span class="undefined">data:&#123;</span></span><br><span class="line"><span class="javascript">    activeColor:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">    fontSize:20,</span></span><br><span class="line"><span class="undefined">    styleObj:&#123;        </span></span><br><span class="line"><span class="javascript">        color:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">        fontSize:20</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">computed:&#123;</span></span><br><span class="line"><span class="javascript">    styleObj2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            color:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="javascript">            fontSize:<span class="keyword">this</span>.fontSize*<span class="number">2</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">....</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定Style的数组语法"><a href="#绑定Style的数组语法" class="headerlink" title="# 绑定Style的数组语法"></a># 绑定<code>Style</code>的数组语法</h4><p>可将<code>v-bind:style</code>绑定到一个包含多个样式对象的数组值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyle,overStyle]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="style前缀的添加"><a href="#style前缀的添加" class="headerlink" title="#style前缀的添加"></a>#<code>style</code>前缀的添加</h4><p>当<code>v-bind:style</code>使用需要浏览器引擎前缀的<code>css</code>属性时，会自动侦测并添加相应前缀。例如<code>transform</code>属性。</p><p>同时也可以为 <code>style</code>绑定对象中的属性的属性值提供一个数组，用于为属性提供多个带前缀的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;display:&#123;'-webkit-box','ms-flexbox','flex'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器只会渲染数组中最后一个被支持的值。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记（二）：计算属性和侦听器</title>
      <link href="/2018/01/22/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2018/01/22/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p><strong>计算属性用于属性的值依赖于实例的某个或多个状态，需要经过较为复杂的逻辑生成时</strong>。</p><p>计算属性定义在实例的<code>computed</code>属性中，其对应的函数相当于它的　<code>getter</code>　。当计算属性依赖的其他属性发生变化时，计算属性会同样进行更新。</p><p>计算属性的基础例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你购买了 &#123;&#123; good.name &#125;&#125; 共 &#123;&#123; good.count &#125;&#125; 件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>需支付: &#123;&#123; total_money &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        good:&#123;</span></span><br><span class="line"><span class="javascript">            name:<span class="string">'可乐'</span>,</span></span><br><span class="line"><span class="javascript">            price:<span class="number">5</span>,<span class="comment">//价格</span></span></span><br><span class="line"><span class="javascript">    count:<span class="number">4</span>,<span class="comment">//件数</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">        delivery:７, <span class="comment">//配送费</span></span></span><br><span class="line"><span class="javascript">        rebate:<span class="number">0.8</span>, <span class="comment">//折扣</span></span></span><br><span class="line"><span class="javascript">        text: <span class="string">'请付款'</span>　　　　　　　<span class="comment">//提示语</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed:&#123;</span></span><br><span class="line"><span class="javascript">        total: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (<span class="keyword">this</span>.good.price　* <span class="keyword">this</span>.good.count * <span class="keyword">this</span>.rebate) + <span class="keyword">this</span>.delivery</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的<code>setter</code></h4><p>计算属性的值除了定义为一个作用相当于 <code>getter</code>　的函数外，同样可以定义 <code>setter</code>，用于在主动改变计算属性值时进行相应的操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.....</span></span><br><span class="line"><span class="undefined">computed:&#123;</span></span><br><span class="line"><span class="undefined">    total:&#123;</span></span><br><span class="line"><span class="javascript">        get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (<span class="keyword">this</span>.good.price　* <span class="keyword">this</span>.good.count * <span class="keyword">this</span>.rebate) + <span class="keyword">this</span>.delivery;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        set:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = <span class="string">'请不要擅自修改总价！！！'</span>        </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">......</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="计算属性与方法的不同点"><a href="#计算属性与方法的不同点" class="headerlink" title="计算属性与方法的不同点"></a>计算属性与方法的不同点</h4><p>计算属性是<strong>基于它的依赖进行缓存的</strong>。也就是说，当重复使用计算属性时，如果它依赖的那些属性没有变化的话，计算属性的对应函数不会被重复调用，而是直接返回缓存的值。</p><p>而方法在每次调用时，都会执行。</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p><code>Vue</code>通过侦听器来进行数据侦听，响应数据的变化。主要用于在数据变化时<strong>执行一些开销较大或异步的操作</strong>。如数据请求和<code>Ajax</code>请求。</p><p>侦听器主要在实例的<code>watch</code>属性中定义，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"question"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="javascript">        question:<span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        answer:<span class="string">'to be'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    watch:&#123;</span></span><br><span class="line"><span class="javascript">        question:<span class="function"><span class="keyword">function</span>(<span class="params">newvalue,oldvalue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $ajax(<span class="string">'www.baidu.com'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.answer = res)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="计算属性和侦听器的不同"><a href="#计算属性和侦听器的不同" class="headerlink" title="计算属性和侦听器的不同"></a>计算属性和侦听器的不同</h4><p>计算属性相比侦听器，代码更清晰简明。计算属性完全基于其依赖的属性。</p><p>对于一些异步的操作或需要对数据变化更复杂的响应时，计算属性无法实现，只能使用侦听器。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记（一）:基础概念</title>
      <link href="/2018/01/10/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/01/10/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h5><ol><li>使用 <code>new Vue()</code>来生成一个 <code>Vue</code> 实例，其接收一个对象参数。</li><li>对象参数的 <code>el</code>  属性为实例绑定的 <code>DOM</code> 元素</li><li>对象参数的 <code>data</code> 属性为 实例所拥有的 数据 </li><li>对象参数的 <code>methods</code> 为 实例所拥有的 方法</li></ol><h5 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h5><ol><li>使用 双花括号式 的插值表达式 将实例数据绑定到 <code>DOM</code></li><li>使用 <code>v-bind</code> 指令将数据绑定到 <code>DOM</code> 元素特性,形如 <code>v-bind:title = &quot;somedata&quot;</code></li></ol><h5 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h5><p>使用 <code>v-model</code> 指令将 Vue实例数据 与表单进行双向绑定, 形如 <code>v-model = &quot;somedata&quot;</code> </p><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>使用 <code>v-on</code> 指令将 Vue 实例的函数绑定到元素的事件响应,形如 <code>v-on:click = &quot;funcname&quot;</code></p><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><p>使用   <code>v-if</code> 指令来控制条件渲染</p><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>使 用 <code>v-for</code>指令来重复渲染数组内数据,形如 <code>v-for = &quot;item in array&quot;</code></p><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>在<code>Vue</code> 中, 一个组件本质上是一个拥有预定义选项(例如模板选项)的 <code>Vue</code>实例 。<br>使用 <code>Vue.component()</code> 来注册组件,第一个参数为组件名，第二个参数为组件的预定义选项。形如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('a-com',&#123;</span><br><span class="line">    props:['input_data']       //相当于输入属性，使用 v-bind 将数据绑定到此输入属性</span><br><span class="line">    template:'<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;input_data.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>注意事项：</p><pre><code>1. 组件的注册必须在组件要绑定的数据声明前（可能是与 Vue 的生命周期有关）</code></pre><h4 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a><code>Vue</code> 实例</h4><p>通过  <code>Vue</code> 构造函数创建一个  <code>Vue</code> 实例，通常使用变量名<code>vm（ViewModel）</code>来表示<code>Vue</code> 实例。<br>所有的组件都是<code>Vue</code> 实例。一个  <code>Vue</code> 应用是由一个根实例 和多个可选的嵌套的组件树组成。 </p><h5 id="数据属性-data"><a href="#数据属性-data" class="headerlink" title="数据属性  data"></a>数据属性  <code>data</code></h5><p><strong>创建 <code>Vue</code> 实例时</strong>其中的  <code>data</code>  属性对象中的所有属性都会被加入  <code>Vue</code>  的响应式系统中。<br>使用  <code>Object.freeze()</code>  可冻结对象类型的响应属性。</p><h5 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h5><p><code>Vue</code>  实例还暴露了一些 实例属性 和 方法,均以 <code>$</code> 为前缀。</p><p>  <code>$data</code>  ：实例的数据属性对象。</p><p>  <code>$el</code>  ：实例绑定的 <code>DOM</code>  对象。</p><p>  <code>$watch</code> ：实例的一个方法，用于为数据的改变添加回调。</p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>  <code>Vue</code> 的生命周期主要包括 <strong>设置数据监听</strong>，<strong>编译模板</strong>，<strong>将实例挂载到<code>DOM</code></strong>，<strong>更新</strong>，<strong>销毁</strong> 这几个阶段。</p><p>  在生命周期各个阶段会有相应的被称为 <strong>生命周期钩子</strong> 的函数运行。有以下几个函数：</p><ul><li><code>beforeCreate</code><ul><li>在此阶段  <code>Vue</code> 实例开始响应式监听  <code>data</code> 的数据。</li></ul></li><li><code>created</code><ul><li>在此阶段编译 <code>DOM</code> 元素（编译的  <code>DOM</code> 元素为<code>虚拟 DOM</code>，还未将 <code>data</code> 渲染进去。）</li><li>首先判断是否有 <code>$el</code> 属性，若无则停止生命周期，直到使用  <code>vm.$mount(el)</code>绑定 <code>$el</code> 属性</li><li>若存在  <code>template</code>，则使用其编译模板，若不存在则使用  <code>outerHTML</code> 编译模板。</li></ul></li><li><code>beforemount</code><ul><li>在此阶段将 <code>data</code> 数据渲染到上一步编译模板形成的虚拟  <code>DOM</code> 中 形成 <code>Vue</code> 的 <code>$el</code>替换掉<code>虚拟DOM</code></li></ul></li><li><code>mounted</code></li><li><code>beforeUpdate</code><ul><li>在此阶段组件重新渲染</li></ul></li><li><code>updated</code></li><li><code>beforeDestory</code><ul><li>此阶段 移除实例所有的数据和事件绑定，并销毁所有子实例。</li></ul></li><li><code>destoryed</code><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4></li></ul><h5 id="文本"><a href="#文本" class="headerlink" title="#文本"></a>#文本</h5><p>  使用插值表达式（双大括号）进行数据绑定，形如     <code>&lt;span&gt;&lt;/span&gt;</code></p><p>  使用    <code>v-once</code> 指令来执行一次性的插值。(当数据改变时，插值内容不会更新)，形如  <code>&lt;span v-once&gt; &lt;/span&gt;</code></p><p>  插值表达式会将数据解释为普通文本，若需要插入      <code>HTML</code>内容(插入内容中的数据绑定会被忽略)，可使用  <code>v-html</code>  指令。形如</p><p><code>&lt;span v-html=&#39;htmltext&#39;&gt;&lt;/span&gt;</code> </p><h5 id="元素特性"><a href="#元素特性" class="headerlink" title="#元素特性"></a>#元素特性</h5><p>  使用  <code>v-bind</code> 指令将数据绑定到元素特性。</p><h5 id="模板表达式"><a href="#模板表达式" class="headerlink" title="#模板表达式"></a>#模板表达式</h5><p>  在所有数据绑定中都可以使用   <code>js</code> 表达式，但限制是只能使用单个表达式（不能使用语句）</p><p>  模板表达式位于     <code>Vue</code> 实例的数据作用域下，只能访问全局变量的一个白名单，例如 <code>Math对象</code>和 <code>Date对象</code>。</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>  指令是指带有     <code>v-</code>  前缀的特殊属性。除 <code>v-for</code>外，指令的预期值都为 <strong>单个js表达式</strong>。</p><p>  指令的作用是    <strong>当表达式值改变时，将其产生的连带影响，响应式的作用于  <code>DOM</code></strong></p><h5 id="参数"><a href="#参数" class="headerlink" title="#参数"></a>#参数</h5><p>  一些指令能接收一个 ‘参数’，跟在指令的冒号后。形如   <code>v-bind:title=&quot;text&quot;</code> 。</p><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="#修饰符"></a>#修饰符</h5><p>  修饰符是以   <code>.</code> 跟随在指令后的一个特殊后缀，用于指明指令以特殊方式绑定。形如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--此 prevent 修饰符用于指定指令在事件触发式调用 event.preventDefault()--&gt;</span><br><span class="line">&lt;form v-on:sumbit.prevent=&quot;onSumbit&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="缩写"><a href="#缩写" class="headerlink" title="#缩写"></a>#缩写</h5><p>  <code>v-bind</code> 可缩写为 <code>：</code>  。</p><p>  S<code>v-on</code>  可缩写为  <code>@</code>  。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序的支付和退款流程</title>
      <link href="/2017/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%94%AF%E4%BB%98%E5%92%8C%E9%80%80%E6%AC%BE%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%94%AF%E4%BB%98%E5%92%8C%E9%80%80%E6%AC%BE%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>​    近期在做微信小程序时，涉及到了小程序的支付和退款流程，所以也大概的将这方面的东西看了一个遍，就在这篇博客里总结一下。</p><p>​    首先说明一下，微信小程序支付的<strong>主要逻辑集中在后端</strong>，前端只需携带支付所需的数据请求后端接口然后根据返回结果做相应成功失败处理即可。我在后端使用的是php，当然在这篇博客里我不打算贴一堆代码来说明支付的具体实现，而主要会侧重于整个支付的流程和一些细节方面的东西。所以使用其他后端语言的朋友有需要也是可以看一下的。很多时候开发的需求和相应问题的解决真的要跳出语言语法层面，去从系统和流程的角度考虑。好的，也不说什么废话了。进入正题。</p><h3 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h3><p>支付主要分为几个步骤：</p><ol><li>前端携带支付需要的数据发起支付请求</li><li>后端在接收到支付请求后，处理支付数据，然后携带处理后的支付数据请求 <strong>微信服务器</strong> 的 <strong>支付统一下单接口</strong></li><li>后端接收到上一步请求微信服务器的返回数据，再次处理，然后返回前端让前端可以开始支付。</li><li>前端进行支付动作</li><li>前端支付完成后，微信服务器会向后端发送支付通知（也就是微信要告诉你客户已经付过钱了），后端根据这个通知确定支付完成，然后就去做支付完成后的相应动作，比如修改订单状态，添加交易日志啊等等。</li></ol><p>从这几个步骤可以看出，后端主要的作用就是将支付需要的数据传给微信服务器，再根据微信服务器的响应确定支付是否完成。</p><p>这个流程还是蛮容易理解的。形象的说，前端就是个顾客，后端就是店家，微信服务器的统一下单接口就像收银员。顾客跟店家说，我是谁谁谁，现在我要付多少多少钱给你买什么什么。店家就跟收银员说，那个谁谁谁要付多少钱，你准备收钱吧。收银员收到钱后，就去告诉店家，我已经收到钱了，你给他东西吧。</p><p>下面就详细的说明一下<strong>各个步骤的具体实现</strong>。</p><h4 id="前端请求支付"><a href="#前端请求支付" class="headerlink" title="前端请求支付"></a>前端请求支付</h4><p>​      前端请求支付，就是简单的携带支付需要的数据，例如用户标识，支付金额，支付订单 ID 等等跟 <strong>你的业务逻辑有关</strong> 或者跟 <strong>下一步请求微信服务器支付统一下单接口需要的数据有关</strong> 的相关数据，使用微信小程序的 wx.request( ) 去请求后端的支付接口。</p><h4 id="后端请求微信服务器"><a href="#后端请求微信服务器" class="headerlink" title="后端请求微信服务器"></a>后端请求微信服务器</h4><p>​     后端接收到前端发送的支付请求后，可以进行一下相关验证，例如判断一下用户有没有问题，支付金额对不对等等。</p><p>​     在验证没什么问题，可以向微信服务器申请支付之后，后端需要使用 <strong>微信规定的数据格式</strong> 去请求微信的支付统一下单接口。</p><p>   微信规定的请求数据 这需要较多代码实现。因为需要的数据个数较多，而且还需要加密并以 XML 格式发送。</p><p>   首先，有以下数据是使用小程序支付必须提供给微信服务器的参数。</p><ul><li><p>小程序 <code>appid</code>。写小程序的大概没有不知道这个的。。。</p></li><li><p>用户标识 <code>openid</code>。也就是用户的小程序标识，在我<a href="http://www.cnblogs.com/afei-qwerty/p/7161634.html" target="_blank" rel="noopener">上篇博客</a>中说明了如何获取。</p></li><li><p>商户号 <code>mch</code>_id 。申请开通微信支付商户认证成功后微信发给你的邮件里有</p></li><li><p>商户订单号 <code>out_trade_no</code> 。商户为这次支付生成的订单号</p></li><li><p>总金额 <code>total_fee</code> 。订单总金额，很重要的一点是<strong>单位是分</strong>，要特别注意。</p></li><li><p>微信服务器回调通知接口地址 <code>notify_url</code>。微信确认钱已经到账后，会往这个地址多次发送消息，告诉你顾客已经付完钱了，你需要返回消息给微信表示你已经收到了通知。。这个地址不能有端口号，同时要能直接接受<code>POST</code>方法请求。</p></li><li><p>交易类型 <code>trade_type</code> 。微信小程序支付此值统一为 <code>JSAPI</code></p></li><li><p>商品信息 <code>Body</code>。类似<strong>“腾讯-游戏”</strong>这种格式 </p></li><li><p>终端IP地址 <code>spbill_create_ip</code> 。终端地址IP，也就是请求支付的 IP 地址。</p></li><li><p>随机字符串 <code>nonce_str</code> 。需要后端随机生成的字符串用于保证数据安全。微信要求不长于32位。</p></li><li><p>签名 <code>sign</code> 。使用上面的所有参数进行相应处理加密生成签名。</p></li></ul><p>在处理好以上所有数据后，将这些数据以 XML 格式整理并以 POST 方法发送到 <strong>微信支付统一下单接口</strong> <a href="https://api.mch.weixin.qq.com/pay/unifiedorder" target="_blank" rel="noopener">https://api.mch.weixin.qq.com/pay/unifiedorder</a> 。</p><h4 id="3-后端接受微信服务器返回数据"><a href="#3-后端接受微信服务器返回数据" class="headerlink" title="3.后端接受微信服务器返回数据"></a>3.后端接受微信服务器返回数据</h4><p>   微信服务器在接收到支付数据之后，如果数据没有问题，其会返回用于支付的相应数据，其中非常重要的是 名称为 prepay_id 的数据字段，需要将此数据返回前端，前端才能继续支付。</p><p>  因此，在后端接收到微信服务器的返回数据后，需要进行相应的处理，最终返回到前端如下数据：</p><ul><li>appid 不需多说</li><li>timeStamp 当前时间戳<ul><li>nonceStr   随机字符串</li><li>package    就是上面提到的 prepay_id，不过切记格式如 “prepay_id= prepay_id_item“。否则会导致错误。</li><li>signType  加密方式，一般应该是 MD5</li><li>paySign   对以上数据进行相应处理并加密。</li></ul></li></ul><p>到这里，后端的支付接口已经完成了接收前端支付请求，并返回了前端支付所需数据的功能。</p><h4 id="前端发起支付"><a href="#前端发起支付" class="headerlink" title="前端发起支付"></a>前端发起支付</h4><p>​    前端在接收到返回数据后，使用 <code>wx.requestPayment()</code>来请求发起支付。此 API 需要的对象参数各项值就是我们上一步返回的各个数据。</p><h4 id="后端接受微信服务器回调"><a href="#后端接受微信服务器回调" class="headerlink" title="后端接受微信服务器回调"></a>后端接受微信服务器回调</h4><p>​    前端完成支付后，微信服务器确认支付已经完成。就会向第一步中设置的回调地址发送通知。后端的接收回调接口在接收到通知后，就可以判断支付是否完成，从而决定后续动作。</p><p>​    需要注意的是，在接收到微信服务器的回调通知后，需要返回success数据向微信服务器告知已得到回调通知。否则微信服务器会不停的向后端发送消息。</p><p>​    微信的大概支付流程就是这样。以下是PHP语法的微信支付类，可以比照上面的步骤介绍，加深理解。在需要支付时，直接传入参数实例化此类再调用类的 pay 方法即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信支付类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXinPay</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=======【基本信息设置】=====================================</span></span><br><span class="line">    <span class="comment">//微信公众号身份的唯一标识</span></span><br><span class="line">    <span class="keyword">protected</span> $APPID = appid;<span class="comment">//填写您的appid。微信公众平台里的</span></span><br><span class="line">    <span class="keyword">protected</span> $APPSECRET = secret;</span><br><span class="line">    <span class="comment">//受理商ID，身份标识</span></span><br><span class="line">    <span class="keyword">protected</span> $MCHID = <span class="string">'11111111'</span>;<span class="comment">//商户id</span></span><br><span class="line">    <span class="comment">//商户支付密钥Key</span></span><br><span class="line">    <span class="keyword">protected</span> $KEY = <span class="string">'192006250b4c09247ec02edce69f6a2d'</span>;</span><br><span class="line">    <span class="comment">//回调通知接口</span></span><br><span class="line">    <span class="keyword">protected</span> $APPURL =      <span class="string">'https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers'</span>;</span><br><span class="line">    <span class="comment">//交易类型</span></span><br><span class="line">    <span class="keyword">protected</span> $TRADETYPE = <span class="string">'JSAPI'</span>;</span><br><span class="line">    <span class="comment">//商品类型信息</span></span><br><span class="line">    <span class="keyword">protected</span> $BODY = <span class="string">'wx/book'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//微信支付类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($openid,$outTradeNo,$totalFee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;openid = $openid; <span class="comment">//用户唯一标识</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;outTradeNo = $outTradeNo; <span class="comment">//商品编号</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;totalFee = $totalFee; <span class="comment">//总价</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//微信支付类向外暴露的支付接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;weixinapp();</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//对微信统一下单接口返回的支付相关数据进行处理</span></span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">weixinapp</span><span class="params">()</span></span>&#123;</span><br><span class="line">         $unifiedorder=<span class="keyword">$this</span>-&gt;unifiedorder();</span><br><span class="line"></span><br><span class="line">         $parameters=<span class="keyword">array</span>(</span><br><span class="line">          <span class="string">'appId'</span>=&gt;<span class="keyword">$this</span>-&gt;APPID,<span class="comment">//小程序ID</span></span><br><span class="line">          <span class="string">'timeStamp'</span>=&gt;<span class="string">''</span>.time().<span class="string">''</span>,<span class="comment">//时间戳</span></span><br><span class="line">          <span class="string">'nonceStr'</span>=&gt;<span class="keyword">$this</span>-&gt;createNoncestr(),<span class="comment">//随机串</span></span><br><span class="line">          <span class="string">'package'</span>=&gt;<span class="string">'prepay_id='</span>.$unifiedorder[<span class="string">'prepay_id'</span>],<span class="comment">//数据包</span></span><br><span class="line">          <span class="string">'signType'</span>=&gt;<span class="string">'MD5'</span><span class="comment">//签名方式</span></span><br><span class="line">             );</span><br><span class="line">         $parameters[<span class="string">'paySign'</span>]=<span class="keyword">$this</span>-&gt;getSign($parameters);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> $parameters;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *请求微信统一下单接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">unifiedorder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $parameters = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'appid'</span> =&gt; <span class="keyword">$this</span>-&gt;APPID,<span class="comment">//小程序id</span></span><br><span class="line">            <span class="string">'mch_id'</span>=&gt; <span class="keyword">$this</span>-&gt;MCHID,<span class="comment">//商户id</span></span><br><span class="line">            <span class="string">'spbill_create_ip'</span>=&gt;$_SERVER[<span class="string">'REMOTE_ADDR'</span>],<span class="comment">//终端ip</span></span><br><span class="line">            <span class="string">'notify_url'</span>=&gt;<span class="keyword">$this</span>-&gt;APPURL, <span class="comment">//通知地址</span></span><br><span class="line">            <span class="string">'nonce_str'</span>=&gt; <span class="keyword">$this</span>-&gt;createNoncestr(),<span class="comment">//随机字符串</span></span><br><span class="line">            <span class="string">'out_trade_no'</span>=&gt;<span class="keyword">$this</span>-&gt;outTradeNo,<span class="comment">//商户订单编号</span></span><br><span class="line">            <span class="string">'total_fee'</span>=&gt;floatval(<span class="keyword">$this</span>-&gt;totalFee), <span class="comment">//总金额</span></span><br><span class="line">            <span class="string">'open_id'</span>=&gt;<span class="keyword">$this</span>-&gt;openid,<span class="comment">//用户openid</span></span><br><span class="line">            <span class="string">'trade_type'</span>=&gt;<span class="keyword">$this</span>-&gt;TRADETYPE,<span class="comment">//交易类型</span></span><br><span class="line">            <span class="string">'body'</span> =&gt;<span class="keyword">$this</span>-&gt;BODY, <span class="comment">//商品信息</span></span><br><span class="line">        );</span><br><span class="line">        $parameters[<span class="string">'sign'</span>] = <span class="keyword">$this</span>-&gt;getSign($parameters);</span><br><span class="line">        $xmlData = <span class="keyword">$this</span>-&gt;arrayToXml($parameters);</span><br><span class="line">        $xml_result = <span class="keyword">$this</span>-&gt;postXmlCurl($xmlData,<span class="string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>,<span class="number">60</span>);</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;xmlToArray($xml_result);</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//数组转字符串方法</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToXml</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">        $xml = <span class="string">"&lt;xml&gt;"</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key=&gt;$val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($val))&#123;</span><br><span class="line">                $xml.=<span class="string">"&lt;"</span>.$key.<span class="string">"&gt;"</span>.$val.<span class="string">"&lt;/"</span>.$key.<span class="string">"&gt;"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 $xml.=<span class="string">"&lt;"</span>.$key.<span class="string">"&gt;&lt;![CDATA["</span>.$val.<span class="string">"]]&gt;&lt;/"</span>.$key.<span class="string">"&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $xml.=<span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> $xml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">xmlToArray</span><span class="params">($xml)</span></span>&#123;</span><br><span class="line">        $array_data = json_decode(json_encode(simplexml_load_string($xml, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA)), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> $array_data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送xml请求方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">postXmlCurl</span><span class="params">($xml, $url, $second = <span class="number">30</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        <span class="comment">//设置超时</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, $second);</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>); <span class="comment">//严格校验</span></span><br><span class="line">        <span class="comment">//设置header</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</span><br><span class="line">        <span class="comment">//要求结果为字符串且输出到屏幕上</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</span><br><span class="line">        <span class="comment">//post提交方式</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_POST, <span class="keyword">TRUE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);</span><br><span class="line">        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, <span class="number">20</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">40</span>);</span><br><span class="line">        set_time_limit(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//运行curl</span></span><br><span class="line">        $data = curl_exec($ch);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">if</span> ($data) &#123;</span><br><span class="line">            curl_close($ch);</span><br><span class="line">            <span class="keyword">return</span> $data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $error = curl_errno($ch);</span><br><span class="line">            curl_close($ch);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> WxPayException(<span class="string">"curl出错，错误码:$error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对要发送到微信统一下单接口的数据进行签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getSign</span><span class="params">($Obj)</span></span>&#123;</span><br><span class="line">         <span class="keyword">foreach</span> ($Obj <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">          $Parameters[$k] = $v;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//签名步骤一：按字典序排序参数</span></span><br><span class="line">         ksort($Parameters);</span><br><span class="line">         $String = <span class="keyword">$this</span>-&gt;formatBizQueryParaMap($Parameters, <span class="keyword">false</span>);</span><br><span class="line">         <span class="comment">//签名步骤二：在string后加入KEY</span></span><br><span class="line">         $String = $String.<span class="string">"&amp;key="</span>.<span class="keyword">$this</span>-&gt;KEY;</span><br><span class="line">         <span class="comment">//签名步骤三：MD5加密</span></span><br><span class="line">         $String = md5($String);</span><br><span class="line">         <span class="comment">//签名步骤四：所有字符转为大写</span></span><br><span class="line">         $result_ = strtoupper($String);</span><br><span class="line">         <span class="keyword">return</span> $result_;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *排序并格式化参数方法，签名时需要使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">formatBizQueryParaMap</span><span class="params">($paraMap, $urlencode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $buff = <span class="string">""</span>;</span><br><span class="line">        ksort($paraMap);</span><br><span class="line">        <span class="keyword">foreach</span> ($paraMap <span class="keyword">as</span> $k =&gt; $v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>($urlencode)</span><br><span class="line">            &#123;</span><br><span class="line">               $v = urlencode($v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//$buff .= strtolower($k) . "=" . $v . "&amp;";</span></span><br><span class="line">            $buff .= $k . <span class="string">"="</span> . $v . <span class="string">"&amp;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $reqPar;</span><br><span class="line">        <span class="keyword">if</span> (strlen($buff) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $reqPar = substr($buff, <span class="number">0</span>, strlen($buff)<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $reqPar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 生成随机字符串方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createNoncestr</span><span class="params">($length = <span class="number">32</span> )</span></span>&#123;</span><br><span class="line">         $chars = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">         $str =<span class="string">""</span>;</span><br><span class="line">         <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ ) &#123;</span><br><span class="line">          $str.= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars)<span class="number">-1</span>), <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> $str;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是微信支付的相关流程。在理清思路后，流程还是比较清晰和简单的。重点在于需要注意一些细节问题，例如数据格式，加密方法等。</p><h3 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h3><p>  小程序退款的流程和付款需要的参数类似，除了一些细节上的不同，流程均是后端向微信服务器发送退款请求，前端逻辑较为简单。</p><p> 首先退款的步骤通常如下:</p><ol><li>用户前端点击退款按钮后，后端接收到用户的退款请求呈现给商户，商户确定允许退款后，后端再发起向微信退款接口的请求来请求退款。</li><li>后端向微信退款接口发送请求后，得到响应信息，确定退款是否完成，根据退款是否完成再去进行改变订单状态等业务逻辑。</li></ol><p>退款的步骤相对微信支付来说比较简单。</p><p>值得注意的是，向微信退款接口请求退款后，根据得到的响应是可以直接确定退款是否完成的。不再需要设置专门的回调接口等待微信通知。</p>]]></content>
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序的登录和登录状态维护</title>
      <link href="/2017/10/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E9%99%86%E5%92%8C%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
      <url>/2017/10/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E9%99%86%E5%92%8C%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>微信小程序的登录主要步骤如下：</p><ol><li><p>客户端调用 <code>wx.login()</code> ，获得返回参数 <code>code</code></p></li><li><p>客户端调用 <code>wx.request()</code> 将 <code>code</code> 发送到服务器</p></li><li><p>服务器将 <code>code</code> 和存储在服务器的 <code>appid</code> 和 <code>appSecret</code> 共三个参数作为请求参数，向微信服务器接口发起请求获得返回参数 <code>openid</code> 和 <code>session_key</code> 。</p><p> <code>openid</code> 是用户唯一标识。</p><p><code>session_key</code> 是针对用户数据进行加密签名的密匙。session_key在文件校验，获取用户信息时均需使用</p><p> 微信服务器返回的两个参数一般为了安全起见，都不会发往客户端。</p><p> 微信服务器的请求接口地址为：<code>https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code</code>    </p></li><li><p>服务器使用 <code>openid</code> 和 <code>session_key</code> 生成 <code>3rd_session</code> 作为自己派发的登陆态标识<code>token</code>，将其发送到小程序客户端。</p><p> 在生成 <code>3rd_session</code> 时，将 <code>3rd_session</code> 作为键，将<code>session_key + openid</code> 作为值，存储在 服务器的 <code>session</code> 存储中。每个<code>3rd_session</code>都需要设置一个失效时间。</p></li><li><p>小程序客户端将 <code>3rd_session</code> 存入 <code>storage</code></p></li><li><p>后续用户进入小程序时，首先调用<code>wx.checksession()</code> 检测登陆态，如果失败，重新发起登陆流程。</p></li><li><p>如果登陆状态未失效，则从 <code>storage</code> 中读取 <code>3rd_session</code>。在需要用户标识的 wx.request() 时作为用户标识发送到服务器检验,服务器判断其是否合法。</p></li></ol><h4 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h4><p>获取用户信息时，根据微信请求用户信息接口<code>wx.getUserinfo()</code>函数的请求参数<code>withCredentials</code>的布尔值及用户的登陆状态不同，会有不同的返回值。</p><ol><li><p><strong>当<code>withCredentials</code> 为 <code>true</code> 且 用户登陆态未到期</strong></p><p>返回的数据会包括 <code>encryptedData</code>，<code>iv</code>等敏感数据。如下：</p><ol><li><p><code>userinfo</code>     不包含敏感数据的用户信息</p></li><li><p><code>rawData</code>      不包含敏感数据的原始数据字符串,用于签名校验</p></li><li><p><code>signature</code>。  使用<code>sha1( rawData + sessionkey )</code> 得到的字符串，用于签名校验数据</p></li><li><p><code>encryptedData</code>    包含 <code>openId</code>，<code>unionId</code> 等用户敏感数据的加密数据</p></li><li><p><code>iv</code>   加密算法的初始向量</p></li></ol></li></ol><ol start="2"><li><p><strong>当withCredentials 为 <code>false</code> 时</strong></p><p>不要求登陆状态，返回数据不包含敏感数据。</p></li></ol><hr><h4 id="小程序的数据签名校验和数据解密"><a href="#小程序的数据签名校验和数据解密" class="headerlink" title="小程序的数据签名校验和数据解密"></a>小程序的数据签名校验和数据解密</h4><p><strong>签名校验(用于校验数据完整性等)：</strong></p><p>需要使用<code>session_key</code>。客户端将 <code>signature</code> 和 <code>rawData</code> 发送到服务器，服务器通过相同的 <code>sha1( rewData + session_key)</code> 算法计算出 <code>signature2</code>，并与客户端发送过来的<code>signature</code>对比，校验数据完整性。</p><hr><p><strong>加密数据encryptedData的解密：</strong></p><p>需要客户端将接口返回的<code>encryptedData</code>发送到服务器，服务器使用 <code>appId</code> 和 <code>session_key</code> ，根据加密算法的初始向量 <code>iv</code> 对 <code>encryptedData</code>  进行解密（微信提供有后端解密代码，包括python，php等(无java)</p>]]></content>
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端兼容相关的一些知识</title>
      <link href="/2017/08/18/%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/08/18/%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h4 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h4><p>1.设置浏览器的兼容模式版本，表示如果在 IE 浏览器下<strong>使用最新标准渲染当前文档</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE-edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.条件注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;!--用于在 IE 时让浏览器能识别 HTML5 标签&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;!--用于在 IE 时让浏览器能识别 CSS3 媒体查询&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>​    条件注释的作用：当判断条件满足时，就会执行注释中的 HTML 代码。</p><h4 id="移动端兼容"><a href="#移动端兼容" class="headerlink" title="移动端兼容"></a>移动端兼容</h4><p>1.视口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    视口的作用 ：在移动浏览器中，当页面宽度超出设备，浏览器内部虚拟的一个页面容器，会将页面容器缩放到设备这么大，然后展示。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器兼容 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySql 的数据类型</title>
      <link href="/2017/08/14/MySql%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/08/14/MySql%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p><strong>整数</strong></p><ul><li><p><code>TINYINT</code>        小整数值  （0-255 or -128-127) 1字节</p></li><li><p><code>SMALLINT</code>    大整数值    2字节</p></li><li><p><code>MEDIUMINT</code> 大整数值    3字节</p></li><li><p><code>INT</code> 或 <code>INTEGER</code> 大整数值 4字节</p></li><li><p><code>BIGINT</code>          极大整数值   8字节 </p></li></ul><p><strong>浮</strong>点数</p><ul><li><code>FLOAT</code>          单精度浮点数值 4字节</li><li><code>DOUBLE</code>      双精度浮点数值 8字节</li><li><code>DECIMAL</code>     小数值</li></ul><hr><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><strong>字符字符串（存储过程中不进行大小写转换)</strong></p><ul><li><code>CHAR</code>           定长字符串  0-255字节</li><li><code>VARCHAR</code>    变长字符串</li></ul><p><strong>字节字符串（二进制字符串）</strong></p><ul><li><code>TINYBLOB</code>     不超过255字节的二进制字符串</li><li><code>BLOB</code>             长二进制字符串  </li><li><code>MEDIUMBLOB</code>  中等长度二进制字符串</li><li><code>LONGBLOB</code>     极大长度二进制字符串</li></ul><p><strong>文本</strong></p><ul><li><code>TINTTEXT</code>        短文本字符串</li><li><code>TEXT</code>                长文本字符串</li><li><code>MEDIUMTEXT</code> 中等长度文本字符串</li><li><code>LONGTEXT</code>      极大长度文本字符串</li></ul><hr><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><p><strong>年</strong></p><p><code>YEAR</code>           年份值（ YYYY ） 1字节</p><p><strong>日期</strong></p><p><code>DATE</code>            日期值（YYYY-MM-DD） 3字节</p><p><strong>时间</strong></p><p><code>TIME</code>             时间值 （HH:MM:SS)    3字节</p><p><strong>日期</strong>和时间</p><p><code>DATETIME</code>     混合日期时间值 （YYYY-MM-DD HH:MM:SS）8字节</p><p><strong>时间戳</strong></p><p>TIMEST～AMP    时间戳字符串     （YYYYMMDD HHMMSS）4字节</p>]]></content>
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NPM 的一些常用命令和使用方法</title>
      <link href="/2017/06/14/npm/"/>
      <url>/2017/06/14/npm/</url>
      <content type="html"><![CDATA[<p><code>npm</code>  是  <code>node package manager</code> 的缩写，字面意义即可解释它的作用：<code>node</code> 的包管理工具。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>查看npm版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>升级npm至最新版 </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure></li><li><p>模块的安装和使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;  ##本地安装模块</span><br><span class="line">npm install &lt;Module Name&gt; -g ##全局安装模块</span><br><span class="line">npm install &lt;Module Nmae&gt;@"0.1.1" ##安装对应版本模块</span><br></pre></td></tr></table></figure></li><li><p>全局安装和本地安装的区别</p><blockquote><p>本地安装后安装包位于运行npm命令时所在目录的 ./node_modules下,若无此目录会直接生成。安装后可以通过 require() 在代码文件中直接引入安装的包模块。</p></blockquote><blockquote><p>全局安装命令需要 -g 选项</p><p>全局安装会将安装包放在 /usr/local 下或者你的 node 安装目录下。安装的模块可以直接在命令行里使用。</p></blockquote></li></ol><ol start="5"><li><p>查看安装信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g ##查看全局安装的所有模块</span><br><span class="line">npm ls ##查看当前目录安装了哪些模块</span><br><span class="line">npm ls &lt;Module Name&gt;            ##查看某个模块的基本信息</span><br><span class="line">npm info &lt;Module Name&gt; ##查看某个模块的详细信息</span><br></pre></td></tr></table></figure></li><li><p>卸载和更新和搜索模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall &lt;Module Name&gt;  ##卸载</span><br><span class="line">npm uninstall &lt;Module Nmae&gt;@"0.1.1" ##卸载对应版本模块</span><br><span class="line">npm update &lt;Module Name&gt;  ##更新</span><br><span class="line">npm search &lt;Module Name&gt; ##搜索</span><br></pre></td></tr></table></figure></li><li><p>创建模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init  ##初始化目录为模块目录，会生成 package.json 文件（相关信息需自行填写最后输入yes确认）</span><br><span class="line">npm adduser  ##在npm资源库中注册用户，需要输入用户名和密码以及邮箱</span><br><span class="line">npm publish  ##发布模块</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config list ##查看所有设置</span><br><span class="line">npm config edit ##直接进入配置文件修改</span><br><span class="line">npm cache clean ##清理缓存</span><br></pre></td></tr></table></figure></li><li><p>代理 proxy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy &lt;url&gt; ##设置代理地址（可设置为null即为无代理）</span><br><span class="line">npm set proxy &lt;url&gt;  ##上条命令的简写</span><br><span class="line">npm config get proxy  ##查看代理地址</span><br><span class="line">npm get proxy       ##上条命令的简写</span><br><span class="line">npm delete proxy  ##删除代理</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="包的package-json"><a href="#包的package-json" class="headerlink" title="包的package.json"></a>包的<code>package.json</code></h2><ol><li><code>package.json</code> 文件用于定义包的属性，部分属性如下<ul><li><strong><code>name</code></strong> - 包名。</li><li><strong><code>version</code></strong> - 包的版本号。</li><li><strong><code>description</code></strong> - 包的描述。</li><li><strong><code>homepage</code></strong> - 包的官网 url 。</li><li><strong><code>author</code></strong> - 包的作者姓名。</li><li><strong><code>contributors</code></strong> - 包的其他贡献者姓名。</li><li><strong><code>dependencies</code></strong> - 依赖包列表。<strong>如果依赖包没有安装，npm 会自动将依赖包安装在 <code>node_module</code> 目录下。</strong></li><li><strong><code>devDependencies</code> </strong> - package的开发依赖模块，即别人要在这个package上进行开发`</li><li><strong><code>repository</code></strong> - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li><li><strong><code>main</code></strong> - <code>main</code> 字段指定了程序的主入口文件，<code>require(&#39;moduleName&#39;)</code> 就会加载这个文件。这个字段的默认值是模块根目录下面的 <code>index</code>.js。</li><li><strong><code>keywords</code></strong> - 关键字</li><li><strong><code>scripts</code></strong> - 定义脚本命令，使用 <code>npm run sname</code> 即可执行，</li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片模态框效果实现(二)：BootStrap插件实现</title>
      <link href="/2017/06/12/%E5%9B%BE%E7%89%87%E6%A8%A1%E6%80%81%E6%A1%86%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%BA%8C/"/>
      <url>/2017/06/12/%E5%9B%BE%E7%89%87%E6%A8%A1%E6%80%81%E6%A1%86%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>在上一篇文章中，我们使用 js+css 实现了模态框效果，在理解了模态框的基本实现方法和实现效果后，我们就要寻找更快捷的方法，又快又好的来完成模态框开发需求，从而节约时间，提高效率。一个好的轮子，不仅能大幅减轻工作量，而且能让我们的代码更简明和优雅。</p><p>今天我们选择使用著名的 <em>bootstrap</em> 库的模态框插件 <em>modal</em>.<em>js</em> 来实现模态框效果，同时也使大家进一步熟悉 <em>bootstrap</em> 的插件使用。</p><h3 id="bootstrap-的-js-插件"><a href="#bootstrap-的-js-插件" class="headerlink" title="bootstrap 的 js 插件"></a><em>bootstrap</em> 的 js 插件</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><ul><li><p>引入全部JS插件</p><p>我们在使用 <em>bootstrap</em> 库时，引入的文件 <em>bootstrap.js</em> 或者 <em>bootstrap.min.js</em> 就是 <em>bootstrap</em> 的插件文件，这两种文件都集成了 <em>bootstrap</em> 的所有插件，区别在于 *<em>.min.js</em> 是压缩后的版本。</p><p>我们在使用 b<em>o</em>otstrap 的 <code>js</code>插件时不需要做更多的工作，只需要引入这两个文件中的一个就可以了，另外重要的信息是 <em>bootstrap</em> 的所有插件都依赖于 <em>jquery</em> 库，<strong>所以在引入 <em>bootstrap</em> 的插件时，必须先引入 <em>jquery</em> 库。</strong></p></li><li><p>引入单个<code>JS</code>插件</p><p>如果只使用 <em>bootstrap</em>库的 某个插件，所以不想引入全部插件时，可以选择单独引入某个插件。此种方法需要你有要使用的插件的单独文件，<em>bootstrap</em> 官方共有 12 个 <em>js</em> 插件，你可以到 <a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">github此处 </a>下载使用每个插件的单独文件。</p></li></ul><p>另外 bootstrap 有以下 12 个插件，大家可以大概做个了解：</p><ul><li>动画过渡（Transitions）: <code>transition.js</code></li><li>模态弹窗（Modal）: <code>modal.js</code></li><li>下拉菜单（Dropdown）： <code>dropdown.js</code></li><li>滚动侦测（Scrollspy）： <code>scrollspy.js</code></li><li>选项卡（Tab）： <code>tab.js</code></li><li>提示框（Tooltips）： <code>tooltop.js</code></li><li>弹出框（Popover）： <code>popover.js</code></li><li>警告框（Alert）： <code>alert.js</code></li><li>按钮（Buttons）： <code>button.js</code></li><li>折叠/手风琴（Collapse）： <code>collapse.js</code></li><li>图片轮播（Carousel）： <code>carousel.js</code></li><li>自动定位浮标（Affix）： <code>affix.js</code></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>通过 <code>data</code> 属性 <em>API</em></p><p><em>bootstrap</em> 提供了一个非常方便的 <em>API</em> 来调用插件，那就是 <code>data</code> 属性 。我们不需要写很多 <em>js</em> 代码，只需要为 <em>HTML</em> 标签增加 <code>data-*</code> 属性，就可以调用 <code>js</code>插件实现各种效果 。</p><p>例如我们想为按钮绑定 下拉菜单效果，只需要为按钮添加 <code>data-toggle=&quot;dropdown&quot;</code> 属性，在点击按钮时，就会调用 <em>dropdown</em> 插件了。</p></li><li><p>通过 <code>JS API</code></p><p>当然我们也可以使用 <em>bootstrap</em> 提供的 纯<em>javascript</em> <em>API</em> 来调用插件，例如为 i<em>d</em> 为 <em>test</em> 的 按钮绑定调用 <em>dropdown</em> 插件操作，可以使用如下的 <em>js</em> 代码：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#test"</span>).dropdown(option) <span class="comment">//可带选项参数option</span></span><br></pre></td></tr></table></figure><h3 id="模态框插件详解"><a href="#模态框插件详解" class="headerlink" title="模态框插件详解"></a>模态框插件详解</h3><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p><em>bootstrap</em> 模态框插件是 <code>modal.js</code> 。使用的代码结构类如下：</p><ul><li><code>.modal</code>            模态框</li><li><code>.modal-dialog</code>    模态框主体</li><li><code>.modal-content</code> 模态框内容</li><li><code>.modal-header</code>  模态框内容头部（标题）</li><li><code>.modal-title</code>       模态框标题</li><li><code>.modal-body</code>    模态框内容主要内容部分</li><li><code>.modal-footer</code>    模态框内容底部 （可放置操作按钮等）</li></ul><p>一个模态框的结构类似如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>模态框是个值得学习的好效果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击显示模态框按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#modalone"</span> <span class="attr">data-show</span>=<span class="string">"false"</span>&gt;</span>come on!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模态框HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"modalone"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment">&lt;!-- 模态框的header--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模态框的关闭按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>模态弹出窗标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 模态框主体 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>模态框主体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 模态框footer --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"display: inline-block;"</span>&gt;</span>模态框底部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>done<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="data-属性-API"><a href="#data-属性-API" class="headerlink" title="data 属性 API"></a><code>data</code> 属性 <em>API</em></h4><ul><li><p>必须的 <code>data</code> 属性</p><p>点击出现模态框按钮的 <code>data-toggle=&quot;#modalone&quot;</code> 属性表示 此按钮为模态框的触发器按钮，点击时弹出模态框。另外也可以使用 链接标签 <a> 的 <em>href</em> 属性代替 <code>data-toggle</code> 将链接<a> 作为触发器，但不推荐点击链接时出现模态框。</a></a></p><p><code>data-target=&quot;#modalone&quot;</code> 属性表示 触发的模态框窗口 ID 为 modalone 。一个页面可以有多个模态窗口触发器，但是一个触发器只能触发此属性对应的模态框，不能触发多个模态框。</p></li></ul><blockquote><p><em>.fade 格式化类可以为模态框弹出添加过渡效果。</em></p></blockquote><blockquote><p><em>.close 格式化类 和 <code>data-dismiss</code> 属性配合可以为模态框添加关闭按钮。</em></p></blockquote><ul><li><p>可选的 <code>data</code> 属性</p><p>另外还有一些其他可选的 <code>data</code> 属性，可以增强模态框的表现效果。如下：</p><ul><li><code>data-backdrop</code>    是否包含一个背景 DIV 从而在单击背景时关闭模态框，属性值为 <em>true</em> 时 包含， 为 <em>static</em> 时不包含。</li></ul><ul><li><code>data-keyboard</code>    为 <em>true</em> 时按下键盘 <em>ESC</em> 时模态框关闭，false时不关闭</li><li><code>data-show</code>           为<em>true</em>时页面加载后不显示，为<em>false</em>时显示</li></ul></li></ul><h4 id="JS-API"><a href="#JS-API" class="headerlink" title="JS  API"></a><code>JS</code>  <em>API</em></h4><p>通过<code>JS</code> 代码调用插件初始化模态框也可以达到与设置<code>data</code>属性达到相同的效果，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#modalone"</span>).modal(&#123;</span><br><span class="line">            backdrop: <span class="literal">false</span>, <span class="comment">// 相当于data-backdrop</span></span><br><span class="line">            keyboard: <span class="literal">false</span>, <span class="comment">// 相当于data-keyboard</span></span><br><span class="line">            show: <span class="literal">true</span>, <span class="comment">// 相当于data-show</span></span><br><span class="line">            remote: <span class="string">""</span> <span class="comment">// 相当于a标签作为触发器的href</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>最后，以上模态框代码效果如下：</p><p>未点击按钮时：</p><p><img src="https://s1.ax1x.com/2018/04/15/CZLjmV.png" alt="img"></p><p>点击后：</p><p><img src="https://s1.ax1x.com/2018/04/15/CZOSkF.png" alt="img"></p><p>一个简单的模态框效果就制作完成了。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="JS-API-方法"><a href="#JS-API-方法" class="headerlink" title="JS API 方法"></a><code>JS API</code> 方法</h4><p>JS 代码调用插件， <code>$(&#39;#myModal&#39;).modal()</code>方法的参数除了使用 <code>option</code> 参数初始化模态框外，还有以下几个方法：</p><ul><li><code>$(&#39;#modalone&#39;).modal(&#39;toggle&#39;)</code>  切换模态框显示隐藏</li><li><code>$(&#39;#modalone&#39;).modal(&#39;show&#39;)</code>      打开模态框</li><li><code>$(&#39;#modalone&#39;).modal(&#39;hide&#39;)</code>      手动关闭模态框</li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>同时，模态框插件还提供了以下几个钩子事件函数，可以在<code>JS</code>代码中使用来达到丰富模态框效果或添加更多功能的目的。</p><p>使用方式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#modalone'</span>).on(<span class="string">'hidden.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>show.bs.modal</th><th>在show方法调用时立即触发（尚未显示之前）；如果单击了一个元素，那么该元素将作为事件relatedTarget事件</th></tr></thead><tbody><tr><td>shown.bs.modal</td><td>该事件在模态窗完全显示给用户之后（并且等CSS动画完成之后）触发；如果单击了一个元素，那么该元素将作为事件relatedTarget事件</td></tr><tr><td>hide.bs.modal</td><td>在hide方法调用时（但还未关闭隐藏）立即触发</td></tr><tr><td>hidden.bs.modal</td><td>该事件在模态弹出窗完全隐藏之后（并CSS动画漂亮完成之后）触发</td></tr></tbody></table><p>以上就是 <em>bootstrap</em> 的模态框插件的相关知识，希望大家喜欢。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片模态框效果实现(一)：JS实现</title>
      <link href="/2017/06/11/%E5%9B%BE%E7%89%87%E6%A8%A1%E6%80%81%E6%A1%86%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%B8%80/"/>
      <url>/2017/06/11/%E5%9B%BE%E7%89%87%E6%A8%A1%E6%80%81%E6%A1%86%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>很多时候我们在浏览图片时，会发现<strong>点击图片后，会弹出一个被点击图片的放大图片浮在页面上，占满整个窗口。</strong>这就是图片模态框效果。</p><p>这个效果可以使用某些<code>js</code>库实现，如<strong><em>bpopupJs</em></strong>。但是在这里我们使用纯<code>js</code>实现，能够更好理解效果原理和实现方法。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们点击小图片之后,图片模态框出现，同时图片模态框上有一个关闭按钮和图片的标题。</p><p>因此，我们的实现思路就是：</p><ol><li>图片模态框有大图片，关闭按钮，图片标题三部分。</li><li>将图片模态框隐藏，在点击小图片之后，模态框出现。</li><li>点击关闭按钮后，模态框隐藏。</li></ol><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><code>HTML</code></h3><p>首先，我们的原始页面上有一个图片如下：</p><p><img src="https://img.catqu.com/images/2018/04/15/mo11.png" alt="img"></p><p>HTML代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>图片点击弹出模态框效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片模态框很不错，是个值得学习的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"star.jpeg"</span> <span class="attr">id</span>=<span class="string">"real"</span> <span class="attr">alt</span>=<span class="string">"model test picture"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模态框的HTML代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"motai"</span> <span class="attr">id</span>=<span class="string">"mo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"motaiimg"</span> <span class="attr">id</span>=<span class="string">"moimg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"caption"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><code>CSS</code></h3><p>我们需要通过css设置模态框中各元素的表现效果同时将其隐藏起来，具体有如下几步：</p><h4 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#mo</span>&#123;</span><br><span class="line">       <span class="attribute">display</span>: none;<span class="comment">/*隐藏模态框*/</span></span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">position</span>: fixed;<span class="comment">/*定位方式为固定定位*/</span></span><br><span class="line">       <span class="attribute">overflow</span>: auto;<span class="comment">/*不滚动*/</span></span><br><span class="line">       <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,0.7);</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">       <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">       <span class="attribute">z-index</span>: <span class="number">1</span>;<span class="comment">/*置于页面图层之上*/</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.close</span>&#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">14%</span>;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#f1f1f1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#bbb</span>;</span><br><span class="line">      <span class="attribute">cursor</span>:pointer;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="模态框中图片"><a href="#模态框中图片" class="headerlink" title="模态框中图片"></a>模态框中图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#moimg</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: block;<span class="comment">/*图片表现为块*/</span></span><br><span class="line">        <span class="attribute">margin</span>:<span class="number">25px</span> auto;<span class="comment">/*图片居中对齐*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">750px</span>;<span class="comment">/*自适应布局*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="图片标题"><a href="#图片标题" class="headerlink" title="图片标题"></a>图片标题</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#caption</span>&#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;<span class="comment">/*文本居中*/</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">750px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p>如果想实现点击后扩大的动画效果，可以增加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#moimg</span>,<span class="selector-id">#caption</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: popup <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">-o-animation</span>: popup <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: popup <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> popup&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">scale</span>(0.1);&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">scale</span>(1);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上步骤，我们已经制作好了模态框页面。在使用js来完成交互效果就可以了。</p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a><code>JS</code></h3><p><code>js</code>代码主要是图片和关闭按钮的点击交互，需要注意的是<code>js</code>代码须位于模态框<code>HTML</code>代码之后，<code>js</code>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> motai=<span class="built_in">document</span>.getElementById(<span class="string">'mo'</span>)</span><br><span class="line"><span class="keyword">var</span> moimg=<span class="built_in">document</span>.getElementById(<span class="string">"moimg"</span>)</span><br><span class="line"><span class="keyword">var</span> realimg=<span class="built_in">document</span>.getElementById(<span class="string">"real"</span>)</span><br><span class="line"><span class="keyword">var</span> caption=<span class="built_in">document</span>.getElementById(<span class="string">"caption"</span>)</span><br><span class="line"></span><br><span class="line">realimg.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    motai.style.display=<span class="string">"block"</span></span><br><span class="line">    moimg.src=<span class="keyword">this</span>.src</span><br><span class="line">    caption.innerHTML=<span class="keyword">this</span>.alt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"close"</span>);</span><br><span class="line"></span><br><span class="line">span.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    motai.style.display=<span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上步骤，图片的模态框效果就实现了，</p><p><img src="https://img.catqu.com/images/2018/04/15/mo2.png" alt="img"></p><p>最后总的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>close<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#real</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*点击弹出模态框的图片*/</span></span></span><br><span class="line"><span class="undefined">        margin: 30px;</span></span><br><span class="line"><span class="undefined">        width: 250px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span><span class="selector-pseudo">:6px</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#real</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#mo</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;<span class="comment">/*隐藏*/</span></span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        overflow: auto;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.7</span>);</span></span><br><span class="line"><span class="undefined">        top: 0px;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#moimg</span>&#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:25px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="undefined">        width: 60%;</span></span><br><span class="line"><span class="undefined">        max-width: 750px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#caption</span>&#123;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        margin: 15px auto;</span></span><br><span class="line"><span class="undefined">        width: 60%;</span></span><br><span class="line"><span class="undefined">        max-height: 750px;</span></span><br><span class="line"><span class="undefined">        font-size: 20px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#moimg</span>,<span class="selector-id">#caption</span>&#123;</span></span><br><span class="line"><span class="undefined">        -webkit-animation: first 1s;</span></span><br><span class="line"><span class="undefined">        -o-animation: first 1s;</span></span><br><span class="line"><span class="undefined">        animation: first 1s;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    @<span class="keyword">keyframes</span> first&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">scale</span>(0.1);&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">scale</span>(1);&#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.close</span>&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 40px;</span></span><br><span class="line"><span class="undefined">        font-weight: bold;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 20px;</span></span><br><span class="line"><span class="undefined">        right: 14%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.close</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.close</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#bbb</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    @<span class="keyword">media</span> only screen and(max-width:<span class="number">750px</span> ) &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#moimg</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>图片点击弹出模态框效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片模态框很不错，是个值得学习的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"star.jpeg"</span> <span class="attr">id</span>=<span class="string">"real"</span> <span class="attr">alt</span>=<span class="string">"model test picture"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--图片模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"motai"</span> <span class="attr">id</span>=<span class="string">"mo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"motaiimg"</span> <span class="attr">id</span>=<span class="string">"moimg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"caption"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> motai=<span class="built_in">document</span>.getElementById(<span class="string">'mo'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> moimg=<span class="built_in">document</span>.getElementById(<span class="string">"moimg"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> realimg=<span class="built_in">document</span>.getElementById(<span class="string">"real"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> caption=<span class="built_in">document</span>.getElementById(<span class="string">"caption"</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    realimg.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        motai.style.display=<span class="string">"block"</span></span></span><br><span class="line"><span class="javascript">        moimg.src=<span class="keyword">this</span>.src</span></span><br><span class="line"><span class="javascript">        caption.innerHTML=<span class="keyword">this</span>.alt</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"close"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    span.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        motai.style.display=<span class="string">"none"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS动画效果及其回调</title>
      <link href="/2017/05/16/CSS%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%8F%8A%E5%85%B6%E5%9B%9E%E8%B0%83/"/>
      <url>/2017/05/16/CSS%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%8F%8A%E5%85%B6%E5%9B%9E%E8%B0%83/</url>
      <content type="html"><![CDATA[<p>用纯<code>JS</code>实现动画效果代码量大,计算复杂.因此现在前端页面的动画效果一般都采用<code>CSS</code>来实现.</p><p><code>CSS</code>动画实现简单高效,但是在处理动画,控制动画过程上却缺少一些有效手段.</p><p>例如我们想在动画效果完成时调用回调函数来处理一些事务,会发现CSS并没有提供直接的方法来让我们使用.</p><p>因此本文主要对<code>CSS</code>的动画做一个简单介绍，并说明一下动画的回调效果如何实现。</p><h3 id="css动画简介"><a href="#css动画简介" class="headerlink" title="css动画简介"></a>css动画简介</h3><p>css动画效果有两种,即<strong>过渡</strong>和<strong>动画</strong>.</p><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h4><p>当元素从一种样式转变为另一种样式,我们为这种转变添加动画效果,这种效果就称作过渡.</p><p><code>CSS</code>的过渡是通过 <code>transtion</code> 属性实现的.</p><p><code>transtion</code>属性必须包含以下两个值:</p><ul><li>要添加过渡效果的样式属性名</li><li>过渡效果持续时间</li></ul><p>另外还有两个可选的属性值:</p><ul><li>过渡效果的速度时间曲线函数</li><li>过渡效果的延迟时间</li></ul><p>下面是一个CSS过渡效果的例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">-webkit-transtion</span>:width <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.hover</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当鼠标移动到<code>div</code>上时,<code>div</code>宽度会增加200px.</p><p>我们通过<code>css</code>为宽度添加上了 2s 过渡效果。</p><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>在实现比较复杂的动画时,单纯使用过渡已经无法达到目的,可以选择使用<code>CSS</code>的<code>animation</code>属性来定义动画效果.</p><p>要想使用<code>animation</code>属性,我们必须先了解一下<code>CSS3</code>加入的<code>@keyframes</code>规则.</p><p><code>@keyframes</code>规则用于创建动画,可以从动画运动状态的帧来定义动画.</p><p>如下即<code>@kayframes</code>定义动画的例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> show</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> show /* Safari 与 Chrome */</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@keyframes</code>我们可以定义动画从开始到结束的样式变化 .</p><p>我们也可以通过定义动画效果的百分比状态来定义动画样式,如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> show</span><br><span class="line">&#123;</span><br><span class="line">    0%   &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    25%  &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">    50%  &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">color</span>: green;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> show /* Safari 与 Chrome */</span><br><span class="line">&#123;</span><br><span class="line">    0%   &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    25%  &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">    50%  &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">color</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>@keyframes</code>定义了动画效果之后,我们可以通过 <code>animation</code> 来将动画效果绑定到元素,如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>:show <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是CSS动画的简单介绍,另外CSS3还添加了<code>transform</code>属性,用于2D和3D转换,也被经常用来作为动画使用.</p><h3 id="CSS动画的回调函数"><a href="#CSS动画的回调函数" class="headerlink" title="CSS动画的回调函数"></a><code>CSS</code>动画的回调函数</h3><p>像以上的<code>CSS</code>动画,如果想使用回调函数来控制动画完成后的事务处理,是比较麻烦的.</p><h4 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h4><p>很多人使用<code>JS</code>的延时函数 <code>setTimtout()</code> 来解决<code>CSS</code>动画的回调问题,类似如下的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimtout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dosomething()  <span class="comment">//动画的回调函数</span></span><br><span class="line">&#125;, delaytime);      <span class="comment">//动画的持续时间</span></span><br></pre></td></tr></table></figure><p>但是这种方法由于并不是真正意义的回调,会造成以下几个问题:</p><ul><li>由于动画和延时函数并不一定是同一时间开始,导致函数和动画不同步</li><li>会造成JS代码和CSS代码相互关联耦合,修改和维护比较麻烦</li><li>存在多个动画需要回调时会造成代码混乱和臃肿</li><li>在多个动画效果同时结束时会引起回调函数冲突</li></ul><p>因此,不建议使用延时函数作为动画的回调函数.</p><h4 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a><code>JS</code>事件</h4><p>其实,<code>JS</code>提供了两个事件,可以完美的解决动画的回调函数问题,那就是 <code>transtionend</code>和 <code>animationend</code>,当过渡或动画完成时,即会触发对应的事件.</p><p>我们可以通过这两个事件轻松优雅的为动画添加回调函数.</p><p>具体用法如下:</p><ul><li><code>transtionend</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//myFunction即为动画回调函数</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDIV"</span>)</span><br><span class="line">        .addEventListener(<span class="string">"transitionend"</span>, myFunction);</span><br></pre></td></tr></table></figure><ul><li><code>animationend</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//myFunction即为回调函数</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDIV"</span>)</span><br><span class="line">        .addEventListener(<span class="string">"animationend"</span>, myFunction);</span><br></pre></td></tr></table></figure><p>我们通过以下这个例子来体验这两个事件的具体使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-id">#test</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span><span class="selector-pseudo">:width</span> 2<span class="selector-tag">s</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-transition</span><span class="selector-pseudo">:width</span> 2<span class="selector-tag">s</span>; <span class="comment">/* Safari */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-id">#test</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>)</span></span><br><span class="line"><span class="javascript">        .addEventListener(<span class="string">"transitionend"</span>, myFunction);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">this</span>.innerHTML = <span class="string">"回调函数触发div变为粉色"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JQuery方法"><a href="#JQuery方法" class="headerlink" title="JQuery方法"></a><code>JQuery</code>方法</h4><p>当然也可以使用Jquery库的动画回调函数,很简单,代码类似如下,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#item"</span>).animate(&#123;<span class="attr">height</span>:<span class="string">"200px"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上就是关于CSS动画回调函数的一些知识,希望对你有帮助.</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取短信验证码按钮的功能实现</title>
      <link href="/2017/05/16/%E8%8E%B7%E5%8F%96%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8C%89%E9%92%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/16/%E8%8E%B7%E5%8F%96%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8C%89%E9%92%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在web网页中,用户的一些行为,例如注册,登录,付款,修改密码等,都需要网站通过手机验证码来确认其行为身份,从而保证用户账户和网站自身的安全.</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>网页中的验证码一般都是采用点击获取的方式,在实现页面的获取手机验证码按钮时,着重需要考虑的是以下几点:</p><ul><li>保证在手机号码填写符合规范的情况下才可以点击按钮或者发送请求</li><li>点击按钮后需要在一段时间内禁用按钮,以防止用户不断点击产生大量请求</li><li>保证在网页刷新后验证码计时不会清零</li></ul><p>在这里我们主要来实现前两项效果.</p><p>保证网页刷新后验证码倒计时不清零需要使用<code>cookie</code>实现,为了避免篇幅过长,内容杂乱,不做赘述.</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>按钮可以用以下两种获取验证码的实现方法:</p><ol><li>当手机号输入格式正确时,按钮才处于可点击状态</li><li>按钮一直处于可点击状态,只是当手机号格式错误时,点击后会向用户提示错误,不向服务器发送请求</li></ol><p>这两种方法虽然代码可能不同,但是基本原理是差不多的,这里我们就只使用第一种方法来进行说明.</p><p>一般验证码的页面HTML结构类似如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>请输入手机号:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"phone"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取验证码"</span> <span class="attr">name</span>=<span class="string">"yzm"</span> <span class="attr">class</span>=<span class="string">"yzm"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面如图:</p><p><img src="https://img.catqu.com/images/2018/04/15/phonecode.png" alt="img"></p><p>在输入正确格式的手机号码后,获取验证码按钮取消禁用状态,可点击.</p><p>点击后按钮再次进入禁用状态并开始倒计时,倒计时完毕后再次进入可点击状态.</p><p>具体实现流程还是比较简单的.代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ordertime=<span class="number">20</span>   <span class="comment">//设置再次发送验证码等待时间</span></span><br><span class="line">    <span class="keyword">var</span> timeleft=ordertime</span><br><span class="line">    <span class="keyword">var</span> btn=$(<span class="string">".yzm"</span>)</span><br><span class="line">    <span class="keyword">var</span> phone=$(<span class="string">".phone"</span>)</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^1[0-9]&#123;10&#125;$/</span>;  <span class="comment">//电话号码的正则匹配式</span></span><br><span class="line"></span><br><span class="line">    phone.keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.test(phone.val()))&#123;</span><br><span class="line">          btn.removeAttr(<span class="string">"disabled"</span>)  <span class="comment">//当号码符合规则后发送验证码按钮可点击</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          btn.attr(<span class="string">"disabled"</span>,<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计时函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">timeCount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       timeleft-=<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> (timeleft&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           btn.val(timeleft+<span class="string">" 秒后重发"</span>);</span><br><span class="line">           setTimeout(timeCount,<span class="number">1000</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           btn.val(<span class="string">"重新发送"</span>);</span><br><span class="line">           timeleft=ordertime   <span class="comment">//重置等待时间</span></span><br><span class="line">           btn.removeAttr(<span class="string">"disabled"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件处理函数</span></span><br><span class="line">    btn.on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>,<span class="literal">true</span>); <span class="comment">//防止多次点击</span></span><br><span class="line">        <span class="comment">//此处可添加 ajax请求 向后台发送 获取验证码请求</span></span><br><span class="line">        timeCount();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ajax请求格式大概如下,可以用于向服务器请求发送验证码到制定手机</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">     　　type: <span class="string">"POST"</span>, <span class="comment">//用POST方式传输</span></span><br><span class="line">     　　dataType: <span class="string">"text"</span>, <span class="comment">//数据格式:JSON</span></span><br><span class="line">     　　url: <span class="string">'Login.ashx'</span>, <span class="comment">//目标地址</span></span><br><span class="line">    　　  data: <span class="string">"dealType="</span> + dealType +<span class="string">"&amp;uid="</span> + uid + <span class="string">"&amp;code="</span> + code, <span class="comment">//post携带数据</span></span><br><span class="line">    　　  error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, <span class="comment">//请求错误时的处理函数</span></span><br><span class="line">     　　success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; &#125;, <span class="comment">//请求成功时执行的函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>在实际开发中,除了上述的基本实现外，还需要有与服务器验证用户填写验证码是否正确的<code>ajax</code>请求, 使用<code>cookie</code>防止刷新页面导致倒计时失效的代码,实际开发的代码量会比上面多很多.</p><p>但是只要我们掌握基本原理和实现思路,就可以很容易的实现项目要求.</p><p>希望这篇文章对你有帮助.</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS库 Mock 使用指南</title>
      <link href="/2017/05/13/JS%E5%BA%93Mock%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2017/05/13/JS%E5%BA%93Mock%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h2 id="Mock简介"><a href="#Mock简介" class="headerlink" title="Mock简介"></a>Mock简介</h2><p><code>Mock.js</code> 是用于帮助前端攻城狮进行前后端分离开发的一个 JS 库。它能够无侵入的拦截 <code>ajax</code> 请求，生成随多种随机数据如文本，数字，布尔值，图片等。从而使前端攻城狮能够方便快捷的处理需要后端接口返回数据情况下的前端开发。</p><p><code>Mock</code> 可以通过 Node 方便的安装，只需要以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><p>​    然后就可以在文件中通过 <code>require</code> 使用 Mock 库了。</p><p>​    更简单的方法是直接在 HTML 文件中引入 mock.js 文件。类似如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mock-mock"><a href="#Mock-mock" class="headerlink" title="Mock.mock()"></a>Mock.mock()</h2><p>调用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(rurl?,rtype?,template|<span class="function"><span class="keyword">function</span>(<span class="params">options</span>))</span></span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><p><code>rurl</code></p><p>可选。</p><p>表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。</p></li><li><p>rtype</p><p>可选。</p><p>表示需要拦截的 Ajax 请求类型。如 GET，POST，PUT，DELETE等。</p></li><li><p>template</p><p>可选。</p><p>表示数据模板，可以是对象或字符串。</p></li><li><p>function(options)</p><p>可选。</p><p>表示用于生成响应数据的函数。<code>options</code>    指向本次请求的 Ajax 选项集，含有 <code>url</code>,<code>type</code>,<code>body</code>三个属性。</p></li></ul><hr><p>根据所选参数的不同，主要有以下几种调用形式：</p><ul><li><p><code>Mock.mock(template)</code></p><p>根据数据模板生成模拟数据，并直接返回。</p></li><li><p><code>Mock.mock(rurl,template)</code></p><p>记录数据模板。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p></li><li><p><code>Mock.mock(rurl,function( options ))</code></p><p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code>的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，函数执行结果作为响应数据返回。</p></li><li><p><code>Mock.mock(rulr,rtype,function( options ))</code></p><p>记录用于生成响应数据的函数，当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p></li></ul><h2 id="数据模板定义规范"><a href="#数据模板定义规范" class="headerlink" title="数据模板定义规范"></a>数据模板定义规范</h2><p><strong>数据模板的每个属性由三部分构成：属性名，生成规则，属性值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性名   name</span></span><br><span class="line"><span class="comment">// 生成规则 rule</span></span><br><span class="line"><span class="comment">// 属性值   value</span></span><br><span class="line"><span class="string">'name|rule'</span>: value</span><br></pre></td></tr></table></figure><ul><li>生成规则是可选的。</li><li>生成规则有 7 种格式：<ol><li><code>&#39;name|min-max&#39;: value</code></li><li><code>&#39;name|count&#39;: value</code></li><li><code>&#39;name|min-max.dmin-dmax&#39;: value</code></li><li><code>&#39;name|min-max.dcount&#39;: value</code></li><li><code>&#39;name|count.dmin-dmax&#39;: value</code></li><li><code>&#39;name|count.dcount&#39;: value</code></li><li><code>&#39;name|+step&#39;: value</code></li></ol></li></ul><ul><li><p><em>属性值</em> 中可以含有 <code>@占位符</code>。</p></li><li><p><em>属性值</em> 还指定了最终值的初始值和类型。</p></li><li><p>#####生成规则的 含义 需要依赖 属性值的类型才能确定。</p></li></ul><p>生成规则和示例</p><p><strong>属性值是字符串 String</strong></p><ol><li><p><code>&#39;name|count&#39;: string</code>    </p><p>​    通过重复 <code>string</code> 生成一个字符串，重复次数等于 <code>count</code>。</p></li><li><p><code>&#39;name|min-max&#39;: string</code></p><p>通过重复 <code>string</code> 生成一个字符串，重复次数大于等于 <code>min</code>，小于等于 <code>max</code>。</p></li></ol><p><strong>属性值是对象 Object</strong></p><ol><li><p><code>&#39;name|count&#39;: object</code></p><p>从属性值 <code>object</code> 中随机选取 <code>count</code> 个属性。</p></li><li><p><code>&#39;name|min-max&#39;: object</code></p><p>从属性值 <code>object</code> 中随机选取 <code>min</code> 到 <code>max</code> 个属性。</p></li></ol><p><strong>属性值是布尔型 Boolean</strong></p><ol><li><p><code>&#39;name|1&#39;: boolean</code></p><p>随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率同样是 1/2。</p></li><li><p><code>&#39;name|min-max&#39;: value</code></p><p>随机生成一个布尔值，值为 <code>value</code> 的概率是 <code>min / (min + max)</code>，值为 <code>!value</code> 的概率是 <code>max / (min + max)</code>。</p></li></ol><p><strong>属性值是数字 Number</strong></p><ol><li><p><code>&#39;name|+1&#39;: number</code></p><p>属性值自动加 1，初始值为 <code>number</code>。</p></li><li><p><code>&#39;name|min-max&#39;: number</code></p><p>生成一个大于等于 <code>min</code>、小于等于 <code>max</code> 的整数，属性值 <code>number</code> 只是用来确定类型。</p></li><li><p><code>&#39;name|min-max.dmin-dmax&#39;: number</code></p><p>生成一个浮点数，整数部分大于等于 <code>min</code>、小于等于 <code>max</code>，小数部分保留 <code>dmin</code> 到 <code>dmax</code>位。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'number1|1-100.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number2|123.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number3|123.3'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number4|123.10'</span>: <span class="number">1.123</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"number1"</span>: <span class="number">12.92</span>,</span><br><span class="line">    <span class="string">"number2"</span>: <span class="number">123.51</span>,</span><br><span class="line">    <span class="string">"number3"</span>: <span class="number">123.777</span>,</span><br><span class="line">    <span class="string">"number4"</span>: <span class="number">123.1231091814</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值是数组 Array</strong></p><ol><li><p><code>&#39;name|1&#39;: array</code></p><p>从属性值 <code>array</code> 中随机选取 1 个元素，作为最终值。</p></li><li><p><code>&#39;name|+1&#39;: array</code></p><p>从属性值 <code>array</code> 中顺序选取 1 个元素，作为最终值。</p></li><li><p><code>&#39;name|min-max&#39;: array</code></p><p>通过重复属性值 <code>array</code> 生成一个新数组，重复次数大于等于 <code>min</code>，小于等于 <code>max</code>。</p></li><li><p><code>&#39;name|count&#39;: array</code></p><p>通过重复属性值 <code>array</code> 生成一个新数组，重复次数为 <code>count</code>。</p></li></ol><p><strong>属性值是函数 Function</strong></p><ol><li><p><code>&#39;name&#39;: function</code></p><p>执行函数 <code>function</code>，取其返回值作为最终的属性值，函数的上下文为属性 <code>&#39;name&#39;</code> 所在的对象。</p></li></ol><p><strong>属性值是正则表达式 RegExp</strong></p><ol><li><p><code>&#39;name&#39;: regexp</code></p><p>根据正则表达式 <code>regexp</code> 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'regexp1'</span>: <span class="regexp">/[a-z][A-Z][0-9]/</span>,</span><br><span class="line">    <span class="string">'regexp2'</span>: <span class="regexp">/\w\W\s\S\d\D/</span>,</span><br><span class="line">    <span class="string">'regexp3'</span>: <span class="regexp">/\d&#123;5,10&#125;/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"regexp1"</span>: <span class="string">"pJ7"</span>,</span><br><span class="line">    <span class="string">"regexp2"</span>: <span class="string">"F)\fp1G"</span>,</span><br><span class="line">    <span class="string">"regexp3"</span>: <span class="string">"561659409"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP的PDO基本使用</title>
      <link href="/2017/04/22/PHP%E7%9A%84PDO%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/04/22/PHP%E7%9A%84PDO%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    PDO是一个基于面向对象编程思想封装的，使用 C 开发的数据库抽象层。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>​    1.开启 PDO 驱动（扩展）</p><p>​    2.实例化 PDO 类，然后可以使用类的属性和方法操作数据库。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$dsc = <span class="string">'mysql:host=localhost;dbname=mysql_text'</span>;</span><br><span class="line"></span><br><span class="line">$user = <span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">$pass = <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsc,$user,$pass);</span><br><span class="line"><span class="comment">//实例化一个类的时候，会自动的先调用__construct()构造函数</span></span><br></pre></td></tr></table></figure><h4 id="抽象类PDO的方法"><a href="#抽象类PDO的方法" class="headerlink" title="抽象类PDO的方法"></a>抽象类PDO的方法</h4><h5 id="PDO-exec"><a href="#PDO-exec" class="headerlink" title="PDO:exec( )"></a><code>PDO:exec( )</code></h5><p>​    执行增删改语句的方法。功返回影响的条数，失败返回false</p><h5 id="PDO-query"><a href="#PDO-query" class="headerlink" title="PDO:query( )"></a><code>PDO:query( )</code></h5><p>​    执行查询语句的方法。成功返回 <code>PDOStatement</code> 结果集对象，失败返回  <code>false</code></p><h5 id="PDO-prepare"><a href="#PDO-prepare" class="headerlink" title="PDO:prepare( )"></a><code>PDO:prepare( )</code></h5><p>​    执行预处理语句的方法。</p><p>​    预处理的步骤：</p><p>​         一. 将 <code>sql</code> 语句的数据部分和非数据部分分离</p><p>​         二. 使用 <code>prepare( )</code> 将非数据部分编译</p><pre><code>三. 使用` bindparam( ) `将数据绑定到编译结果上</code></pre><p>​     四. 使用<code>execute( )</code> 执行编译结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预编译：prepare();参数是不带数据的sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先将sql语句中的数据部分用占位符代替 :占位符名称</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">'insert intogoods values(null,:name,:price,:number)'</span>;</span><br><span class="line"></span><br><span class="line">$smt = $pdo-&gt;prepare($sql);  <span class="comment">//返回一个PDOStament 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定数据 PDOStament对象的bindParam()来绑定参数：占位符，实际数据</span></span><br><span class="line"></span><br><span class="line">$goods_name= <span class="string">'surface'</span>;</span><br><span class="line"></span><br><span class="line">$goods_price= <span class="string">'3500'</span>;</span><br><span class="line"></span><br><span class="line">$goods_num= <span class="string">'41'</span>;</span><br><span class="line"></span><br><span class="line">$smt-&gt;bindParam(<span class="string">':name'</span>,$goods_name);</span><br><span class="line"></span><br><span class="line">$smt-&gt;bindParam(<span class="string">':price'</span>,$goods_price);</span><br><span class="line"></span><br><span class="line">$smt-&gt;bindParam(<span class="string">':number'</span>,$goods_num);</span><br><span class="line"></span><br><span class="line">$smt-&gt;execute()；</span><br></pre></td></tr></table></figure><h4 id="抽象类-PDOstatement-的方法"><a href="#抽象类-PDOstatement-的方法" class="headerlink" title="抽象类 PDOstatement 的方法"></a>抽象类 PDOstatement 的方法</h4><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch( )"></a>fetch( )</h5><p>用于获取结果集中的下一行数据。</p><p>方法语法格式如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = <span class="number">0</span> ]]] )</span><br></pre></td></tr></table></figure><p>参数 <code>fetch_style</code>：控制结果集的返回方式，其中可选择的值如下表：</p><table><thead><tr><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>PDO::FETCH_ASSOC</td><td>关联数组形式。</td></tr><tr><td>PDO::FETCH_NUM</td><td>数字索引数组形式。</td></tr><tr><td>PDO::FETCH_BOTH</td><td>两者数组形式都有，这是默认的。</td></tr><tr><td>PDO::FETCH_OBJ</td><td>按照对象的形式，类似于以前的mysql_fetch_object()函数。</td></tr><tr><td>PDO::FETCH_BOUND</td><td>以布尔值的形式返回结果，同时将获取的列值赋给bindParam()方法中指定的变量。</td></tr><tr><td>PDO::FETCH_LAZY</td><td>以关联数组、数字索引数组和对象3种形式返回结果。</td></tr></tbody></table><p>参数 <code>cursor_orientation</code>：<code>PDOStatement</code>对象的一个滚动游标，可以获取指定的一行。</p><p>参数 <code>cursor_offset</code>：游标的偏移量。</p><h5 id="fetchAll"><a href="#fetchAll" class="headerlink" title="fetchAll( )"></a>fetchAll( )</h5><p> 获取结果集中的所有行，并赋给返回的数组(二维)</p><p><code>fetchAll()</code>方法的语法格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, <span class="keyword">array</span> $ctor_args = <span class="keyword">array</span>() ]]] )</span><br></pre></td></tr></table></figure><p>参数 <code>fetch_style</code>：控制结果集中数据的返回方式，可选值如下表：</p><table><thead><tr><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>PDO::FETCH_ASSOC</td><td>关联数组形式</td></tr><tr><td>PDO::FETCH_NUM</td><td>数字索引数组形式</td></tr><tr><td>PDO::FETCH_BOTH</td><td>两者数组形式都有，这是默认的</td></tr><tr><td>PDO::FETCH_OBJ</td><td>按照对象的形式，类似于以前的mysql_fetch_object()</td></tr><tr><td>PDO::FETCH_BOUND</td><td>以布尔值的形式返回结果，同时将获取的列值赋给bindParam()方法中指定的变量</td></tr><tr><td>PDO::FETCH_LAZY</td><td>以关联数组、数字索引数组和对象3种形式返回结果。</td></tr></tbody></table><p>参数 <code>column_index</code>：字段的索引！</p><h5 id="fetchColumn"><a href="#fetchColumn" class="headerlink" title="fetchColumn( )"></a>fetchColumn( )</h5><p>获取结果集中下一行指定列的值，从结果集中的下一行返回单独的一列</p><p><code>fetchColumn()</code>方法的语法格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string PDOStatement::fetchColumn ([ int $column_number = <span class="number">0</span> ] )</span><br></pre></td></tr></table></figure><p>从结果集中的下一行返回单独的一列，如果无，则返回 FALSE 。</p><p>可选参数 <code>column_number</code>设置行中列的索引值，该值从0开始，如果省略该参数那么就会从第 1 列开始取值。</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 语言 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 爬虫小例子</title>
      <link href="/2017/04/01/Python-%E7%88%AC%E8%99%AB%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
      <url>/2017/04/01/Python-%E7%88%AC%E8%99%AB%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>这道题是一道爬虫练习题，需要爬链接<a href="http://tieba.baidu.com/p/2166231880" target="_blank" rel="noopener">http://tieba.baidu.com/p/2166231880</a>里的所有妹子图片，点进链接看一下，这位妹子是日本著名性感女演员——杉本由美，^_^好漂亮啊，赶紧开始爬吧。</p><p>以下就是我的爬虫步骤：</p><h1 id="爬取图片链接"><a href="#爬取图片链接" class="headerlink" title="爬取图片链接"></a>爬取图片链接</h1><p>虽然<code>request</code>和<code>beautifulsoup</code>模块方便又好用，但是我还是决定使用传统的<code>urllib</code>和<code>urllib2</code>模块，毕竟对这两个模块熟悉之后，就能基本明白爬虫的原理和实现啦。</p><p>首先是导入模块，除了前面提到的两个模块，我们还要导入<code>re</code>模块，使用正则表达式来匹配我们想要的内容。</p><p>导入模块之后，就可以获取页面了。步骤如下：</p><ol><li><p>使用<code>urllib2.Requst( )</code>得到 <code>request</code> 对象。</p><p>这个对象是用于打开一个网页的请求，可以方便的携带一些请求需要的信息，如<code>headers</code>，<code>cookie</code>等数据。</p><p>因为我们打开的网页——百度贴吧不需要登录就可以浏览页面，所以<code>request</code>对象只需要<code>headers</code>对象就可以了。</p></li><li><p>使用<code>urllib2.urlopen( )</code>得到<code>response</code>对象。</p><p>这个对象是爬虫页面的对象，与文件对象类似，你可以使用<code>read( )</code>来得到<code>response</code>页面对象的源码。</p></li><li><p>使用正则匹配要爬的资源链接</p><p>不会正则的同学，可以学一下，很快，一个下午就能学会正则基础啦，至少爬虫使用的正则你就会写啦。我们想要得到页面的所有图片的链接，那就在浏览器中使用<code>CTRL+ALT+c</code>来打开页面查看页面的源码，也就是页面的<code>HTML</code>文本。</p><p>找一下图片的标签在哪里，发现所有要下载的图片标签<code>&lt;img&gt;</code>的类都是<code>BDE_image</code>，标签格式都一样，但是帖子中还有广告楼层里面的图片标签也是也是这个类。我可不想下载下来之后浏览美女图片，突然跳出来一个广告图片。</p><p>那再仔细看一下页面，发现只要点击只看楼主选项，广告楼层就不见了，同时页面url后面多了几个字符是<code>?see_lz=1</code> 。好，那我们直接在我们的请求url后加上这几个字符就行啦，至于其他的楼层，没有了更好^_^，反正其他楼层都是灌水。</p><p>ok，那就开始匹配我们想要的链接吧。使用<code>re.compile( )</code>来编译匹配模式，再使用<code>re.findall( )</code>得到所有的图片的src属性，也就是链接的列表。</p><p>这就完成了我们爬虫最重要的一步啦。</p></li></ol><h1 id="下载图片到本机"><a href="#下载图片到本机" class="headerlink" title="下载图片到本机"></a>下载图片到本机</h1><p>下载链接要使用<code>urllib.urlretrieve( )</code>,这个函数可以将你的链接资源下载到本地，如果指定目录的话会下载到目录，否则下载为临时文件。</p><p>那就直接迭代我们第一步得到的图片链接列表，一个个全下载下来吧。</p><p>到这里，爬这个页面的小练习，就完成啦。</p><p>我的代码在这里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib,urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#头信息</span></span><br><span class="line">header=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:44.0) Gecko/20100101 Firefox/44.0'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_url</span><span class="params">(page_url)</span>:</span><span class="comment">#得到页面所有图片的链接</span></span><br><span class="line"></span><br><span class="line">    request=urllib2.Request(page_url,headers=header) <span class="comment">#生成request对象</span></span><br><span class="line">    reference=urllib2.urlopen(request)    <span class="comment">#获取页面对象</span></span><br><span class="line">    page=reference.read()            <span class="comment">#读取页面</span></span><br><span class="line"></span><br><span class="line">    regex=re.compile(<span class="string">r'&lt;img.*?class="BDE_Image" src="(.*?)".*?&gt;'</span>) <span class="comment">#编译正则匹配模式字符串</span></span><br><span class="line">    img_url_list=re.findall(regex,page)       <span class="comment">#匹配所有图片链接生成列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img_url_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span><span class="params">(url_list,img_path)</span>:</span>  <span class="comment">#从图片链接下载图片并存放在指定文件夹</span></span><br><span class="line">    <span class="keyword">for</span> img_url <span class="keyword">in</span> url_list:</span><br><span class="line">        urllib.urlretrieve(img_url,<span class="string">'%s/%s.jpg'</span>%(img_path,img_url[<span class="number">-8</span>:<span class="number">-5</span>])) <span class="comment">#下载图片</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://tieba.baidu.com/p/2166231880?see_lz=1'</span> <span class="comment">#爬虫页面</span></span><br><span class="line">path=<span class="string">'/home/afei/picture'</span>  <span class="comment">#存放路径</span></span><br><span class="line">urllist=get_img_url(url)</span><br><span class="line">download_img(urllist,path)</span><br></pre></td></tr></table></figure><p> wow，杉本由美真的好漂亮啊，有鼻子有眼的。</p><p><img src="https://s1.ax1x.com/2018/04/15/CZNifP.png" alt="img"></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的MySQLdb模块在linux环境下的安装</title>
      <link href="/2017/03/29/Python%E7%9A%84MySQLdb%E6%A8%A1%E5%9D%97%E5%9C%A8linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/03/29/Python%E7%9A%84MySQLdb%E6%A8%A1%E5%9D%97%E5%9C%A8linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>开始学习<em>python</em>数据库编程后，在了解了基本概念，打算上手试验一下时，卡在了<em>MySQLdb</em>包的安装上，折腾了半天才解决。记录一下我在<em>linux</em>中安装此包遇到的问题。系统是<em>ubuntn15.04</em>。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>第一个问题是<em>pycharm</em>软件的模块安装功能<em>Project Interpreter</em>无法自动下载安装<em>MYSQLdb</em>包，显示</p><p><code>Error occurred when installling package</code></p><p>那没办法了，只好手动下载了。MYSQLdb包linux系统的下载的地址是</p><p><a href="http://sourceforge.net/projects/mysql-python/file/mysql-python/" target="_blank" rel="noopener">http://sourceforge.net/projects/mysql-python/file/mysql-python/</a></p><p>在页面内选择你想要安装的版本下载即可，我下载的版本是<code>1.2.4b4</code></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载之后，打开终端，切换到自己的下载文件目录，在我的电脑上是目录/home/hai/download，之后解压下载的文件，即在终端输入:</p><p><code>tar xfz MySQL-python-1.2.4b4.tar.gz</code></p></li><li><p>使用命令</p><p><code>cd MySQL-python-1.2.4b4</code></p><p>切换到解压后的目录。</p></li><li><p>编译MYSQLdb包</p><p>输入命令 </p><p><code>python setup.py build</code></p><p>此时遇到问题，报错信息是</p><p><code>mysql_config not found</code></p><p>google之后发现要修改<em>MYSQLdb</em>解压之后目录中的 <em>setup_posix.py</em> 第26行，此行的内容是</p><p><code>mysql_config.path = &quot;mysql_config&quot;</code></p><p><code>mysql_config</code>是<em>mysql</em>安装目录中的一个文件的名称，需要将26行变量的值改为此文件的绝对路径。<br>使用 <code>whereis mysql</code></p><p>查看数据库安装目录，进入安装目录。但是发现安装目录中并没有<code>mysql_config</code>文件，啊，好气啊。<br>再继续 <em>google</em>，发现是没有安装<code>libmysqlclient-dev</code>，那就安装！使用命令：</p><p>​    <code>sudo apt-get install libmysqlclient-dev</code></p><p>安装这个东西，之后使用命令：</p><p>​    <code>file -name mysql_config</code></p><p>查看<code>mysql_config</code>的路径，ok，有了。</p><p>将<code>setup_posix.py</code>文件修改后，再使用<code>python setup-python-1.2.4b4</code>安装，又遇到问题了，错误信息：</p><p>​    <code>error: command &#39;i686-linux-gnu-gcc&#39; failed with exit status 1</code></p><p>啊啊啊。<br>继续<em>google</em>，原来是没有安装<code>python-dev</code>，好的，那就安装.使用命令：</p><p>​    <code>sudo apt-get install python-dev</code></p><p>安装完成后，再使用输入了N次的命令<code>python setup.py build</code>,好，终于没有报错了，现在就差一步就安装成功了。</p></li><li><p>输入命令<code>sudo python setup.py install</code></p><p>好，终于安装上了，在<code>python</code>中实验一下，导入一下<em>MYSQLdb</em>模块，</p><p>​    <code>import MYSQLdb</code></p><p>没有消息，恩，没有消息就是最好的消息，安装成功！</p></li></ol><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p>  另外在<em>google</em>过程中，还看到了好几个错误报警，虽然我没有遇到，还是在这里提一下。</p><p>  第一个是如果没有安装<em>steuptools</em>，在第三步编译时会报错<em>ImportError: No module named setuptools</em>，那就去安装<em>setuptools</em>，至于<em>setuptools</em>的安装，那就是另外的问题了，就不多说了。<br>  第二个是关于<em>python.h</em>文件报错，这是<em>python</em>版本的问题，需要处理一下<em>python</em>版本，也不再多说。</p><p>  第三个是/usr/bin/ld:cannot find -lmysqlclient_r报错，这是由于配置文件没有生效。找到<em>mysql</em>的配置文件，使用<code>:ldconfig</code>命令刷新使其生效即可。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL 的基本语法</title>
      <link href="/2017/03/22/SQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/03/22/SQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="SELECT-选取"><a href="#SELECT-选取" class="headerlink" title="SELECT 选取"></a>SELECT 选取</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> web; //选择对应列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web;      //选择所有列</span><br></pre></td></tr></table></figure><h4 id="DISTINCT-去重"><a href="#DISTINCT-去重" class="headerlink" title="DISTINCT 去重"></a>DISTINCT 去重</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> country <span class="keyword">FROM</span> web; //返回唯一不同的值（即去重）;</span><br></pre></td></tr></table></figure><h4 id="WHERE-限定条件"><a href="#WHERE-限定条件" class="headerlink" title="WHERE 限定条件"></a>WHERE 限定条件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> country=<span class="string">'CN'</span>; //选取满足条件的记录</span><br></pre></td></tr></table></figure><blockquote><p>WHERE 字句中可以使用的运算符</p><p>=   &gt;  &lt;   &gt;=   &lt;=  !=(&lt;&gt;)</p><p>AND            同时满足条件</p><p>OR               满足其中一个条件</p><p>NOT             不满足条件</p><p>BETWEEN   在某个范围内 (可为数字值范围或字母表字母范围)(mysql  包含边界)</p><p>LIKE             符合某种模式</p><p>IN                 是多个可能值其中的一个</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*AND,OR,NOT 逻辑运算*：</span><br><span class="line">//优先级 ：（） NOT AND OR</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> sal&gt;<span class="number">2000</span> <span class="keyword">AND</span> sal&lt;<span class="number">3000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> sal&gt;<span class="number">2000</span> <span class="keyword">OR</span> sal&lt;<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> <span class="keyword">NOT</span> sal&gt;<span class="number">1500</span>;</span><br><span class="line"></span><br><span class="line">*IS NULL 空值判断*：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> sal <span class="keyword">IS</span> <span class="literal">NULL</span>；</span><br><span class="line"></span><br><span class="line">*<span class="keyword">BETWEEN</span> <span class="keyword">AND</span> 在两值之间*</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> sal <span class="keyword">BETWEEN</span> <span class="number">1500</span> <span class="keyword">AND</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">*IN  多个值中的一个*</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> sal <span class="keyword">IN</span> (<span class="number">5000</span>,<span class="number">3000</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">*LIKE 模糊查询*</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'M%'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>模糊查询</p><p>% 表示多个字值，</p><p>M%  表示模糊查询以 M 开头的记录</p><p>%M% 表示包含 M 的所有内容</p><p>%M_ 表示模糊查询 M在倒数第二位的所有内容</p><p>_下划线表示一个字符;</p><p>REGEXP 或 NOT REGEXP 运算符来操作正则表达式（RLIKE &amp; NOT RLIKE也可以) </p><p>[charlist] 字符列中的任何单一字符</p><p>[!charlist] 不在字符列中的任何单一字符</p></blockquote><h4 id="ORDER-BY-排序"><a href="#ORDER-BY-排序" class="headerlink" title="ORDER BY 排序"></a>ORDER BY 排序</h4><blockquote><p>按照一个列或多个列对结果集进行排序。</p><p>默认 ASC 升序，可以使用 DESC 进行降序排列</p><p>多个列根据顺序排序，从前到后。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;  //默认升序排序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>;//降序排列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>,sal; //先根据 id排序，id 相同的再根据 sal 排序。</span><br></pre></td></tr></table></figure><h4 id="SELECT-TOP-限定返回数目"><a href="#SELECT-TOP-限定返回数目" class="headerlink" title="SELECT TOP 限定返回数目"></a>SELECT TOP 限定返回数目</h4><blockquote><p>select top 用于规定要返回的记录数目</p><p>oracle 不支持SELECT TOP，他使用 ORDER BY 加 限定 ROWNUM</p><p>mysql 和 postgres 不支持 SELECT TOP，他们使用 limit。</p></blockquote><h5 id="limit-限定返回数目"><a href="#limit-限定返回数目" class="headerlink" title="limit 限定返回数目"></a>limit 限定返回数目</h5><blockquote><blockquote><p>可给定一个或两个参数。</p><p>一个参数表示返回的最大记录行数。</p><p>两个参数，第一个参数表示偏移行数，第二个参数表示返回行数</p></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">LIMIT</span> <span class="number">10</span>; //限定返回前10行</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">10</span>; //限定返回 6-15行</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> web <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">-1</span>; //限定返回第 6 行以后的所有行</span><br></pre></td></tr></table></figure><h3 id="INSERT-INTO-插入"><a href="#INSERT-INTO-插入" class="headerlink" title="INSERT INTO 插入"></a>INSERT INTO 插入</h3><blockquote><p>向表中插入新纪录</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*两种插入语句编写形式</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> web <span class="keyword">VALUES</span> (<span class="string">'goo'</span>,<span class="string">'www'</span>,<span class="number">144</span>,<span class="string">'CN'</span>);//只提供插入值的形式（需要列出行的每一列数据）</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> web (<span class="keyword">name</span>,<span class="keyword">url</span>,alexa,country) <span class="keyword">VALUES</span> (<span class="string">'goo'</span>,<span class="string">'www'</span>,<span class="number">1444</span>,<span class="string">'CN'</span>);//提供列名和插入值的形式</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h3><blockquote><p>更新表中已存在的记录</p><p>如果省略了 UPDATE 的 WHERE 子句，表中对应的所有字段都会被更新。因此在使用 无 WHERE 子句的 UPDATE 时 应千万慎重。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> web <span class="keyword">SET</span> sal=<span class="string">"500"</span>,country=<span class="string">"USA"</span>;//不带WHERE字句的 UPDATAE 语句，会更新所有的 sal 和 country 字段，使用时需要十分小心</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> web <span class="keyword">SET</span> sal=<span class="string">'500'</span>,country=<span class="string">"USA"</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">3</span>  //带 <span class="keyword">WHERE</span> 子句的 <span class="keyword">UPDATE</span> 语句，只更新对应行字段</span><br></pre></td></tr></table></figure><blockquote></blockquote><h3 id="DELETE-删除"><a href="#DELETE-删除" class="headerlink" title="DELETE 删除"></a>DELETE 删除</h3><blockquote><p>删除表中的记录</p><p>如果省略了 DELETE 的 WHERE 子句，表中对应的所有字段都会被删除。因此在使用 无 WHERE 子句的 DELETE 时 应千万慎重。</p><p>删除无法还原，因此应慎重</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> web；//删除表中所有的行。表结构，属性，索引会保持不变</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> web <span class="keyword">where</span> sal = <span class="number">6000</span> ; //删除对应的行</span><br></pre></td></tr></table></figure><h3 id="AS-别名"><a href="#AS-别名" class="headerlink" title="AS 别名"></a>AS 别名</h3><blockquote><p>为表名称和列名称指定别名，提高可读性</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//为列使用别名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">AS</span> n <span class="keyword">FROM</span> web;</span><br><span class="line"></span><br><span class="line">//将多列聚合到一起并使用别名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span> (<span class="string">'name'</span>,<span class="string">','</span>,<span class="string">'url'</span>,<span class="string">','</span>,<span class="string">'sal'</span>) <span class="keyword">AS</span> site_info <span class="keyword">FROM</span> web;</span><br><span class="line"></span><br><span class="line">//为表使用别名</span><br><span class="line"><span class="keyword">SELECT</span> w.name,a.date <span class="keyword">FROM</span> web <span class="keyword">AS</span> w,access_log <span class="keyword">AS</span> a <span class="keyword">WHERE</span> a.site_id = w.id;</span><br></pre></td></tr></table></figure><h3 id="JOIN-结合来自多个表的行"><a href="#JOIN-结合来自多个表的行" class="headerlink" title="JOIN 结合来自多个表的行"></a>JOIN 结合来自多个表的行</h3><blockquote><p>JOIN 分为 INNER JOIN，LEFT JOIN ，RIGHT JOIN，FULL  JOIN。</p><p>注意合并条件需要使用关键字 ON 而不是 WHERE </p><p>INNER   JOIN：返回完全匹配的行 （等同于 JOIN）</p><p>LEFT   JOIN：返回左表所有行，其中 在 右表 无匹配的行中对应右表值为 NULL。</p><p>RIGHT   JOIN ：返回右表所有的行，其中在 左表 无匹配的行对应左表值为NULL。</p><p>FULL  JOIN：返回左右两表所有的行，在另一表中无匹配的行 对应表值为NULL (MYSQL 不支持)</p></blockquote><h3 id="UNION-合并结果"><a href="#UNION-合并结果" class="headerlink" title="UNION 合并结果"></a>UNION 合并结果</h3><blockquote><p>UNION 用于 合并两个或多个 SELECT 语句的结果集。两个结果集必须有相同数量的列，列数据类型相似且顺序相同。</p><p>UNION操作符选取不同的值，UNION ALL 允许重复的值。</p><p>结果集中的列名总是等于 第一个 SELECT 语句中的列名</p><p>只能在最后使用一个ORDER BY 命令，也就是合并查询结果后再进行排序，不能写</p></blockquote>]]></content>
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebPack 学习笔记</title>
      <link href="/2017/03/22/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/03/22/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li>模块化：将复杂的程序细化为很多模块化的文件</li><li>拓展语言的编译：如使用TS开发，并将其转换为浏览器可以识别的JS</li><li><code>Scss</code>，<code>less</code> 等 <code>CSS</code> 的预处理器</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack  //全局安装</span><br><span class="line">npm install --save-dev webpack //安装到项目目录</span><br></pre></td></tr></table></figure><h4 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h4><p>​    webpack 的几乎所有功能都可以在命令行完成，但是比较繁琐和易出错，因此一般使用配置文件完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> &#123; entry file &#125; 填写入口文件的路径</span><br><span class="line"><span class="meta">#</span> &#123; destination for bundled file &#125; 填写打包文件的路径</span><br><span class="line"><span class="meta">#</span> 填写路径时不需要添加 &#123; &#125;</span><br><span class="line">webpack &#123;entry file&#125; &#123;destination for bundled file&#125;</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​    配置文件一般为 <code>webpack.config.js</code> ,其实是一个简单的 <code>JavaScript</code> 模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span> <span class="comment">//入口文件，以此为起点构建依赖图</span></span><br><span class="line">    output:&#123;</span><br><span class="line">    path: __dirname + <span class="string">"／public"</span>, <span class="comment">//打包后文件的保存位置</span></span><br><span class="line">    filename:<span class="string">"bundle.js"</span> <span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“__dirname” 是 node.js 中的一个全局变量，指向当前执行脚本所在的目录</p></blockquote><blockquote><p>使用配置文件后，只需要在命令行中使用 webpack 即可执行配置文件中的打包操作。</p><p>也可以将 webpack 使用 npm 引导执行，对 npm 的 package.json 中的 script 对象进行设置即可。</p></blockquote><h4 id="生成-Source-Maps"><a href="#生成-Source-Maps" class="headerlink" title="生成 Source Maps"></a>生成 Source Maps</h4><p>​    <code>Source Maps</code> 可以解决打包后文件的调试问题，使我们更快的找到 出问题的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool:<span class="string">'eval-source-map'</span>, <span class="comment">//有多种模式，各模式存在打包效率和打包后文件执行问题的优劣</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一般情况下，cheap-module-eval-source-map都是比较好的选择</span></span><br></pre></td></tr></table></figure><p>配置项：    </p><ul><li><code>eval</code>： 使用eval包裹模块代码，不产生 <code>.map</code> 文件</li><li><code>source-map</code>： 产生<code>.map</code>文件</li><li><code>cheap</code>： 不包含列信息，即只能定位到行，也不包含<code>loader</code>的<code>sourcemap</code></li><li><code>module</code>： 包含<code>loader</code>的<code>sourcemap</code>（比如<code>jsx to js</code> ，<code>babel</code>的<code>sourcemap</code>）</li><li><p><code>inline</code>： 将<code>.map</code>作为DataURI嵌入，不单独生成<code>.map</code>文件（这个配置项比较少见</p><p>   ​    <code>eval</code>性能最好，<code>source-map</code>性能最低，</p></li></ul><h4 id="构建本地服务器"><a href="#构建本地服务器" class="headerlink" title="构建本地服务器"></a>构建本地服务器</h4><h5 id="安装-webpack-dev-server"><a href="#安装-webpack-dev-server" class="headerlink" title="安装 webpack-dev-server"></a>安装 <code>webpack-dev-server</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><h5 id="在配置文件中添加配置"><a href="#在配置文件中添加配置" class="headerlink" title="在配置文件中添加配置"></a>在配置文件中添加配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:<span class="string">"./public"</span>,  <span class="comment">//本地服务器要加载的页面所在位置</span></span><br><span class="line">        port:<span class="string">"8081"</span>, <span class="comment">//默认 8080</span></span><br><span class="line">        historyApiFallback:<span class="literal">true</span>, <span class="comment">//在开发单页面应用时，可使所有路径都指向index.html</span></span><br><span class="line">        inline：<span class="literal">true</span><span class="comment">//源文件变化时自动刷新页面</span></span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server --open</span><br></pre></td></tr></table></figure><blockquote><p>也可将此命令加入 npm 的 package.json 的 script 对象中，引导启动。</p></blockquote><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>​    通过使用不同的 <code>loader</code>, <code>webpack</code> 有能力调用外部的脚本和工具，实现不同格式的文件的处理。例如将 <code>scss</code> 转换为 <code>css</code>，将 <code>ES6</code>，<code>ES7</code>转换为 <code>ES5</code>，将 <code>React</code> 的 <code>JSX</code> 文件转换为 <code>JS</code> 文件。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>​    <code>Loader</code>需要单独安装并且需要在 <code>webpack.config.js</code> 中的 <code>modules</code> 中配置。</p><p>配置主要包括</p><ul><li><code>test</code> : 一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li><li><code>loader</code>： loader 的名称（必须）</li><li><code>include/excluder</code>: 手动添加必须处理的文件／屏蔽不必要的文件 （可选）</li><li><code>query</code> : 为 <code>loaders</code> 提供额外的设置选项</li></ul><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p><code>Babel</code> 是一个编译 JavaScript 的平台。可以将 <code>ES6，ES7</code> 转换为 <code>ES5</code>，将 <code>React</code> 的 <code>JSX</code> 文件转换为 <code>JS</code> 文件。</p><h5 id="Babel的安装"><a href="#Babel的安装" class="headerlink" title="Babel的安装"></a><code>Babel</code>的安装</h5><p><code>Babel</code> 其实是几个模块化的包，核心功能位于 <code>babel-core</code> 的 npm 包中。</p><p><code>babel-preset-env</code>用于解析 ES6</p><p><code>babel-preset-react</code> 用于解析 JSX</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class="line">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure><h5 id="Babel的配置"><a href="#Babel的配置" class="headerlink" title="Babel的配置"></a>Babel的配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use:&#123;</span><br><span class="line">                    loader:<span class="string">"babel-loader"</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[</span><br><span class="line">                            <span class="string">"env"</span>,<span class="string">"react"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以将 Babel 的配置文件放在一个单独的 <code>.babelrc</code> 的文件中，webpack会自动读取。</p></blockquote><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>​    webpack 提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code></p><p>​    <code>css-loader</code> 使你能够使用类似 <code>@import</code> 和 <code>url(...)</code> 实现类似 <code>require()</code>的功能</p><p>​    <code>style-loader</code> 将所有计算后的样式加入页面内。</p><p>​    <code>webpack</code> 将 Css 文件也视作模块，可以通过 <code>import</code> 导入到入口文件</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="CSS-Module"><a href="#CSS-Module" class="headerlink" title="CSS Module"></a>CSS Module</h5><p>被称为<code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span>, <span class="comment">// 指定启用css modules</span></span><br><span class="line">                            localIdentName: <span class="string">'[name]__[local]--[hash:base64:5]'</span> <span class="comment">// 指定css的类名格式</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="CSS预处理"><a href="#CSS预处理" class="headerlink" title="CSS预处理"></a>CSS预处理</h4><p>以下是常用的CSS 处理<code>loaders</code>:</p><ul><li><code>Less Loader</code></li><li><code>Sass Loader</code></li><li><code>Stylus Loader</code></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p><p>与在打包构建过程中用来处理源文件的 Loader 不同，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>) <span class="comment">//此插件用于添加文件末尾版权标志</span></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><ul><li><code>HtmlWebpackPlugin</code>  :依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后的JS文件的新<code>index.html</code>。在每次生成的js文件名称不同时非常有用</li><li><code>Hot Module Replacement</code> : 它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</li><li><code>OccurenceOrderPlugin</code> :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li><li><code>UglifyJsPlugin</code>：压缩JS代码；</li><li><code>ExtractTextPlugin</code>：分离CSS和JS文件</li><li><code>clean-webpack-plugin</code> : 去除<code>build</code>文件中的残余文件</li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 基础知识</title>
      <link href="/2017/03/22/TypeScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/03/22/TypeScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="安装编译和构建"><a href="#安装编译和构建" class="headerlink" title="安装编译和构建"></a>安装编译和构建</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>npm包管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li></ul><h4 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc file.ts</span><br></pre></td></tr></table></figure><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li><p>布尔值 <code>boolean</code></p></li><li><p>数字 <code>number</code></p></li><li><p>字符串 <code>string</code></p><p>​    支持模板字符串，模板字符串使用 反引号 ` 定义，支持换行，并可以使用 <code>${ expr }</code> 嵌入表达式</p></li><li><p>数组 <code>number[]</code> || <code>Array&lt;number&gt;</code></p></li><li><p>元组 <code>[string,number]</code></p><p>​    元组类型允许表示一个已知元素数量和类型的数组</p><p>​    当访问越界元素时，会使用联合类型替代元组。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用python解数独</title>
      <link href="/2017/03/19/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
      <url>/2017/03/19/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
      <content type="html"><![CDATA[<p>偶然发现linux系统附带的一个数独游戏，打开玩了几把。无奈是个数独菜鸟，以前没玩过，根本就走不出几步就一团浆糊了。</p><p>于是就打算借助计算机的强大运算力来暴力解数独，还是很有乐趣的。</p><p>下面就记录一下我写解数独程序的一些思路和心得。</p><h3 id="数独游戏的基本解决方法"><a href="#数独游戏的基本解决方法" class="headerlink" title="数独游戏的基本解决方法"></a>数独游戏的基本解决方法</h3><p>编程笼统的来说,就是个方法论。不论什么程序，都必须将问题的解决过程分解成计算机可以实现的若干个简单方法。俗话说，大道至简。对于只能明白0和1的计算机来说，就更需要细分步骤，一步一步的解决问题了。</p><p>首先来思考一下解数独的基本概念。</p><p>数独横九竖九共八十一个格子，同时又分为9个九宫格。规则很简单——需要每一个格中的数字，都保证与其所在横排和竖排以及九宫格内无相同数字。</p><p>所以我们的大概思路就是，从第一个空格开始试着填数，从 1 开始填，如果 1 不满足横排竖排九宫格无重复的话，就再填入 2 ，以此类推，直到填入一个暂时满足规则的数，中断此格，移动到下一个空格重复这个过程。</p><p>如果到达某个空格发现已经无数可选了，说明前面某一格填错了，那就返回上一格，从上一格的中断处继续往 9 尝试，直到这样回朔到填错的那一格。</p><p>这样的话，我们就可以整理出重要的步骤了：</p><ul><li>寻找到下一个空格</li><li>轮流填入格中数字 1 到 9</li><li>递归判断填入数是否符合规则</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先测试数独使用的是芬兰数学家因卡拉花费3个月时间设计出的世界上迄今难度最大的数独。如下:</p><p><img src="https://s1.ax2x.com/2018/04/15/k0xDJ.png" alt="a.png"></p><p>将空格用 0 表示，同时将数独表示成嵌套的列表，这样每格的行数和列数就正好是列表中每个对应数的索引。</p><p>程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,board)</span>:</span></span><br><span class="line">        self.b = board</span><br><span class="line">        self.t = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self,x,y,value)</span>:</span><span class="comment">#检查每行每列及每宫是否有相同项</span></span><br><span class="line">        <span class="keyword">for</span> row_item <span class="keyword">in</span> self.b[x]:</span><br><span class="line">            <span class="keyword">if</span> row_item == value:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> row_all <span class="keyword">in</span> self.b:</span><br><span class="line">            <span class="keyword">if</span> row_all[y] == value:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        row,col=x/<span class="number">3</span>*<span class="number">3</span>,y/<span class="number">3</span>*<span class="number">3</span></span><br><span class="line">        row3col3=self.b[row][col:col+<span class="number">3</span>]+self.b[row+<span class="number">1</span>][col:col+<span class="number">3</span>]+self.b[row+<span class="number">2</span>][col:col+<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">for</span> row3col3_item <span class="keyword">in</span> row3col3:</span><br><span class="line">            <span class="keyword">if</span> row3col3_item == value:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next</span><span class="params">(self,x,y)</span>:</span><span class="comment">#得到下一个未填项</span></span><br><span class="line">        <span class="keyword">for</span> next_soulu <span class="keyword">in</span> range(y+<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> self.b[x][next_soulu] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> x,next_soulu</span><br><span class="line">        <span class="keyword">for</span> row_n <span class="keyword">in</span> range(x+<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> col_n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> self.b[row_n][col_n] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> row_n,col_n</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>,<span class="number">-1</span>  <span class="comment">#若无下一个未填项，返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_it</span><span class="params">(self,x,y)</span>:</span><span class="comment">#主循环</span></span><br><span class="line">        <span class="keyword">if</span> self.b[x][y] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):<span class="comment">#从1到9尝试</span></span><br><span class="line">                self.t+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.check(x,y,i):<span class="comment">#符合 行列宫均无条件 的</span></span><br><span class="line">                    self.b[x][y]=i <span class="comment">#将符合条件的填入0格</span></span><br><span class="line">                    next_x,next_y=self.get_next(x,y)<span class="comment">#得到下一个0格</span></span><br><span class="line">                    <span class="keyword">if</span> next_x == <span class="number">-1</span>: <span class="comment">#如果无下一个0格</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment">#返回True</span></span><br><span class="line">                    <span class="keyword">else</span>:        <span class="comment">#如果有下一个0格，递归判断下一个0格直到填满数独</span></span><br><span class="line">                        end=self.try_it(next_x,next_y)</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> end:   <span class="comment">#在递归过程中存在不符合条件的，即 使try_it函数返回None的项</span></span><br><span class="line">                        self.b[x][y] = <span class="number">0</span>    <span class="comment">#回朔到上一层继续</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        begin = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">if</span> self.b[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            self.try_it(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x,y=self.get_next(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            self.try_it(x,y)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.b:</span><br><span class="line">            <span class="keyword">print</span> i</span><br><span class="line">        end = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\ncost time:'</span>, end - begin</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'times:'</span>,self.t</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=solution([[<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">8</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>]])</span><br><span class="line"><span class="number">73</span> s.start()</span><br></pre></td></tr></table></figure><p>值得注意的是使用的递归判断能够很巧妙的在走错分支时回朔到上一层。具体实现是通过 for 循环来从 1 到 9 不断填入数字同时达到记录中断点的作用。通过下一层的返回值来确定是否回朔。</p><p>程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[8, 1, 2, 7, 5, 3, 6, 4, 9]</span><br><span class="line">[9, 4, 3, 6, 8, 2, 1, 7, 5]</span><br><span class="line">[6, 7, 5, 4, 9, 1, 2, 8, 3]</span><br><span class="line">[1, 5, 4, 2, 3, 7, 8, 9, 6]</span><br><span class="line">[3, 6, 9, 8, 4, 5, 7, 2, 1]</span><br><span class="line">[2, 8, 7, 1, 6, 9, 5, 3, 4]</span><br><span class="line">[5, 2, 1, 9, 7, 4, 3, 6, 8]</span><br><span class="line">[4, 3, 8, 5, 2, 6, 9, 1, 7]</span><br><span class="line">[7, 9, 6, 3, 1, 8, 4, 5, 2]</span><br><span class="line"></span><br><span class="line">cost time: 0:00:00.060687</span><br><span class="line">times: 45360</span><br></pre></td></tr></table></figure><p>可以看到程序虽然运算次数比较多，但是速度还是很快的。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular 框架的一些知识点</title>
      <link href="/2017/01/22/Angular%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2017/01/22/Angular%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>1.需要使用 @NgModule 装饰器函数传入模块的相关信息来定义模块</p><p>2.HTTP模块，Route模块等类似模块，可以导入到根模块中，也可以导入到自定义的模块中。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>1.需要在 <code>AppModule</code> 的 <code>declarations</code> 属性 中声明</p><p>2.需要使用 <code>Component</code> 装饰器函数传入组件的相关信息。</p><p>3.若有输入属性，需要使用 <code>Input</code> 装饰器(从<code>@angular</code>中导入)装饰属性</p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>1.需要使用 <code>Injectable</code> 装饰器 （从 <code>angualr/core</code> 中导入）定义</p><p>3.需要在 <code>AppModule</code> 的 <code>providers</code>属性 中声明</p><p>4.通过组件的构造函数向组件中引入服务。</p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>1.需要从 <code>@angular/forms</code>中导入 <code>FormsModule</code> 到 <code>AppModule</code>的 <code>imports</code> 属性中。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>1.需要从 <code>@angular/router</code> 中导入 <code>RouterModule</code></p><p>2.使用 <code>RouterModule.forRoot()</code>配置路由信息，并将其返回值在 <code>AppModule</code> 或单独的路由模块中 的 imports 属性中声明。</p><p>3.<code>ActivatedRoute</code>包含很多有用的路由信息。另外这些信息大部分是 <strong>可观察对象</strong>。</p><p>3.导航标签可使用指令 <code>routerLink = “所定义path”</code>进行导航定义,也可以使用命令式的</p><p><code>Router.navigate(),routerLinkActive</code>可用于定义激活链接的css类。</p><p>4.<code>&lt;router-outlet&gt;&lt;router-outlet&gt;</code>标签用于定义导航组件的显示位置。</p><h2 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h2><p>1.需要从 <code>@angular/http</code> 中导入  <code>HttpModule</code></p><p>2.<code>Http</code>服务中的 方法都返回一个 <code>Response</code> 对象的可观察对象。可将其转换为 <code>Promise</code> 对象用于返回，也可直接使用。</p><p>3.可观察对象主要用于持续多次发送请求的场景比如搜索推荐等。</p><p>4.组件模块中进行请求数据的整理和返回结果的处理，在 服务模块里 进行 数据请求动作。也可以通过再加一层 服务 来模块化相关的数个请求，将此模块作为专门的数据接口模块。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>比特和字节，带宽和网速</title>
      <link href="/2017/01/05/%E6%AF%94%E7%89%B9%E5%92%8C%E5%AD%97%E8%8A%82%EF%BC%8C%E5%B8%A6%E5%AE%BD%E5%92%8C%E7%BD%91%E9%80%9F/"/>
      <url>/2017/01/05/%E6%AF%94%E7%89%B9%E5%92%8C%E5%AD%97%E8%8A%82%EF%BC%8C%E5%B8%A6%E5%AE%BD%E5%92%8C%E7%BD%91%E9%80%9F/</url>
      <content type="html"><![CDATA[<p><strong>今天来整理一下存储单位和网速的知识。</strong></p><p><strong>最近几天家里网不太好，所以就了解了一下网速和电脑的存储单位的关系。</strong></p><h1 id="存储单位的bit-和-Byte"><a href="#存储单位的bit-和-Byte" class="headerlink" title="存储单位的bit 和 Byte"></a>存储单位的bit 和 Byte</h1><h2 id="bit（比特）"><a href="#bit（比特）" class="headerlink" title="bit（比特）"></a>bit（比特）</h2><p><em>bit</em>也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “<em>b</em>” 。</p><p><em>作为</em>信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 <em>bit</em> 是什么呢？</p><p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 <em>bit</em>。也就是说 <em>bit</em> 的含义就是二进制数中的一个数位，即  “0” 或者 “1”。</p><h2 id="Byte（字节）"><a href="#Byte（字节）" class="headerlink" title="Byte（字节）"></a>Byte（字节）</h2><p><em>Byte</em> 是字节的英文写法。它的简写为大写字母 “<em>B</em>“。</p><p>既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 <em>1B</em>，中文字符通常是两个字节，也就是 <em>2B</em>。</p><p>字节 <em>Byte</em> 和比特 <em>bit</em> 的换算关系是 <em>1</em> <em>Byte</em> <em>=</em> <em>8</em> <em>bit</em> 。</p><h2 id="KB-（千字节）"><a href="#KB-（千字节）" class="headerlink" title="KB （千字节）"></a>KB （千字节）</h2><p>需要了解的是，1 <em>KB</em> 并不是一千字节，因为计算机只认识二进制，所以在这里的 <em>KB</em>，是 2 的 10 次方，也就是 1024 个字节。</p><p>另外很多表示存储单位的地方都把 <em>B</em> 写成 <em>b</em>，造成了大家认知的混乱。其实在存储单位计量中出现 <em>b</em> 的地方，它的意思仍然是 <em>B</em>，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，<em>b</em>的真实意思就是指 比特 了，这个我们下面再说。</p><h2 id="换算"><a href="#换算" class="headerlink" title="换算"></a>换算</h2><p>存储单位换算关系如下</p><table><thead><tr><th>1 Byte = 8 bit</th><th></th></tr></thead><tbody><tr><td>1 KB= 1024 B</td><td></td></tr><tr><td>1 MB = 1024 KB</td><td></td></tr><tr><td>1 GB = 1024 MB</td><td></td></tr><tr><td>1 TB = 1024 GB</td></tr></tbody></table><h1 id="带宽和网速"><a href="#带宽和网速" class="headerlink" title="带宽和网速"></a>带宽和网速</h1><p>网络线路的计量单位，也就是我们通常说的 <em>2M</em> 宽带，<em>10 M</em> 宽带的单位，是 比特每秒（<em>bits per second</em>）。比特每秒 的缩写为 <em>bps</em>，意思是每秒接收的平均比特数。更大的单位是 千比特每秒（<em>Kbps</em>）或 兆比特每秒（<em>Mbps</em>）。<em>2M</em>宽带，意味着每秒平均可以接受 <em>2Mb</em> 的数据，也就是二百万左右比特的数据，在这里，小写 <em>b</em> 的意思就是比特了。</p><p>而通常我们说的下载速度，也就是网速，是每秒下载的字节数。比如网速是 5 <em>KB</em>（这网速可是够慢的），意思就是每秒接收的数据是 五千字节。</p><p>那我们根据 一字节 等于 8 比特的 换算方法，就可以得出以下结论。</p><p>下载速度从理论上来说，应该是 带宽的 八分之一。</p><p><em>2M</em> 宽带理论下载速度是 <em>256 KB</em></p><p><em>10M</em> 宽带理论下载速度是 <em>1280 KB</em></p><p>实际上由于我们还需要接受一些下载需要的一些信息，如 <em>IP</em> 信息，<em>HTTP</em> 信息，再加上服务器传输速度，电脑配置等原因，网速会比理论慢一些。</p><p>由于很多人都会混淆 字节的大写 <em>B</em> 和比特的小写 <em>b</em>，造成各种混乱。所以在书写单位缩写时，一定要注意 字节 和 比特 的单位的大小写 。</p><p>总结一下，有以下几个要点需要注意：</p><ul><li><strong>存储单位和网速的单位，不管是 <em>B</em> 还是 <em>b</em>，代表的都是 字节 <em>Byte</em>。</strong></li><li><strong>带宽的单位，不管是 <em>B</em> 还是 <em>b</em>，代表的都是 比特 <em>bit</em> 。</strong></li></ul><p>只要记住这两点，就算别人写混淆了，我们也是可以明白单位的具体含义的。</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery中append(),prepend()与after(),before()的区别</title>
      <link href="/2016/11/11/jQuery%E4%B8%ADappend(),prepend()%E4%B8%8Eafter(),before()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2016/11/11/jQuery%E4%B8%ADappend(),prepend()%E4%B8%8Eafter(),before()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>在jQuery中，添加元素有<code>append()</code>,<code>prepend</code>和 <code>after()</code>,<code>before()</code>两种共四个。</p><p>根据字面意思我们可以看出他们分别是追加，添加和之前，之后，意思相近。同时他们又都有添加元素的作用，容易混淆。</p><p>要想搞清楚他们之间的区别。首先我们要明白这几个函数各自的作用。</p><h3 id="append-和prepend"><a href="#append-和prepend" class="headerlink" title="append()和prepend()"></a>append()和prepend()</h3><p>append()用于在<strong>被选元素的结尾</strong>插入元素。</p><p>prepend()用于在<strong>被选元素的开头</strong>插入元素。</p><p>重点在于黑体字——<strong>被选元素的，</strong></p><p>也就是说这两个函数的添加都是添加到元素的内部的。</p><p><em>看下面的HTML代码</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>使用 append( ) 和 prepend( )添加元素</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test"</span>).append(<span class="string">"&lt;p&gt;b&lt;/p&gt;"</span>) <span class="comment">//使用append()添加 b 段落</span></span><br><span class="line">    $(<span class="string">"#test"</span>).prepend(<span class="string">"&lt;p&gt;c&lt;/p&gt;"</span>) <span class="comment">//使用 prepend()添加 c 段落</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>效果如下</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>c<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>b<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面可以得知，当我们使用 <code>append()</code> 和 <code>prepend()</code>往 <code>id</code> 为 <code>test</code> 的 <code>div</code> 块添加元素时，是添加到 <code>div</code> 内部的。</p><p>也就是说，我们添加的元素，<strong>成为了 被添加元素 的 子元素</strong>。</p><h3 id="after-和-before"><a href="#after-和-before" class="headerlink" title="after() 和 before()"></a>after() 和 before()</h3><p>after()用于在被选<strong>元素之后</strong>插入内容。</p><p>before()用于在被选<strong>元素之前</strong>插入内容。</p><p>重点在于黑体字元素之前 ，元素之后。</p><p>这意味着这两个函数是往元素外部的前后添加的。</p><p>还是刚刚的HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 after() 和 before()添加元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test"</span>).after(<span class="string">"&lt;p&gt;b&lt;/p&gt;"</span>)</span><br><span class="line">    $(<span class="string">"#test"</span>).before(<span class="string">"&lt;p&gt;c&lt;/p&gt;"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;c&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;p&gt;a&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p&gt;b&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>从结果可知，<code>after( )</code> 和 <code>before( )</code> 往 <code>id=”test“</code> 的 <code>div</code>块添加元素时，是添加到块外部的。</p><p>也就是说，添加的元素，成为了 <strong>被添加元素的 兄弟元素。</strong></p><h3 id="区别和总结"><a href="#区别和总结" class="headerlink" title="区别和总结"></a>区别和总结</h3><p>通过上面两个例子，我们可以清楚的看到四个函数 append 和 prepend 与 after和before 的区别。</p><p>只要明白 <strong>往元素内的前后添加</strong> 和 <strong>往元素外的前后添加</strong> 的区别，就很容易区分了。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 的几种数组去重方法</title>
      <link href="/2016/09/18/JavaScript%E7%9A%84%E5%87%A0%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2016/09/18/JavaScript%E7%9A%84%E5%87%A0%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h5 id="最基本的数组去重"><a href="#最基本的数组去重" class="headerlink" title="最基本的数组去重"></a>最基本的数组去重</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = [];   <span class="comment">//初始值也可为 arr[0]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j &lt; b.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == b[j])&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;   </span><br><span class="line">                <span class="comment">//可在此处直接break跳出本层循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            b.push(arr[i]);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用indexOf-方法"><a href="#使用indexOf-方法" class="headerlink" title="使用indexOf() 方法"></a>使用<code>indexOf()</code> 方法</h5><p>​    思路类似第一种方法，但是使用 indexOf( ) 方法（需注意此方法不支持IE6-8）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = [arr[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.indexOf(arr[i]) === <span class="number">-1</span>)&#123;b.push(arr[i]);&#125;</span><br><span class="line">        <span class="comment">//上一行也可以用如下写法</span></span><br><span class="line">        <span class="comment">// (b.indexOf(arr[i]) === -1)&amp;&amp;(b.push(arr[i]))</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-indexOf-方法和-filter-方法"><a href="#使用-indexOf-方法和-filter-方法" class="headerlink" title="使用 indexOf() 方法和 filter 方法"></a>使用 <code>indexOf()</code> 方法和 <code>filter</code> 方法</h5><pre><code>更进一步，不仅使用了 indexOf() 方法，还使用了 filter</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line">        <span class="comment">//元素首次出现的位置是否为元素当前位置</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="排序后去重"><a href="#排序后去重" class="headerlink" title="排序后去重"></a>排序后去重</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    arr.sort()</span><br><span class="line">    <span class="keyword">var</span> b = [arr[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != b[b.length<span class="number">-1</span>])&#123;</span><br><span class="line">        <span class="comment">//排序后查看数组的元素是否与结果数组中最后一个元素相同即可判断是否重复</span></span><br><span class="line">            b.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="排序后去重的简略写法"><a href="#排序后去重的简略写法" class="headerlink" title="排序后去重的简略写法"></a>排序后去重的简略写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    arr.sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !index || item != array[index<span class="number">-1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ES6-的数组去重"><a href="#ES6-的数组去重" class="headerlink" title="ES6 的数组去重"></a>ES6 的数组去重</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Set对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(set);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Ｓｅｔ对象的另一种方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>（<span class="title">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Map对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>（<span class="title">arr</span>）</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> !res.has(a) &amp;&amp; res.set(a,<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 的原生 Ajax 请求</title>
      <link href="/2016/08/22/JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%94%9FAjax%E8%AF%B7%E6%B1%82/"/>
      <url>/2016/08/22/JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%94%9FAjax%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h4 id="Javascript-的原生ajax请求"><a href="#Javascript-的原生ajax请求" class="headerlink" title="Javascript 的原生ajax请求"></a><code>Javascript</code> 的原生<code>ajax</code>请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 ajax 对象</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每当readyState改变时，都会调用 onreadystatechange 函数</span></span><br><span class="line"><span class="comment">当请求为异步时调用readyState，请求为同步时直接将业务代码放在send()函数之后即可。</span></span><br><span class="line"><span class="comment">readyState:</span></span><br><span class="line"><span class="comment">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</span></span><br><span class="line"><span class="comment">  0: 请求未初始化</span></span><br><span class="line"><span class="comment">  1: 服务器连接已建立</span></span><br><span class="line"><span class="comment">  2: 请求已接收</span></span><br><span class="line"><span class="comment">  3: 请求处理中</span></span><br><span class="line"><span class="comment">  4: 请求已完成，且响应已就绪</span></span><br><span class="line"><span class="comment">status:</span></span><br><span class="line"><span class="comment">  http响应码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">/* responseText 获得字符串形式的响应数据 */</span></span><br><span class="line">    <span class="comment">/* responseXML 获得XML形式的响应数据 */</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//规定请求的类型，url，异步或非异步</span></span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post2.php"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//添加请求头</span></span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">//当post请求时可以携带字符串参数</span></span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML中 meta 标签说明</title>
      <link href="/2016/07/02/HTML%E4%B8%ADmeta%E6%A0%87%E7%AD%BE%E8%AF%B4%E6%98%8E/"/>
      <url>/2016/07/02/HTML%E4%B8%ADmeta%E6%A0%87%E7%AD%BE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h4 id="声明文档使用的字符编码"><a href="#声明文档使用的字符编码" class="headerlink" title="声明文档使用的字符编码"></a>声明文档使用的字符编码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="浏览器兼容模式"><a href="#浏览器兼容模式" class="headerlink" title="浏览器兼容模式"></a>浏览器兼容模式</h4><p>​    指示 IE 以目前可用的最高模式显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为移动设备添加-viewport"><a href="#为移动设备添加-viewport" class="headerlink" title="为移动设备添加 viewport"></a>为移动设备添加 viewport</h4><p>​    主要用于设置视口缩放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,inital-sacle=1,maximum-scale=1,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>content</code> 参数解释：</p><ul><li><code>width</code>      视口宽度，可设置为 数值 或 <code>device-width（屏幕宽度）</code>S</li><li><code>height</code>    视口高度，可设置为 数值 或 <code>device-width（屏幕宽度）</code></li><li><code>initial-scale</code>    初始缩放比例</li><li><code>maxium-scale</code>    最大缩放比例</li><li><code>minimum-scale</code>    最小缩放比例</li><li><code>user-scalable</code>     是否允许用户缩放( yes / no ) </li><li><code>minimal-ui</code>     ios中的属性，用于在页面加载时最小化上下状态栏，为布尔值，直接 <code>content=‘minimal-ui’</code>使用即可</li></ul><h4 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">页面描述</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span> /&gt;</span></span><br><span class="line">页面关键词</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"html5, css3, 关键字"</span>/&gt;</span></span><br><span class="line">定义网页作者</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"zuozhe"</span> /&gt;</span></span><br><span class="line">定义网页搜索引擎索引方式，robotterms是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ios相关"><a href="#ios相关" class="headerlink" title="ios相关"></a>ios相关</h4><h5 id="ios-设备"><a href="#ios-设备" class="headerlink" title="ios 设备"></a>ios 设备</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">添加到主屏后的标题（iOS 6 新增）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br><span class="line">是否启用 WebApp 全屏模式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">设置状态栏的背景颜色</span><br><span class="line">只有在 "apple-mobile-web-app-capable" content="yes" 时生效</span><br><span class="line">content 参数：</span><br><span class="line">    default 默认值。</span><br><span class="line">    black 状态栏背景是黑色。</span><br><span class="line">    black-translucent 状态栏背景是黑色半透明。</span><br><span class="line">设置为 default 或 black ,网页内容从状态栏底部开始。</span><br><span class="line">设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="ios-图标-rel-参数"><a href="#ios-图标-rel-参数" class="headerlink" title="ios 图标 rel 参数"></a>ios 图标 rel 参数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apple-touch-icon 图片自动处理成圆角和高光等效果。</span><br><span class="line">apple-touch-icon-precomposed 禁止系统自动添加效果，直接显示设计原图。</span><br><span class="line">iPhone 和 iTouch，默认 57x57 像素，必须有</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-57x57-precomposed.png"</span> /&gt;</span></span><br><span class="line">iPad，72x72 像素，可以没有，但推荐有</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"72x72"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-72x72-precomposed.png"</span> /&gt;</span></span><br><span class="line">Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-114x114-precomposed.png"</span> /&gt;</span></span><br><span class="line">Retina iPad，144x144 像素，可以没有，推荐大家使用</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-144x144-precomposed.png"</span> /&gt;</span></span><br><span class="line">title最好限制在六个中文长度内，超长的内容会被隐藏，添加到主屏后的标题（iOS 6 新增）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="启动画面"><a href="#启动画面" class="headerlink" title="启动画面"></a>启动画面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">iPad 的启动画面是不包括状态栏区域的。</span><br><span class="line">iPad 竖屏 768 x 1004（标准分辨率）</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"768x1004"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span> /&gt;</span></span><br><span class="line">iPad 竖屏 1536x2008（Retina）</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1536x2008"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span> /&gt;</span></span><br><span class="line">iPad 横屏 1024x748（标准分辨率）</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1024x748"</span> <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span> /&gt;</span></span><br><span class="line">iPad 横屏 2048x1496（Retina）</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"2048x1496"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span> /&gt;</span></span><br><span class="line">iPhone 和 iPod touch 的启动画面是包含状态栏区域的。</span><br><span class="line">iPhone/iPod Touch 竖屏 320x480 (标准分辨率)</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span> /&gt;</span></span><br><span class="line">iPhone/iPod Touch 竖屏 640x960 (Retina)</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x960"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x960.png"</span> /&gt;</span></span><br><span class="line">iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina)</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x1136"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x1136.png"</span> /&gt;</span></span><br><span class="line">当用户点击主屏图标打开 WebApp 时，系统会展示启动画面，在未设置情况下系统会默认显示该网站的首页截图，当然这个体验不是很好</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"Startup.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="windows-8"><a href="#windows-8" class="headerlink" title="windows 8"></a>windows 8</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows 8 磁贴颜色</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#000"</span>/&gt;</span> </span><br><span class="line">Windows 8 磁贴图标</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"icon.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sns社交标签"><a href="#sns社交标签" class="headerlink" title="sns社交标签"></a>sns社交标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"类型"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"URL地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"标题"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"图片"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"描述"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="将-http-请求-自动转换为-https"><a href="#将-http-请求-自动转换为-https" class="headerlink" title="将 http 请求 自动转换为 https"></a>将 http 请求 自动转换为 https</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"upgrade-insecure-requests"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的"></a>不常用的</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">添加 RSS 订阅</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"/rss.xml"</span> /&gt;</span></span><br><span class="line">添加 favicon icon</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span> /&gt;</span></span><br><span class="line">禁止数字识自动别为电话号码</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line">不让android识别邮箱</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span> /&gt;</span></span><br><span class="line">启用360浏览器的极速模式(webkit)</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">避免IE使用兼容模式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">微软的老式浏览器</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></span><br><span class="line">QQ强制竖屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">UC强制全屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">QQ强制全屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">UC应用模式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line">QQ应用模式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">禁止百度转码</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></span><br><span class="line">windows phone 点击无高光</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">关键字</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span>  </span><br><span class="line">描述</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span> </span><br><span class="line">标题</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">作者</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"-06"</span> /&gt;</span>  </span><br><span class="line">公司</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Copyright"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span>  </span><br><span class="line">让IE浏览器用最高级内核渲染页面 还有用 Chrome 框架的页面用webkit 内核 </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span> </span><br><span class="line">IOS6全屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">Chrome高版本全屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">让360双核浏览器用webkit内核渲染页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line">添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>条件注释判断 IE 浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;条件注释区分非IE浏览器</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7 ]&gt;&lt;html class="oldie ie ie6"&gt; &lt;![endif]--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--[if IE 7 ]&gt;&lt;html class="oldie ie ie7"&gt; &lt;![endif]--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--[if IE 8 ]&gt;&lt;html class="ie ie8"&gt; &lt;![endif]--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--[if (gte IE 9)|!(IE)]&gt;&lt;!--&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="comment">&lt;!--&lt;![endif]--&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;  &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime text3 的设置项中文翻译</title>
      <link href="/2016/03/20/sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/03/20/sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><code>sublime text3</code> 编辑器的所有设置项的中文翻译。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"> // While you can edit this file, it's best to put your changes in</span><br><span class="line">// "User/Preferences.sublime-settings", which overrides the settings in here.</span><br><span class="line">//</span><br><span class="line">// Settings may also be placed in file type specific options files, for</span><br><span class="line">// example, in Packages/Python/Python.sublime-settings for python files.</span><br><span class="line">&#123;</span><br><span class="line">// Sets the colors used within the text area</span><br><span class="line">// 主题文件的路径</span><br><span class="line">"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",</span><br><span class="line"></span><br><span class="line">// Note that the font_face and font_size are overriden in the platform</span><br><span class="line">// specific settings file, for example, "Preferences (Linux).sublime-settings".</span><br><span class="line">// Because of this, setting them here will have no effect: you must set them</span><br><span class="line">// in your User File Preferences.</span><br><span class="line">// 设置字体和大小，必须在Settings-User里重写，这里设置没有任何效果</span><br><span class="line">"font_face": "Consolas",</span><br><span class="line">"font_size": 12,</span><br><span class="line"></span><br><span class="line">// Valid options are "no_bold", "no_italic", "no_antialias", "gray_antialias",</span><br><span class="line">// "subpixel_antialias" and "no_round" (OS X only)</span><br><span class="line">// 字体选项：no_bold不显示粗体字，no_italic不显示斜体字，no_antialias和no_antialias关闭反锯齿</span><br><span class="line">// subpixel_antialias和no_round是OS X系统独有的</span><br><span class="line">"font_options": [],</span><br><span class="line"></span><br><span class="line">// Characters that are considered to separate words</span><br><span class="line">// 在文字上双击会全选当前的内容，如果里面出现以下字符，就会被截断</span><br><span class="line">"word_separators”: “./()\”‘-:,.;~!@#$%^&amp;*|+=[]&#123;&#125;`~?",</span><br><span class="line"></span><br><span class="line">// Set to false to prevent line numbers being drawn in the gutter</span><br><span class="line">// 是否显示行号</span><br><span class="line">"line_numbers": true,</span><br><span class="line"></span><br><span class="line">// Set to false to hide the gutter altogether</span><br><span class="line">// 是否显示行号边栏</span><br><span class="line">"gutter": true,</span><br><span class="line"></span><br><span class="line">// Spacing between the gutter and the text</span><br><span class="line">// 行号边栏和文字的间距</span><br><span class="line">"margin": 4,</span><br><span class="line"></span><br><span class="line">// Fold buttons are the triangles shown in the gutter to fold regions of text</span><br><span class="line">// 是否显示代码折叠按钮</span><br><span class="line">"fold_buttons": true,</span><br><span class="line"></span><br><span class="line">// Hides the fold buttons unless the mouse is over the gutter</span><br><span class="line">// 不管鼠标在不在行号边栏，代码折叠按钮一直显示</span><br><span class="line">"fade_fold_buttons": true,</span><br><span class="line"></span><br><span class="line">// Columns in which to display vertical rulers</span><br><span class="line">//列显示垂直标尺，在中括号里填入数字，宽度按字符计算</span><br><span class="line">"rulers": [],</span><br><span class="line"></span><br><span class="line">// Set to true to turn spell checking on by default</span><br><span class="line">// 是否打开拼写检查</span><br><span class="line">"spell_check": false,</span><br><span class="line"></span><br><span class="line">// The number of spaces a tab is considered equal to</span><br><span class="line">// Tab键制表符宽度</span><br><span class="line">"tab_size": 4,</span><br><span class="line"></span><br><span class="line">// Set to true to insert spaces when tab is pressed</span><br><span class="line">// 设为true时，缩进和遇到Tab键时使用空格替代</span><br><span class="line">"translate_tabs_to_spaces": false,</span><br><span class="line"></span><br><span class="line">// If translate_tabs_to_spaces is true, use_tab_stops will make tab and</span><br><span class="line">// backspace insert/delete up to the next tabstop</span><br><span class="line">// translate_tabs_to_spaces设置为true，Tab和Backspace的删除/插入作用于制表符宽度</span><br><span class="line">// 否则作用于单个空格</span><br><span class="line">"use_tab_stops": true,</span><br><span class="line"></span><br><span class="line">// Set to false to disable detection of tabs vs. spaces on load</span><br><span class="line">// false时禁止在载入的时候检测制表符和空格</span><br><span class="line">"detect_indentation": true,</span><br><span class="line"></span><br><span class="line">// Calculates indentation automatically when pressing enter</span><br><span class="line">// 按回车时，自动与制表位对齐</span><br><span class="line">"auto_indent": true,</span><br><span class="line"></span><br><span class="line">// Makes auto indent a little smarter, e.g., by indenting the next line</span><br><span class="line">// after an if statement in C. Requires auto_indent to be enabled.</span><br><span class="line">//针对C语言的</span><br><span class="line">"smart_indent": false,</span><br><span class="line"></span><br><span class="line">// Adds whitespace up to the first open bracket when indenting. Requires</span><br><span class="line">// auto_indent to be enabled.</span><br><span class="line">// 需要启用auto_indent，第一次打开括号缩进时插入空格？（没测试出来效果...）</span><br><span class="line">"indent_to_bracket": true,</span><br><span class="line"></span><br><span class="line">// Trims white space added by auto_indent when moving the caret off the</span><br><span class="line">// line.</span><br><span class="line">// 显示对齐的白线是否根据回车、tab等操作自动填补</span><br><span class="line">"trim_automatic_white_space": true,</span><br><span class="line"></span><br><span class="line">// Disables horizontal scrolling if enabled.</span><br><span class="line">// May be set to true, false, or "auto", where it will be disabled for</span><br><span class="line">// source code, and otherwise enabled.</span><br><span class="line">// 是否自动换行，如果选auto，需要加双引号</span><br><span class="line">"word_wrap": false,</span><br><span class="line"></span><br><span class="line">// Set to a value other than 0 to force wrapping at that column rather than the</span><br><span class="line">// window width</span><br><span class="line">// 设置窗口内文字区域的宽度</span><br><span class="line">"wrap_width": 0,</span><br><span class="line"></span><br><span class="line">// Set to false to prevent word wrapped lines from being indented to the same</span><br><span class="line">// level</span><br><span class="line">// 防止被缩进到同一级的字换行</span><br><span class="line">"indent_subsequent_lines": true,</span><br><span class="line"></span><br><span class="line">// Draws text centered in the window rather than left aligned</span><br><span class="line">// 如果没有定义过，则文件居中显示（比如新建的文件）</span><br><span class="line">"draw_centered": false,</span><br><span class="line"></span><br><span class="line">// Controls auto pairing of quotes, brackets etc</span><br><span class="line">// 自动匹配引号，括号等</span><br><span class="line">"auto_match_enabled": true,</span><br><span class="line"></span><br><span class="line">// Word list to use for spell checking</span><br><span class="line">// 拼写检查的单词列表路径</span><br><span class="line">"dictionary": "Packages/Language - English/en_US.dic",</span><br><span class="line"></span><br><span class="line">// Set to true to draw a border around the visible rectangle on the minimap.</span><br><span class="line">// The color of the border will be determined by the "minimapBorder" key in</span><br><span class="line">// the color scheme</span><br><span class="line">// 代码地图的可视区域部分是否加上边框，边框的颜色可在配色方案上加入minimapBorder键</span><br><span class="line">"draw_minimap_border": false,</span><br><span class="line"></span><br><span class="line">// If enabled, will highlight any line with a caret</span><br><span class="line">// 突出显示当前光标所在的行</span><br><span class="line">"highlight_line": false,</span><br><span class="line"></span><br><span class="line">// Valid values are "smooth", "phase", "blink", "wide" and "solid".</span><br><span class="line">// 设置光标闪动方式</span><br><span class="line">"caret_style": "smooth",</span><br><span class="line"></span><br><span class="line">// Set to false to disable underlining the brackets surrounding the caret</span><br><span class="line">// 是否特殊显示当前光标所在的括号、代码头尾闭合标记</span><br><span class="line">"match_brackets": true,</span><br><span class="line"></span><br><span class="line">// Set to false if you'd rather only highlight the brackets when the caret is</span><br><span class="line">// next to one</span><br><span class="line">// 设为false时，只有光标在括号或头尾闭合标记的两端时，match_brackets才生效</span><br><span class="line">"match_brackets_content": true,</span><br><span class="line"></span><br><span class="line">// Set to false to not highlight square brackets. This only takes effect if</span><br><span class="line">// match_brackets is true</span><br><span class="line">// 是否突出显示圆括号，match_brackets为true生效</span><br><span class="line">"match_brackets_square": false,</span><br><span class="line"></span><br><span class="line">// Set to false to not highlight curly brackets. This only takes effect if</span><br><span class="line">// match_brackets is true</span><br><span class="line">// 是否突出显示大括号，match_brackets为true生效</span><br><span class="line">"match_brackets_braces": false,</span><br><span class="line"></span><br><span class="line">// Set to false to not highlight angle brackets. This only takes effect if</span><br><span class="line">// match_brackets is true</span><br><span class="line">// 是否突出显示尖括号，match_brackets为true生效</span><br><span class="line">"match_brackets_angle": false,</span><br><span class="line"></span><br><span class="line">// Enable visualization of the matching tag in HTML and XML</span><br><span class="line">// html和xml下突出显示光标所在标签的两端，影响HTML、XML、CSS等</span><br><span class="line">"match_tags": true,</span><br><span class="line"></span><br><span class="line">// Highlights other occurrences of the currently selected text</span><br><span class="line">// 全文突出显示和当前选中字符相同的字符</span><br><span class="line">"match_selection": true,</span><br><span class="line"></span><br><span class="line">// Additional spacing at the top of each line, in pixels</span><br><span class="line">// 设置每一行到顶部，以像素为单位的间距，效果相当于行距</span><br><span class="line">"line_padding_top": 1,</span><br><span class="line"></span><br><span class="line">// Additional spacing at the bottom of each line, in pixels</span><br><span class="line">// 设置每一行到底部，以像素为单位的间距，效果相当于行距</span><br><span class="line">"line_padding_bottom": 1,</span><br><span class="line"></span><br><span class="line">// Set to false to disable scrolling past the end of the buffer.</span><br><span class="line">// On OS X, this value is overridden in the platform specific settings, so</span><br><span class="line">// you'll need to place this line in your user settings to override it.</span><br><span class="line">// 设置为false时，滚动到文本的最下方时，没有缓冲区</span><br><span class="line">"scroll_past_end": true,</span><br><span class="line"></span><br><span class="line">// This controls what happens when pressing up or down when on the first</span><br><span class="line">// or last line.</span><br><span class="line">// On OS X, this value is overridden in the platform specific settings, so</span><br><span class="line">// you'll need to place this line in your user settings to override it.</span><br><span class="line">// 设置成true，当光标已经在第一行时，再Up则到行首，如果光标已经在最后一行，再Down则跳到行尾</span><br><span class="line">"move_to_limit_on_up_down": false,</span><br><span class="line"></span><br><span class="line">// Set to "none" to turn off drawing white space, "selection" to draw only the</span><br><span class="line">// white space within the selection, and "all" to draw all white space</span><br><span class="line">// 按space或tab时，实际会产生白色的点（一个空格一个点）或白色的横线（tab_size设置的制表符的宽度），选中状态下才能看到</span><br><span class="line">// 设置为none时，什么情况下都不显示这些点和线</span><br><span class="line">// 设置为selection时，只显示选中状态下的点和线</span><br><span class="line">// 设置为all时，则一直显示</span><br><span class="line">"draw_white_space": "selection",</span><br><span class="line"></span><br><span class="line">// Set to false to turn off the indentation guides.</span><br><span class="line">// The color and width of the indent guides may be customized by editing</span><br><span class="line">// the corresponding .tmTheme file, and specifying the colors "guide",</span><br><span class="line">// "activeGuide" and "stackGuide"</span><br><span class="line">// 制表位的对齐白线是否显示，颜色可在主题文件里设置（guide，activeGuide，stackGuide）</span><br><span class="line">"draw_indent_guides": true,</span><br><span class="line"></span><br><span class="line">// Controls how the indent guides are drawn, valid options are</span><br><span class="line">// "draw_normal" and "draw_active". draw_active will draw the indent</span><br><span class="line">// guides containing the caret in a different color.</span><br><span class="line">// 制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</span><br><span class="line">"indent_guide_options": ["draw_normal"],</span><br><span class="line"></span><br><span class="line">// Set to true to removing trailing white space on save</span><br><span class="line">// 为true时，保存文件时会删除每行结束后多余的空格</span><br><span class="line">"trim_trailing_white_space_on_save": false,</span><br><span class="line"></span><br><span class="line">// Set to true to ensure the last line of the file ends in a newline</span><br><span class="line">// character when saving</span><br><span class="line">// 为true时，保存文件时光标会在文件的最后向下换一行</span><br><span class="line">"ensure_newline_at_eof_on_save": false,</span><br><span class="line"></span><br><span class="line">// Set to true to automatically save files when switching to a different file</span><br><span class="line">// or application</span><br><span class="line">// 切换到其它文件标签或点击其它非本软件区域，文件自动保存</span><br><span class="line">"save_on_focus_lost": false,</span><br><span class="line"></span><br><span class="line">// The encoding to use when the encoding can't be determined automatically.</span><br><span class="line">// ASCII, UTF-8 and UTF-16 encodings will be automatically detected.</span><br><span class="line">// 编码时不能自动检测编码时，将自动检测ASCII, UTF-8 和 UTF-16</span><br><span class="line">"fallback_encoding": "Western (Windows 1252)",</span><br><span class="line"></span><br><span class="line">// Encoding used when saving new files, and files opened with an undefined</span><br><span class="line">// encoding (e.g., plain ascii files). If a file is opened with a specific</span><br><span class="line">// encoding (either detected or given explicitly), this setting will be</span><br><span class="line">// ignored, and the file will be saved with the encoding it was opened</span><br><span class="line">// with.</span><br><span class="line">// 默认编码格式</span><br><span class="line">"default_encoding": "UTF-8",</span><br><span class="line"></span><br><span class="line">// Files containing null bytes are opened as hexadecimal by default</span><br><span class="line">// 包含空字节的文件被打开默认为十六进制</span><br><span class="line">"enable_hexadecimal_encoding": true,</span><br><span class="line"></span><br><span class="line">// Determines what character(s) are used to terminate each line in new files.</span><br><span class="line">// Valid values are 'system' (whatever the OS uses), 'windows' (CRLF) and</span><br><span class="line">// 'unix' (LF only).</span><br><span class="line">// 每一行结束的时候用什么字符做终止符</span><br><span class="line">"default_line_ending": "system",</span><br><span class="line"></span><br><span class="line">// When enabled, pressing tab will insert the best matching completion.</span><br><span class="line">// When disabled, tab will only trigger snippets or insert a tab.</span><br><span class="line">// Shift+tab can be used to insert an explicit tab when tab_completion is</span><br><span class="line">// enabled.</span><br><span class="line">// 设置为enabled时，在一个字符串间按Tab将插入一个制表符</span><br><span class="line">// 设置为true时，按Tab会根据前后环境进行代码自动匹配填补</span><br><span class="line">"tab_completion": true,</span><br><span class="line"></span><br><span class="line">// Enable auto complete to be triggered automatically when typing.</span><br><span class="line">// 代码提示</span><br><span class="line">"auto_complete": true,</span><br><span class="line"></span><br><span class="line">// The maximum file size where auto complete will be automatically triggered.</span><br><span class="line">// 代码提示的大小限制</span><br><span class="line">"auto_complete_size_limit": 4194304,</span><br><span class="line"></span><br><span class="line">// The delay, in ms, before the auto complete window is shown after typing</span><br><span class="line">// 代码提示延迟显示</span><br><span class="line">"auto_complete_delay": 50,</span><br><span class="line"></span><br><span class="line">// Controls what scopes auto complete will be triggered in</span><br><span class="line">// 代码提示的控制范围</span><br><span class="line">"auto_complete_selector": "source - comment",</span><br><span class="line"></span><br><span class="line">// Additional situations to trigger auto complete</span><br><span class="line">// 触发代码提示的其他情况</span><br><span class="line">"auto_complete_triggers": [ &#123;"selector": "text.html", "characters": "&lt;"&#125; ],</span><br><span class="line"></span><br><span class="line">// By default, auto complete will commit the current completion on enter.</span><br><span class="line">// This setting can be used to make it complete on tab instead.</span><br><span class="line">// Completing on tab is generally a superior option, as it removes</span><br><span class="line">// ambiguity between committing the completion and inserting a newline.</span><br><span class="line">// 设为false时，选择提示的代码按回车或点击可以输出出来，但选择true时不会输出而是直接换行</span><br><span class="line">"auto_complete_commit_on_tab": false,</span><br><span class="line"></span><br><span class="line">// Controls if auto complete is shown when snippet fields are active.</span><br><span class="line">// Only relevant if auto_complete_commit_on_tab is true.</span><br><span class="line">// auto_complete_commit_on_tab必须为true，控制代码提示的活跃度（没明白...）</span><br><span class="line">"auto_complete_with_fields": false,</span><br><span class="line"></span><br><span class="line">// By default, shift+tab will only unindent if the selection spans</span><br><span class="line">// multiple lines. When pressing shift+tab at other times, it'll insert a</span><br><span class="line">// tab character - this allows tabs to be inserted when tab_completion is</span><br><span class="line">// enabled. Set this to true to make shift+tab always unindent, instead of</span><br><span class="line">// inserting tabs.</span><br><span class="line">// 设置为false，使用Shift + tab总是插入制表符</span><br><span class="line">"shift_tab_unindent": true,</span><br><span class="line"></span><br><span class="line">// If true, the selected text will be copied into the find panel when it's</span><br><span class="line">// shown.</span><br><span class="line">// On OS X, this value is overridden in the platform specific settings, so</span><br><span class="line">// you'll need to place this line in your user settings to override it.</span><br><span class="line">// 选中的文本按Ctrl + f时，自动复制到查找面板的文本框里</span><br><span class="line">"find_selected_text": true,</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// User Interface Settings</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// The theme controls the look of Sublime Text's UI (buttons, tabs, scroll bars, etc)</span><br><span class="line">// DataPackagesTheme - DefaultDefault.sublime-theme控制软件的主题</span><br><span class="line">"theme": "Default.sublime-theme",</span><br><span class="line"></span><br><span class="line">// Set to 0 to disable smooth scrolling. Set to a value between 0 and 1 to</span><br><span class="line">// scroll slower, or set to larger than 1 to scroll faster</span><br><span class="line">// 滚动的速度</span><br><span class="line">"scroll_speed": 1.0,</span><br><span class="line"></span><br><span class="line">// Controls side bar animation when expanding or collapsing folders</span><br><span class="line">// 左边边栏文件夹动画</span><br><span class="line">"tree_animation_enabled": true,</span><br><span class="line">// 标签页的关闭按钮</span><br><span class="line">"show_tab_close_buttons": true,</span><br><span class="line"></span><br><span class="line">// OS X 10.7 only: Set to true to disable Lion style full screen support.</span><br><span class="line">// Sublime Text must be restarted for this to take effect.</span><br><span class="line">// 针对OS X</span><br><span class="line">"use_simple_full_screen": false,</span><br><span class="line"></span><br><span class="line">// Valid values are "system", "enabled" and "disabled"</span><br><span class="line">// 水平垂直滚动条：system和disabled为默认显示方式，enabled为自动隐藏显示</span><br><span class="line">"overlay_scroll_bars": "system",</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Application Behavior Settings</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// Exiting the application with hot_exit enabled will cause it to close</span><br><span class="line">// immediately without prompting. Unsaved modifications and open files will</span><br><span class="line">// be preserved and restored when next starting.</span><br><span class="line">//</span><br><span class="line">// Closing a window with an associated project will also close the window</span><br><span class="line">// without prompting, preserving unsaved changes in the workspace file</span><br><span class="line">// alongside the project.</span><br><span class="line">// 热推出功能！退出时不会提示是否保存文件，而是直接退出</span><br><span class="line">// 下次打开软件时，文件保持退出前的状态，没来得及保存的内容都在，但并没有真实的写在原文件里</span><br><span class="line">"hot_exit": true,</span><br><span class="line"></span><br><span class="line">// remember_open_files makes the application start up with the last set of</span><br><span class="line">// open files. Changing this to false will have no effect if hot_exit is</span><br><span class="line">// true</span><br><span class="line">// 软件使用最后的设定打开文件，hot_exit为true时没有效果</span><br><span class="line">"remember_open_files": true,</span><br><span class="line"></span><br><span class="line">// OS X only: When files are opened from finder, or by dragging onto the</span><br><span class="line">// dock icon, this controls if a new window is created or not.</span><br><span class="line">// 针对OS X</span><br><span class="line">"open_files_in_new_window": true,</span><br><span class="line"></span><br><span class="line">// Set to true to close windows as soon as the last file is closed, unless</span><br><span class="line">// there's a folder open within the window. This is always enabled on OS X,</span><br><span class="line">// changing it here won't modify the behavior.</span><br><span class="line">// 针对OS X</span><br><span class="line">"close_windows_when_empty": true,</span><br><span class="line">// 哪些文件会被显示到边栏上</span><br><span class="line">// folder_exclude_patterns and file_exclude_patterns control which files</span><br><span class="line">// are listed in folders on the side bar. These can also be set on a per-</span><br><span class="line">// project basis.</span><br><span class="line">"folder_exclude_patterns": [".svn", ".git", ".hg", "CVS"],</span><br><span class="line">"file_exclude_patterns": ["*.pyc", "*.pyo", "*.exe", "*.dll", "*.obj","*.o", "*.a", "*.lib", "*.so", "*.dylib", "*.ncb", "*.sdf", "*.suo", "*.pdb", "*.idb", ".DS_Store", "*.class", "*.psd", "*.db"],</span><br><span class="line">// These files will still show up in the side bar, but won't be included in</span><br><span class="line">// Goto Anything or Find in Files</span><br><span class="line">"binary_file_patterns": ["*.jpg", "*.jpeg", "*.png", "*.gif", "*.ttf", "*.tga", "*.dds", "*.ico", "*.eot", "*.pdf", "*.swf", "*.jar", "*.zip"],</span><br><span class="line"></span><br><span class="line">// List any packages to ignore here. When removing entries from this list,</span><br><span class="line">// a restart may be required if the package contains plugins.</span><br><span class="line">// 删除你想要忽略的插件，需要重启</span><br><span class="line">"ignored_packages": ["Vintage"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime text3在ubutun下的安装和配置</title>
      <link href="/2016/03/19/sublime%20text3%E5%9C%A8Ubutun%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/03/19/sublime%20text3%E5%9C%A8Ubutun%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>最近在折腾<em>ubutun</em>系统，打算作为平常使用的主系统，就想在 <em>ubuntu</em> 上找个写 <em>html</em> 和 <em>Javascript</em> 的编辑器。</p><p>在<em>win</em>上使用的 <em>javascript</em> 编辑器用的是 <em>notepad++</em>，但是 <em>linux</em> 上好像是没有的，那只有再找一个了。</p><p>我的需求是 <strong>一个轻量级的 javascript 编辑器</strong>，只需要编辑器有基本功能如语法高亮，语法检查就行，最好安装简单，不要太浪费时间配置。</p><h3 id="试用bluefish编辑器"><a href="#试用bluefish编辑器" class="headerlink" title="试用bluefish编辑器"></a>试用bluefish编辑器</h3><p>首先找到的是一款叫 <em>bluefish</em> 的编辑器，这款编辑器的优点是启动快，界面美观大方。而且安装简单，同时自带中文，哈哈，看起来很适合我这种菜鸡啊。那就先装上试试吧。</p><p>打开终端输入命令：</p><p><code>sudo apt-get install bluefish</code></p><p>好啦，等待安装完成吧。</p><p>安装完成后，打开先写点代码试试，在熟悉了一下编辑器功能后，发现有两个我无法接受的缺点：</p><ul><li>不支持使用 <em>vim</em> 模式         （这让我怎么写代码？）</li><li>不支持安装 <em>emmet</em> 插件   （啊，我写代码要打一堆尖括号啊？不能忍啊！）</li></ul><p>好吧，你被我<em>ban</em>了,<del>bluefish</del>。</p><h3 id="安装sublime"><a href="#安装sublime" class="headerlink" title="安装sublime"></a>安装<em>sublime</em></h3><p>只能再找一个编辑器了。</p><p><em>google</em>一下，发现好多人推荐 <em>sublime text</em> 啊，启动速度快，能自己拓展，那装一个试试吧。</p><p><em>linux</em>的<em>ubuntu</em>系统下<em>sublime text 3</em>（以下简称subl） 的安装有两种方法：</p><h4 id="通过下载软件包安装"><a href="#通过下载软件包安装" class="headerlink" title="通过下载软件包安装"></a>通过下载软件包安装</h4><p>1.到subl官网下载软件安装包，这是<a href="http://www.sublimetext.com/2" target="_blank" rel="noopener">sublime下载官网</a></p><p>2.直接双击下载的软件包即可安装 。</p><h4 id="通过终端安装"><a href="#通过终端安装" class="headerlink" title="通过终端安装"></a>通过终端安装</h4><ol><li><p>打开终端，首先安装 subl3 的软件库，使用命令</p><p><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3</code></p><p>中间会询问是否添加仓库，点击<code>enter</code>即可。</p></li><li><p>刷新软件库，使用命令</p><p><code>sudo apt-get update</code></p></li><li><p>安装<em>subl3</em>,使用命令</p><p><code>sudo apt-get install sublime-text-installer</code></p></li></ol><p>通过以上三步，<em>subl</em>就安装完成了，安装完成会自动启动，把软件图标锁定到侧边启动栏，以后就直接可以点击图标启动了。</p><p>然后就是最基本的配置了。</p><h3 id="使用前配置"><a href="#使用前配置" class="headerlink" title="使用前配置"></a>使用前配置</h3><h4 id="安装package-control-插件"><a href="#安装package-control-插件" class="headerlink" title="安装package control 插件"></a>安装package control 插件</h4><p>这个插件相当于其他所有插件的接口，通过 package control 插件，我们可以方便 直观 只需点一点 的安装其他插件（简直是execting）。</p><p>这个插件的安装方法也很简单。</p><p>首先打开 <em>subl</em> 的命令行，使用快捷键 <em>ctrl +`</em>（就是<code>～</code>那个键），或者点击菜单 <em>view</em> 选项卡里的那个 <em>show consoles</em> 选项，调出控制台。</p><p>然后在控制台输入以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os;pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf),<span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</span><br></pre></td></tr></table></figure><p>点击菜单栏 <em>Preferences</em> 选项卡，看一下有没有<em>pcakage control</em> 选项，如果有，就说明安装成功。</p><p>如果无法通过命令安装，就只能手动安装了。</p><p>手动安装步骤如下</p><ul><li>1.点击<em>Preferences</em> &gt; <em>Browse Packages</em>菜单</li><li>2.进入打开的目录的上层目录，然后再进入 <em>Installed Packages/</em> 目录</li><li>3.下载 <em>Package Control.sublime-package</em> 并 复制到 Installed Packages/目录</li><li>4.重启<em>Sublime Text3</em>。</li></ul><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>汉化<em>subl</em>很简单。</p><ul><li>直接点击 <em>Preferences</em> 选项卡的 <em>package control</em> 选项，选择下拉的 <em>install package</em> 选项</li><li>在输入框中输入  <em>localization</em> ，然后点击检索出来的 <em>Chineselocalizetion</em> 插件，等待安装完成</li><li>再看一下界面，已经成中文的了。如果需要切换，点击 帮助 选项卡的 language 选项可以选择你想要的语言。</li></ul><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><p>其实使用subl也并不是特别需要激活，因为只是会隔几十分钟提示一下你未激活，不影响什么。</p><p>对于强迫症用户，可以选择两种方式激活。</p><ul><li>付费激活，虽然有点贵，大几百，有点肉疼。</li><li>破解（我只提示一下，点开帮助的关于选项卡，看一下版本号，然后去搜激活码，一搜一堆，就不在这贴激活码了，不太好）（毕竟我心里还是比较想支持正版的，穷啊）</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><em>subl</em>的设置跟别的软件不太一样，不是通过一堆选项卡和按钮来设置界面，字体等，而是使用<code>json</code>文件形式。设置使用的 <code>json</code> 文件一式两份，一份默认设置，一份用户设置，用户设置优先，也就是说你在用户的 <code>json</code> 里写了的设置就使用你写的，没写就使用默认的。</p><p>你想设置什么需要自己去写入<code>json</code>文件。点开菜单 首选项 选项卡，选择设置，会打开两个文件，左边的是默认设置，右边的是用户设置。</p><p>当然，作为轻度用户，并不需要设置许多东西。只需要设置一下字体行距就行。</p><p>我的配置如下，可以直接粘贴进你的用户设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"bold_folder_labels"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"color_scheme"</span>: <span class="string">"Packages/Color Scheme - Default/Monokai.tmTheme"</span>,</span><br><span class="line">    <span class="attr">"font_size"</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">"highlight_line"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"ignored_packages"</span>:</span><br><span class="line">    [</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"rulers"</span>:</span><br><span class="line">    [</span><br><span class="line">    <span class="number">80</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"save_on_focus_lost"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"scroll_past_end"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"show_encoding"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"show_full_path"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"show_line_endings"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"tab_size"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"trim_trailing_white_space_on_save"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时提示一下，如果想详细设置的，可以看<a href="https://gyufei.github.io/2016/03/20/sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">我的另一篇博客</a>，是<em>subl</em>所有默认设置的中文版本翻译，篇幅较长，在这就不贴了。</p><p>着重看一下 配置文件里的这个 <em>“ignored_packages”:</em> 项，这个是忽略的插件的列表。如果你想使用 <code>vim</code> 的话，可以就像我一样，将忽略插件列表里默认有的 <em>vintage</em> 字符删去就可以启用<code>vim</code>模式了。</p><p>在 <em>sublime</em> 的<code>vim</code> 模式下，进入命令模式后，光标是一个闪烁的下滑线，难以辨认，使用也不方便，同时在安装了 高亮括号插件  <em>Brackhigtlight</em> 插件后，界面乱七八糟都是下划线，十分难看。</p><p>如果想要将 <em>sublime</em> 的 <code>vim</code> 命令模式下光标设置为方块，而不是下划线，可以安装  <em>block cursor everywhere插件</em> 实现美观的 方块光标。</p><h3 id="安装-emmet"><a href="#安装-emmet" class="headerlink" title="安装 emmet"></a>安装 <em>emmet</em></h3><p>写 <em>html</em> 怎么能不用 <em>emmet</em> 插件呢，简直是神器啊。可以 <em>google</em> 一下 看一下教程，试用一下，你会发现你已经离不开它了。</p><p>安装 <em>emmet</em> 插件很简单，跟安装汉化差不多，点开选项卡 <em>首选项</em>，在点开 <em>package control</em> ，再点击 install package ，在弹出的搜索框输入 emmet，等待安装完成就可以了。</p><p>需要注意的是，跟别的编辑器的 <em>emmet</em> 插件使用 <em>table</em> 来自动填写不同，<em>sublame text 3</em> 需要使用 <em>ctrl + e</em> 来完成自动填写。你可以试一下，输入 ！，之后按 ctrl + e，一个HTML文件的主体就出现了。</p><p>如果你想在 <em>emmet</em> 使用 <em>tabel</em> 来完成自动填写，那就需要修改 <em>emmet</em> 插件设置了。步骤如下：</p><ul><li>选择菜单栏 <em>首选项</em> 选项卡里的 <em>package setting</em> 选项里的 <em>emmet</em> 选项卡。</li><li>选择 <em>emmet</em> 选项卡中的 <em>key-bind user</em> 选项，在用户设置文件中，输入一下代码。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"keys"</span>: [</span><br><span class="line">            <span class="string">"tab"</span></span><br><span class="line">        ],</span><br><span class="line">    <span class="attr">"args"</span>: &#123;</span><br><span class="line">        <span class="attr">"action"</span>: <span class="string">"expand_abbreviation"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"run_emmet_action"</span>,</span><br><span class="line">    <span class="attr">"context"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"emmet_action_enabled.expand_abbreviation"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>ok，现在就可以使用 <em>tabel</em> 来完成自动填写了。</p><h3 id="清空sublime-text-3-配置（还原设置）"><a href="#清空sublime-text-3-配置（还原设置）" class="headerlink" title="清空sublime text 3 配置（还原设置）"></a>清空sublime text 3 配置（还原设置）</h3><p><em>subl</em>的缺点就是有时候出现莫名其妙的<em>bug</em>，卸载重装又很麻烦。</p><p>这时可以通过清空<em>subl</em>的配置文件，来达到还原设置，让 <em>subl</em> 像刚装上一样，清新可人（这是什么形容词啊？）</p><p>清空配置命令如下：</p><p><code>sudo rm -rf /home/$USER/.config/sublime-text-3/</code></p><p>使用后就像恢复出厂设置了一样（不要乱试，后果严重，在你确定需要的时候再使用，否则你要哭出来）</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>至此，我的 <em>sublime text 3</em> 编辑器的配置已经基本完成，基本功能已经完善，可以作为 生产工具 使用了。</p><p>对于<em>subl</em> 的更多配置，就只列出关键要点，由大家自行摸索吧。</p><ul><li><em>sublime text 3</em> 的主题是通过与插件相同的方式安装的，可以自行寻找顺眼的主题安装。</li><li><em>sublime text3</em> 在 <em>ubuntu</em> 需要经过配置才能输入中文，但是软件是可以直接显示中文的。（输入中文的配置过程比较麻烦，请思考对中文是否有特别需求，若无可以无视，去配置纯属浪费时间）,输入中文设置见<a href="https://gyufei.github.io/2016/03/19/%E8%A7%A3%E5%86%B3sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">我的另一篇博客</a></li><li>在编程中，生产力的提升比生产工具重要的多，所以请谨慎考虑自己的需求，根据需求配置生产环境（意思是不需要装一大堆别人都说好的插件啊！）</li><li><strong>最难的事，是明白自己想要什么啊</strong></li></ul>]]></content>
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决sublime text3在ubutun下的中文输入问题</title>
      <link href="/2016/03/19/%E8%A7%A3%E5%86%B3sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2016/03/19/%E8%A7%A3%E5%86%B3sublime-text3%E5%9C%A8ubutun%E4%B8%8B%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><code>sublime-text-3</code> 编辑器性感而敏捷，却让人感慨有其长必有其短。</p><p>有些缺点都可以通过插件解决。但是在<code>ubutun</code>环境下，要解决输入中文问题却很复杂，不能输入中文实在是太痛苦了。</p><p>我在做一个有很多文字的<code>html</code>页面，在无数次复制粘贴后，我终于决定看一下有没有好的解决办法能解决这个问题。</p><p>在试了有十几个教程都失败时，我几乎要放弃了。搜索出来的教程大部分都不起作用，有的连库文件的语法都是错误的，更别说编译到subl 里了。</p><p>最终我决定去官方网站逛逛，发现官网论坛的管理员提供了一个方法，很简单。试了一下，竟然很顺畅的成功了。</p><p>那就记录一下这个方法，希望对于解决大家头疼的subl不能输入中文问题有一些帮助。</p><p><strong>以下方法在 ubutun15.04 中亲测可行，subl版本为 3126 。</strong></p><p>具体分为下面几个步骤：</p><h1 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h1><p>源文件github链接地址为</p><p><a href="https://github.com/jfcherng/my_scripts" target="_blank" rel="noopener">https://github.com/jfcherng/my_scripts</a></p><p>点击页面右侧的 <em>clone and download</em> 按钮下载源文件的 <em>zip</em> 包，</p><p>下载完成后解压到任意文件夹即可。</p><h1 id="安装fcitx输入法"><a href="#安装fcitx输入法" class="headerlink" title="安装fcitx输入法"></a>安装fcitx输入法</h1><p>打开终端，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y fcitx fcitx-im</span><br></pre></td></tr></table></figure><p>安装 fcitx 输入法框架,安装此框架后，框架下的输入法就都可以在 subl 中使用了。</p><h1 id="安装编译库"><a href="#安装编译库" class="headerlink" title="安装编译库"></a>安装编译库</h1><p>先更新软件库，在终端输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p> 再安装编译库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y build-essential libgtk2.0-dev</span><br></pre></td></tr></table></figure><h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p>首先在终端中切换到第一步中下载解压后的文件夹，再进入 文件夹中的 <em>sublime_text_fcitx</em> 子文件夹中。</p><p>在切换到文件夹后，在终端中输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Os -shared -o libsublime-imfix.so sublime_imfix.c $(pkg-config --libs --cflags gtk+-2.0) -fPIC</span><br></pre></td></tr></table></figure><p>完成编译</p><h1 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h1><p>依次在命令行中输入以下命令(<code>/opt//sublime_text</code>为<em>subl</em>的默认安装目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv -f libsublime-imfix.so /opt/sublime_text</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -f subl &quot;$(which subl)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -f sublime_text.desktop /usr/share/applications/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -f sublime_text.desktop /opt/sublime_text</span><br></pre></td></tr></table></figure><p>完成。 </p><p>打开<em>sublime</em>，你会发现，在你切换到<em>fcitx</em>输入法后，就可以在输入中文了。这也是我在实验了网络上数十几个不同教程后，发现唯一简单且有效的方法。</p><p>不用复制粘贴大堆的代码，不用改系统的各种文件，只需要输入几条命令就可以输入中文了。</p><p>当然，不管那种方法，可以输入中文后存在不能在subl打开中插件包目录的问题，要想完美解决，只能等官方动作了。（虽然我在官网论坛中并没有发现官方有这种想法^_^!）。</p><p>以上就是<em>sublime-text-3</em> 设置可输入中文的方法。</p>]]></content>
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
